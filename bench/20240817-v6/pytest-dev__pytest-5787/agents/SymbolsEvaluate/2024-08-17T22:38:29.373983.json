{
  "name": "SymbolsEvaluate",
  "model": "gpt-4o-2024-08-06",
  "metadata": {
    "token_count": 0,
    "cost": 0
  },
  "issue": "<description>:exception serialization should include chained exceptions\ngiven some simple tests:\r\n```\r\ndef test_chained_exception_with_from():\r\n    try:\r\n        try:\r\n            raise ValueError(11)\r\n        except Exception as e1:\r\n            raise ValueError(12) from e1\r\n    except Exception as e2:\r\n        raise ValueError(13) from e2\r\n\r\n\r\ndef test_chained_exception_without_from():\r\n    try:\r\n        try:\r\n            raise ValueError(21)\r\n        except Exception:\r\n            raise ValueError(22)\r\n    except Exception:\r\n        raise ValueError(23)\r\n```\r\nwhen run without xdist it displays whole exception trace nicely :\r\n```\r\n================ FAILURES ==========================\r\n__________________________ test_chained_exception_with_from _______________________\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n>               raise ValueError(11)\r\nE               ValueError: 11\r\n\r\nbasic/test_basic.py:80: ValueError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n>               raise ValueError(12) from e1\r\nE               ValueError: 12\r\n\r\nbasic/test_basic.py:82: ValueError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n                raise ValueError(12) from e1\r\n        except Exception as e2:\r\n>           raise ValueError(13) from e2\r\nE           ValueError: 13\r\n\r\nbasic/test_basic.py:84: ValueError\r\n\r\n\r\n_____________________ test_chained_exception_without_from ____________________________\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n>               raise ValueError(21)\r\nE               ValueError: 21\r\n\r\nbasic/test_basic.py:90: ValueError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n>               raise ValueError(22)\r\nE               ValueError: 22\r\n\r\nbasic/test_basic.py:92: ValueError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n                raise ValueError(22)\r\n        except Exception:\r\n>           raise ValueError(23)\r\nE           ValueError: 23\r\n\r\nbasic/test_basic.py:94: ValueError\r\n\r\n```\r\n\r\nbut when run with xdist (`-n auto`), it just displays the last one:\r\n```\r\n============ FAILURES ================\r\n_____________ test_chained_exception_with_from _______________________________\r\n[gw0] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n                raise ValueError(12) from e1\r\n        except Exception as e2:\r\n>           raise ValueError(13) from e2\r\nE           ValueError: 13\r\n\r\nbasic/test_basic.py:84: ValueError\r\n\r\n____________ test_chained_exception_without_from ____________\r\n[gw1] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n                raise ValueError(22)\r\n        except Exception:\r\n>           raise ValueError(23)\r\nE           ValueError: 23\r\n\r\nbasic/test_basic.py:94: ValueError\r\n\r\n```\r\n\r\nmy setup:\r\n```\r\npytest           4.0.2       \r\npytest-xdist     1.25.0\r\n```\n</description>",
  "request": {
    "related_symbols": [
      {
        "name": "_pytest._code.TracebackEntry",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
        "start_line": 162,
        "start_column": 4698,
        "end_line": 0,
        "end_column": 7955,
        "start_byte": 4698,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.TracebackEntry._repr_style",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "_repr_style = None",
        "start_line": 165,
        "start_column": 4767,
        "end_line": 4,
        "end_column": 4785,
        "start_byte": 4767,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.exprinfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "exprinfo = None",
        "start_line": 166,
        "start_column": 4790,
        "end_line": 4,
        "end_column": 4805,
        "start_byte": 4790,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1",
        "start_line": 168,
        "start_column": 4811,
        "end_line": 4,
        "end_column": 4965,
        "start_byte": 4811,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.set_repr_style",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode",
        "start_line": 173,
        "start_column": 4971,
        "end_line": 4,
        "end_column": 5075,
        "start_byte": 4971,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.frame",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)",
        "start_line": 177,
        "start_column": 5081,
        "end_line": 4,
        "end_column": 5201,
        "start_byte": 5081,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.relline",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno",
        "start_line": 183,
        "start_column": 5207,
        "end_line": 4,
        "end_column": 5296,
        "start_byte": 5207,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.__repr__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)",
        "start_line": 187,
        "start_column": 5302,
        "end_line": 4,
        "end_column": 5403,
        "start_byte": 5302,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.statement",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)",
        "start_line": 190,
        "start_column": 5409,
        "end_line": 4,
        "end_column": 5605,
        "start_byte": 5409,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.path",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path",
        "start_line": 196,
        "start_column": 5611,
        "end_line": 4,
        "end_column": 5716,
        "start_byte": 5611,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.locals",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals",
        "start_line": 201,
        "start_column": 5722,
        "end_line": 4,
        "end_column": 5832,
        "start_byte": 5722,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.getfirstlinesource",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def getfirstlinesource(self):\n        return self.frame.code.firstlineno",
        "start_line": 206,
        "start_column": 5838,
        "end_line": 4,
        "end_column": 5910,
        "start_byte": 5838,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.getsource",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]",
        "start_line": 209,
        "start_column": 5916,
        "end_line": 4,
        "end_column": 6798,
        "start_byte": 5916,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.source",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "source = property(getsource)",
        "start_line": 235,
        "start_column": 6804,
        "end_line": 4,
        "end_column": 6832,
        "start_byte": 6804,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.ishidden",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh",
        "start_line": 237,
        "start_column": 6838,
        "end_line": 4,
        "end_column": 7432,
        "start_byte": 6838,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.__str__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)",
        "start_line": 254,
        "start_column": 7438,
        "end_line": 4,
        "end_column": 7833,
        "start_byte": 7438,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.TracebackEntry.name",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
        "start_line": 268,
        "start_column": 7839,
        "end_line": 4,
        "end_column": 7955,
        "start_byte": 7839,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
        "start_line": 274,
        "start_column": 7958,
        "end_line": 0,
        "end_column": 11818,
        "start_byte": 7958,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.Traceback.Entry",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "Entry = TracebackEntry",
        "start_line": 279,
        "start_column": 8092,
        "end_line": 4,
        "end_column": 8114,
        "start_byte": 8092,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)",
        "start_line": 281,
        "start_column": 8120,
        "end_line": 4,
        "end_column": 8555,
        "start_byte": 8120,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.cut",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self",
        "start_line": 295,
        "start_column": 8561,
        "end_line": 4,
        "end_column": 9668,
        "start_byte": 8561,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.__getitem__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val",
        "start_line": 321,
        "start_column": 9674,
        "end_line": 4,
        "end_column": 9841,
        "start_byte": 9674,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.filter",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)",
        "start_line": 327,
        "start_column": 9847,
        "end_line": 4,
        "end_column": 10342,
        "start_byte": 9847,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.getcrashentry",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]",
        "start_line": 339,
        "start_column": 10348,
        "end_line": 4,
        "end_column": 10652,
        "start_byte": 10348,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.Traceback.recursionindex",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
        "start_line": 349,
        "start_column": 10658,
        "end_line": 4,
        "end_column": 11818,
        "start_byte": 10658,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
        "start_line": 386,
        "start_column": 11961,
        "end_line": 0,
        "end_column": 19503,
        "start_byte": 11961,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.ExceptionInfo._assert_start_repr",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "_assert_start_repr = \"AssertionError('assert \"",
        "start_line": 392,
        "start_column": 12119,
        "end_line": 4,
        "end_column": 12165,
        "start_byte": 12119,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo._excinfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])",
        "start_line": 394,
        "start_column": 12171,
        "end_line": 4,
        "end_column": 12244,
        "start_byte": 12171,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo._striptext",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "_striptext = attr.ib(type=str, default=\"\")",
        "start_line": 395,
        "start_column": 12249,
        "end_line": 4,
        "end_column": 12291,
        "start_byte": 12249,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo._traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "_traceback = attr.ib(type=Optional[Traceback], default=None)",
        "start_line": 396,
        "start_column": 12296,
        "end_line": 4,
        "end_column": 12356,
        "start_byte": 12296,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.from_exc_info",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)",
        "start_line": 398,
        "start_column": 12362,
        "end_line": 4,
        "end_column": 13284,
        "start_byte": 12362,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.from_current",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)",
        "start_line": 425,
        "start_column": 13290,
        "end_line": 4,
        "end_column": 14045,
        "start_byte": 13290,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.for_later",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)",
        "start_line": 447,
        "start_column": 14051,
        "end_line": 4,
        "end_column": 14191,
        "start_byte": 14051,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.fill_unfilled",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info",
        "start_line": 453,
        "start_column": 14197,
        "end_line": 4,
        "end_column": 14453,
        "start_byte": 14197,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.type",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]",
        "start_line": 458,
        "start_column": 14459,
        "end_line": 4,
        "end_column": 14691,
        "start_byte": 14459,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.value",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]",
        "start_line": 466,
        "start_column": 14697,
        "end_line": 4,
        "end_column": 14923,
        "start_byte": 14697,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.tb",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]",
        "start_line": 474,
        "start_column": 14929,
        "end_line": 4,
        "end_column": 15168,
        "start_byte": 14929,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.typename",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__",
        "start_line": 482,
        "start_column": 15174,
        "end_line": 4,
        "end_column": 15420,
        "start_byte": 15174,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback",
        "start_line": 490,
        "start_column": 15426,
        "end_line": 4,
        "end_column": 15636,
        "start_byte": 15426,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value",
        "start_line": 497,
        "start_column": 15642,
        "end_line": 4,
        "end_column": 15742,
        "start_byte": 15642,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.__repr__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))",
        "start_line": 501,
        "start_column": 15748,
        "end_line": 4,
        "end_column": 15955,
        "start_byte": 15748,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.exconly",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text",
        "start_line": 506,
        "start_column": 15961,
        "end_line": 4,
        "end_column": 16595,
        "start_byte": 15961,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.errisinstance",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)",
        "start_line": 522,
        "start_column": 16601,
        "end_line": 4,
        "end_column": 16827,
        "start_byte": 16601,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo._getreprcrash",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)",
        "start_line": 528,
        "start_column": 16833,
        "end_line": 4,
        "end_column": 17101,
        "start_byte": 16833,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.getrepr",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)",
        "start_line": 534,
        "start_column": 17107,
        "end_line": 4,
        "end_column": 18918,
        "start_byte": 17107,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionInfo.match",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
        "start_line": 593,
        "start_column": 18924,
        "end_line": 4,
        "end_column": 19503,
        "start_byte": 18924,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
        "start_line": 607,
        "start_column": 19506,
        "end_line": 0,
        "end_column": 29052,
        "start_byte": 19506,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.FormattedExcinfo.flow_marker",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "flow_marker = \">\"",
        "start_line": 612,
        "start_column": 19646,
        "end_line": 4,
        "end_column": 19663,
        "start_byte": 19646,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.fail_marker",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "fail_marker = \"E\"",
        "start_line": 613,
        "start_column": 19668,
        "end_line": 4,
        "end_column": 19685,
        "start_byte": 19668,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.showlocals",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "showlocals = attr.ib(default=False)",
        "start_line": 615,
        "start_column": 19691,
        "end_line": 4,
        "end_column": 19726,
        "start_byte": 19691,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.style",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "style = attr.ib(default=\"long\")",
        "start_line": 616,
        "start_column": 19731,
        "end_line": 4,
        "end_column": 19762,
        "start_byte": 19731,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.abspath",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "abspath = attr.ib(default=True)",
        "start_line": 617,
        "start_column": 19767,
        "end_line": 4,
        "end_column": 19798,
        "start_byte": 19767,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.tbfilter",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "tbfilter = attr.ib(default=True)",
        "start_line": 618,
        "start_column": 19803,
        "end_line": 4,
        "end_column": 19835,
        "start_byte": 19803,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.funcargs",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "funcargs = attr.ib(default=False)",
        "start_line": 619,
        "start_column": 19840,
        "end_line": 4,
        "end_column": 19873,
        "start_byte": 19840,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.truncate_locals",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "truncate_locals = attr.ib(default=True)",
        "start_line": 620,
        "start_column": 19878,
        "end_line": 4,
        "end_column": 19917,
        "start_byte": 19878,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.chain",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "chain = attr.ib(default=True)",
        "start_line": 621,
        "start_column": 19922,
        "end_line": 4,
        "end_column": 19951,
        "start_byte": 19922,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.astcache",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)",
        "start_line": 622,
        "start_column": 19956,
        "end_line": 4,
        "end_column": 20026,
        "start_byte": 19956,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo._getindent",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))",
        "start_line": 624,
        "start_column": 20032,
        "end_line": 4,
        "end_column": 20465,
        "start_byte": 20032,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo._getentrysource",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source",
        "start_line": 639,
        "start_column": 20471,
        "end_line": 4,
        "end_column": 20644,
        "start_byte": 20471,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.repr_args",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)",
        "start_line": 645,
        "start_column": 20650,
        "end_line": 4,
        "end_column": 20890,
        "start_byte": 20650,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.get_source",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
        "start_line": 652,
        "start_column": 20896,
        "end_line": 4,
        "end_column": 21896,
        "start_byte": 20896,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.get_exconly",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines",
        "start_line": 676,
        "start_column": 21902,
        "end_line": 4,
        "end_column": 22326,
        "start_byte": 21902,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.repr_locals",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)",
        "start_line": 688,
        "start_column": 22332,
        "end_line": 4,
        "end_column": 23498,
        "start_byte": 22332,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.repr_traceback_entry",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)",
        "start_line": 714,
        "start_column": 23504,
        "end_line": 4,
        "end_column": 24777,
        "start_byte": 23504,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo._makepath",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path",
        "start_line": 747,
        "start_column": 24783,
        "end_line": 4,
        "end_column": 25053,
        "start_byte": 24783,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.repr_traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)",
        "start_line": 757,
        "start_column": 25059,
        "end_line": 4,
        "end_column": 25701,
        "start_byte": 25059,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo._truncate_recursive_traceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline",
        "start_line": 775,
        "start_column": 25707,
        "end_line": 4,
        "end_column": 27387,
        "start_byte": 25707,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.FormattedExcinfo.repr_excinfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
        "start_line": 812,
        "start_column": 27393,
        "end_line": 4,
        "end_column": 29052,
        "start_byte": 27393,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionChainRepr",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
        "start_line": 882,
        "start_column": 29762,
        "end_line": 0,
        "end_column": 30319,
        "start_byte": 29762,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.ExceptionChainRepr.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]",
        "start_line": 883,
        "start_column": 29807,
        "end_line": 4,
        "end_column": 30068,
        "start_byte": 29807,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ExceptionChainRepr.toterminal",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
        "start_line": 891,
        "start_column": 30074,
        "end_line": 4,
        "end_column": 30319,
        "start_byte": 30074,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprExceptionInfo",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
        "start_line": 900,
        "start_column": 30322,
        "end_line": 0,
        "end_column": 30620,
        "start_byte": 30322,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.ReprExceptionInfo.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash",
        "start_line": 901,
        "start_column": 30366,
        "end_line": 4,
        "end_column": 30516,
        "start_byte": 30366,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprExceptionInfo.toterminal",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
        "start_line": 906,
        "start_column": 30522,
        "end_line": 4,
        "end_column": 30620,
        "start_byte": 30522,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprTraceback",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
        "start_line": 911,
        "start_column": 30623,
        "end_line": 0,
        "end_column": 31451,
        "start_byte": 30623,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.ReprTraceback.entrysep",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "entrysep = \"_ \"",
        "start_line": 912,
        "start_column": 30662,
        "end_line": 4,
        "end_column": 30677,
        "start_byte": 30662,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprTraceback.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style",
        "start_line": 914,
        "start_column": 30683,
        "end_line": 4,
        "end_column": 30834,
        "start_byte": 30683,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprTraceback.toterminal",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
        "start_line": 919,
        "start_column": 30840,
        "end_line": 4,
        "end_column": 31451,
        "start_byte": 30840,
        "end_byte": 4
      },
      {
        "name": "_pytest._code.ReprTracebackNative",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
        "start_line": 938,
        "start_column": 31454,
        "end_line": 0,
        "end_column": 31642,
        "start_byte": 31454,
        "end_byte": 0
      },
      {
        "name": "_pytest._code.ReprTracebackNative.__init__",
        "file_path": "src/_pytest/_code/code.py",
        "file_content": "def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
        "start_line": 939,
        "start_column": 31500,
        "end_line": 4,
        "end_column": 31642,
        "start_byte": 31500,
        "end_byte": 4
      },
      {
        "name": "_pytest.assertion.pytest_runtest_teardown",
        "file_path": "src/_pytest/runner.py",
        "file_content": "when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call",
        "start_line": 148,
        "start_column": 5001,
        "end_line": 0,
        "end_column": 5096,
        "start_byte": 5001,
        "end_byte": 0
      },
      {
        "name": "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star",
        "start_line": 185,
        "start_column": 6538,
        "end_line": 4,
        "end_column": 6784,
        "start_byte": 6538,
        "end_byte": 4
      },
      {
        "name": "_pytest.capture.CaptureManager.pytest_runtest_teardown",
        "file_path": "src/_pytest/runner.py",
        "file_content": "d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if",
        "start_line": 226,
        "start_column": 7575,
        "end_line": 4,
        "end_column": 7722,
        "start_byte": 7575,
        "end_byte": 4
      },
      {
        "name": "_pytest.hookspec.pytest_runtest_teardown",
        "file_path": "src/_pytest/runner.py",
        "file_content": "ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n",
        "start_line": 356,
        "start_column": 11465,
        "end_line": 0,
        "end_column": 11864,
        "start_byte": 11465,
        "end_byte": 0
      },
      {
        "name": "_pytest.hookspec.pytest_runtest_makereport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 366,
        "start_column": 11867,
        "end_line": 0,
        "end_column": 12170,
        "start_byte": 11867,
        "end_byte": 0
      },
      {
        "name": "_pytest.hookspec.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 375,
        "start_column": 12173,
        "end_line": 0,
        "end_column": 12322,
        "start_byte": 12173,
        "end_byte": 0
      },
      {
        "name": "_pytest.junitxml.LogXML.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 534,
        "start_column": 17242,
        "end_line": 4,
        "end_column": 20560,
        "start_byte": 17242,
        "end_byte": 4
      },
      {
        "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 572,
        "start_column": 19451,
        "end_line": 4,
        "end_column": 19598,
        "start_byte": 19451,
        "end_byte": 4
      },
      {
        "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 589,
        "start_column": 19968,
        "end_line": 4,
        "end_column": 20111,
        "start_byte": 19968,
        "end_byte": 4
      },
      {
        "name": "_pytest.main.Session.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 406,
        "start_column": 12313,
        "end_line": 4,
        "end_column": 12675,
        "start_byte": 12313,
        "end_byte": 4
      },
      {
        "name": "_pytest.runner.pytest_runtest_teardown",
        "file_path": "src/_pytest/runner.py",
        "file_content": "def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)",
        "start_line": 128,
        "start_column": 3862,
        "end_line": 0,
        "end_column": 4054,
        "start_byte": 3862,
        "end_byte": 0
      },
      {
        "name": "_pytest.runner.call_and_report",
        "file_path": "src/_pytest/runner.py",
        "file_content": "def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report",
        "start_line": 165,
        "start_column": 4915,
        "end_line": 0,
        "end_column": 5311,
        "start_byte": 4915,
        "end_byte": 0
      },
      {
        "name": "_pytest.runner.check_interactive_exception",
        "file_path": "src/_pytest/runner.py",
        "file_content": "def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )",
        "start_line": 176,
        "start_column": 5314,
        "end_line": 0,
        "end_column": 5534,
        "start_byte": 5314,
        "end_byte": 0
      },
      {
        "name": "_pytest.runner.CallInfo.from_call",
        "file_path": "src/_pytest/runner.py",
        "file_content": "@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)",
        "start_line": 212,
        "start_column": 6300,
        "end_line": 4,
        "end_column": 6846,
        "start_byte": 6300,
        "end_byte": 4
      },
      {
        "name": "_pytest.runner.pytest_runtest_makereport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)",
        "start_line": 241,
        "start_column": 7243,
        "end_line": 0,
        "end_column": 7338,
        "start_byte": 7243,
        "end_byte": 0
      },
      {
        "name": "_pytest.skipping.pytest_runtest_makereport",
        "file_path": "src/_pytest/runner.py",
        "file_content": " item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n ",
        "start_line": 119,
        "start_column": 3957,
        "end_line": 0,
        "end_column": 5978,
        "start_byte": 3957,
        "end_byte": 0
      },
      {
        "name": "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na",
        "start_line": 72,
        "start_column": 2118,
        "end_line": 4,
        "end_column": 3104,
        "start_byte": 2118,
        "end_byte": 4
      },
      {
        "name": "_pytest.terminal.TerminalReporter.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "",
        "start_line": 385,
        "start_column": 12404,
        "end_line": 4,
        "end_column": 14437,
        "start_byte": 12404,
        "end_byte": 4
      },
      {
        "name": "_pytest.unittest.pytest_runtest_makereport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      ",
        "start_line": 222,
        "start_column": 7475,
        "end_line": 0,
        "end_column": 8105,
        "start_byte": 7475,
        "end_byte": 0
      },
      {
        "name": "_pytest.resultlog.ResultLog.pytest_runtest_logreport",
        "file_path": "src/_pytest/runner.py",
        "file_content": "d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo",
        "start_line": 61,
        "start_column": 1933,
        "end_line": 4,
        "end_column": 2553,
        "start_byte": 1933,
        "end_byte": 4
      },
      {
        "name": "_pytest.nodes.Node._prunetraceback",
        "file_path": "src/_pytest/nodes.py",
        "file_content": "def _prunetraceback(self, excinfo):\n        pass",
        "start_line": 237,
        "start_column": 7628,
        "end_line": 4,
        "end_column": 7676,
        "start_byte": 7628,
        "end_byte": 4
      },
      {
        "name": "_pytest.nodes.Node._repr_failure_py",
        "file_path": "src/_pytest/nodes.py",
        "file_content": "def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )",
        "start_line": 240,
        "start_column": 7682,
        "end_line": 4,
        "end_column": 9224,
        "start_byte": 7682,
        "end_byte": 4
      },
      {
        "name": "_pytest.nodes.Node.repr_failure",
        "file_path": "src/_pytest/nodes.py",
        "file_content": "def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)",
        "start_line": 285,
        "start_column": 9230,
        "end_line": 4,
        "end_column": 9327,
        "start_byte": 9230,
        "end_byte": 4
      }
    ],
    "root_caused_symbols": [
      {
        "name": "_pytest.reports.BaseReport._to_json",
        "file_path": "src/_pytest/reports.py",
        "file_content": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d",
        "start_line": 153,
        "start_column": 4241,
        "end_line": 4,
        "end_column": 5985,
        "start_byte": 4241,
        "end_byte": 4
      }
    ]
  },
  "response": {
    "scratch_pad": "## Analyzing the Issue and Expected Fixes:\n\n- Reported Issue: The current exception reporting functionality not showing the entire chain or context of exceptions consistently when run with xdist.\n- Issue Source: xdist potentially changes the environment such that chained exceptions are not printed. The relevant functions could involve serialization or representation of exceptions.\n- Expected Result: When using xdist, exception reports should show the entire chain of exceptions just like the single-process execution without xdist.\n- Cause Analysis: The serialization or exception reporting might be losing information about the exception hierarchy or chain during its process.\n- Fix Strategy: Ensure the process for chaining exceptions in the reports is consistent and includes all detailed steps from the chaining process.\n\n## Identification of Symbols Related to the Issue:\n- \"_pytest.reports.BaseReport._to_json\" serializes the report dict which should include handling chains in the exception tracebacks spun.\n- \"_pytest._code.ExceptionInfo.traceback\" tracks how exceptions link up and pass on during serialization.\n- \"_pytest._code.ExceptionInfo.getrepr\" handles the representation of exceptions with chained options.\n- Each symbol affects part of process flow from object instantiation/traceback capture to provides final display output affected multiple sections.\n- Core requirement is ensuring full chain propagation without any losses.",
    "symbols": [
      {
        "name": "_pytest.reports.BaseReport._to_json",
        "file_path": "src/_pytest/reports.py",
        "reason": "The _to_json function returns serialized data, but may not fully capture exception chains when using xdist."
      },
      {
        "name": "_pytest._code.ExceptionInfo.getrepr",
        "file_path": "src/_pytest/_code/code.py",
        "reason": "The getrepr method formats exception info, including tracebacks; it may lack complete handling of chained exceptions, especially in distributed environments."
      }
    ],
    "more_info": [],
    "is_done": false,
    "symbols_scratch_pad": [
      "Analyzing _pytest.reports.BaseReport._to_json:\n- Seems primarily concerned with converting existing exception data into a serializable dict format.\n- Key concern could be the representation handling of 'disassembled_report' if it doesn't cover chained exceptions properly.\n- Assume needs modification to ensure \"reprtraceback\" and \"reprcrash\" deal with multiple linked exceptions in process.",
      "Analyzing _pytest._code.ExceptionInfo.getrepr:\n- Responsible for returning a string representation of the exception.\n- Should inherently support chained exceptions through the \"chain\" parameter, allowing chained exceptions to be included in the output.\n- However, potential loss in serialization might hinder chaining records in process.",
      "Analyzing further ExceptionInfo instances and whether they appropriately manage the capture and relay of complete exception and chaining data internally."
    ]
  },
  "messages": [
    {
      "role": "system",
      "content": "You are an autonomous AI assistant tasked with finding relevant code in an existing \ncodebase based on a reported issue. \nYour task is base on the symbol code to identify how many symbols need to be change to resolve the issue. \n#Input Structure:\n\n* <issue>: Contains the reported issue.\n* <symbol>: the code might to be relevant to the issue.\n\n# Your Task:\n\n1. Analyze User Instructions:\nCarefully read the reported issue within the <issue> tag.\nthink step by step and write out your thoughts in the scratch_pad field.\n1.1 What issue is the user describing?\n1.2 How was this issue caused?\n1.3 If the user described the expected result, what should it be fixed to?\n1.4 If the user did not provide an expected result, what should the expectation be?\n1.5 How should the issue be fixed to meet the expectation?\n\n2. Make the evaluate:\n2.1. Thoroughly analyze each lines in the <symbol> and <symbol> tags.\n2.2. Match the symbol/code/pattern with the key elements, functions, variables, or patterns identified in the reported issue.\n2.3. Evaluate the relevance of each symbol based on how well it aligns with the reported issue and current file context.\n2.4. make the decision how many symbols need to be change to resolve the issue.\n2.5. if you need more file content or symbol information, you can ask the user for more information.\n2.6. relative symbol means, He might be the root cause of the problem, or he could be a part of the process that reproduces the issue.\n\nThink step by step and write out your thoughts in the scratch_pad field.  \n"
    },
    {
      "role": "user",
      "content": "<issue><description>:exception serialization should include chained exceptions\ngiven some simple tests:\r\n```\r\ndef test_chained_exception_with_from():\r\n    try:\r\n        try:\r\n            raise ValueError(11)\r\n        except Exception as e1:\r\n            raise ValueError(12) from e1\r\n    except Exception as e2:\r\n        raise ValueError(13) from e2\r\n\r\n\r\ndef test_chained_exception_without_from():\r\n    try:\r\n        try:\r\n            raise ValueError(21)\r\n        except Exception:\r\n            raise ValueError(22)\r\n    except Exception:\r\n        raise ValueError(23)\r\n```\r\nwhen run without xdist it displays whole exception trace nicely :\r\n```\r\n================ FAILURES ==========================\r\n__________________________ test_chained_exception_with_from _______________________\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n>               raise ValueError(11)\r\nE               ValueError: 11\r\n\r\nbasic/test_basic.py:80: ValueError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n>               raise ValueError(12) from e1\r\nE               ValueError: 12\r\n\r\nbasic/test_basic.py:82: ValueError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n                raise ValueError(12) from e1\r\n        except Exception as e2:\r\n>           raise ValueError(13) from e2\r\nE           ValueError: 13\r\n\r\nbasic/test_basic.py:84: ValueError\r\n\r\n\r\n_____________________ test_chained_exception_without_from ____________________________\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n>               raise ValueError(21)\r\nE               ValueError: 21\r\n\r\nbasic/test_basic.py:90: ValueError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n>               raise ValueError(22)\r\nE               ValueError: 22\r\n\r\nbasic/test_basic.py:92: ValueError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n                raise ValueError(22)\r\n        except Exception:\r\n>           raise ValueError(23)\r\nE           ValueError: 23\r\n\r\nbasic/test_basic.py:94: ValueError\r\n\r\n```\r\n\r\nbut when run with xdist (`-n auto`), it just displays the last one:\r\n```\r\n============ FAILURES ================\r\n_____________ test_chained_exception_with_from _______________________________\r\n[gw0] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\r\n\r\n    def test_chained_exception_with_from():\r\n        try:\r\n            try:\r\n                raise ValueError(11)\r\n            except Exception as e1:\r\n                raise ValueError(12) from e1\r\n        except Exception as e2:\r\n>           raise ValueError(13) from e2\r\nE           ValueError: 13\r\n\r\nbasic/test_basic.py:84: ValueError\r\n\r\n____________ test_chained_exception_without_from ____________\r\n[gw1] linux -- Python 3.6.7 /home/mulawa/developement/omcp/has/test/py/.tox/sct/bin/python3.6\r\n\r\n    def test_chained_exception_without_from():\r\n        try:\r\n            try:\r\n                raise ValueError(21)\r\n            except Exception:\r\n                raise ValueError(22)\r\n        except Exception:\r\n>           raise ValueError(23)\r\nE           ValueError: 23\r\n\r\nbasic/test_basic.py:94: ValueError\r\n\r\n```\r\n\r\nmy setup:\r\n```\r\npytest           4.0.2       \r\npytest-xdist     1.25.0\r\n```\n</description></issue>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.reports.BaseReport._to_json</name><path>src/_pytest/reports.py</path><content>def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry</name><path>src/_pytest/_code/code.py</path><content>class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry._repr_style</name><path>src/_pytest/_code/code.py</path><content>_repr_style = None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.exprinfo</name><path>src/_pytest/_code/code.py</path><content>exprinfo = None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.set_repr_style</name><path>src/_pytest/_code/code.py</path><content>def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.frame</name><path>src/_pytest/_code/code.py</path><content>@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.relline</name><path>src/_pytest/_code/code.py</path><content>@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.__repr__</name><path>src/_pytest/_code/code.py</path><content>def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.statement</name><path>src/_pytest/_code/code.py</path><content>@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.path</name><path>src/_pytest/_code/code.py</path><content>@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.locals</name><path>src/_pytest/_code/code.py</path><content>@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.getfirstlinesource</name><path>src/_pytest/_code/code.py</path><content>def getfirstlinesource(self):\n        return self.frame.code.firstlineno</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.getsource</name><path>src/_pytest/_code/code.py</path><content>def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.source</name><path>src/_pytest/_code/code.py</path><content>source = property(getsource)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.ishidden</name><path>src/_pytest/_code/code.py</path><content>def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.__str__</name><path>src/_pytest/_code/code.py</path><content>def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.TracebackEntry.name</name><path>src/_pytest/_code/code.py</path><content>@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback</name><path>src/_pytest/_code/code.py</path><content>class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.Entry</name><path>src/_pytest/_code/code.py</path><content>Entry = TracebackEntry</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.cut</name><path>src/_pytest/_code/code.py</path><content>def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.__getitem__</name><path>src/_pytest/_code/code.py</path><content>def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.filter</name><path>src/_pytest/_code/code.py</path><content>def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.getcrashentry</name><path>src/_pytest/_code/code.py</path><content>def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.Traceback.recursionindex</name><path>src/_pytest/_code/code.py</path><content>def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo</name><path>src/_pytest/_code/code.py</path><content>@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo._assert_start_repr</name><path>src/_pytest/_code/code.py</path><content>_assert_start_repr = \"AssertionError('assert \"</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo._excinfo</name><path>src/_pytest/_code/code.py</path><content>_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo._striptext</name><path>src/_pytest/_code/code.py</path><content>_striptext = attr.ib(type=str, default=\"\")</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo._traceback</name><path>src/_pytest/_code/code.py</path><content>_traceback = attr.ib(type=Optional[Traceback], default=None)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.from_exc_info</name><path>src/_pytest/_code/code.py</path><content>@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.from_current</name><path>src/_pytest/_code/code.py</path><content>@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.for_later</name><path>src/_pytest/_code/code.py</path><content>@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.fill_unfilled</name><path>src/_pytest/_code/code.py</path><content>def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.type</name><path>src/_pytest/_code/code.py</path><content>@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.value</name><path>src/_pytest/_code/code.py</path><content>@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.tb</name><path>src/_pytest/_code/code.py</path><content>@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.typename</name><path>src/_pytest/_code/code.py</path><content>@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.traceback</name><path>src/_pytest/_code/code.py</path><content>@property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.traceback</name><path>src/_pytest/_code/code.py</path><content>@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.__repr__</name><path>src/_pytest/_code/code.py</path><content>def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.exconly</name><path>src/_pytest/_code/code.py</path><content>def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.errisinstance</name><path>src/_pytest/_code/code.py</path><content>def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo._getreprcrash</name><path>src/_pytest/_code/code.py</path><content>def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.getrepr</name><path>src/_pytest/_code/code.py</path><content>def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionInfo.match</name><path>src/_pytest/_code/code.py</path><content>def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo</name><path>src/_pytest/_code/code.py</path><content>@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.flow_marker</name><path>src/_pytest/_code/code.py</path><content>flow_marker = \">\"</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.fail_marker</name><path>src/_pytest/_code/code.py</path><content>fail_marker = \"E\"</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.showlocals</name><path>src/_pytest/_code/code.py</path><content>showlocals = attr.ib(default=False)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.style</name><path>src/_pytest/_code/code.py</path><content>style = attr.ib(default=\"long\")</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.abspath</name><path>src/_pytest/_code/code.py</path><content>abspath = attr.ib(default=True)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.tbfilter</name><path>src/_pytest/_code/code.py</path><content>tbfilter = attr.ib(default=True)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.funcargs</name><path>src/_pytest/_code/code.py</path><content>funcargs = attr.ib(default=False)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.truncate_locals</name><path>src/_pytest/_code/code.py</path><content>truncate_locals = attr.ib(default=True)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.chain</name><path>src/_pytest/_code/code.py</path><content>chain = attr.ib(default=True)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.astcache</name><path>src/_pytest/_code/code.py</path><content>astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo._getindent</name><path>src/_pytest/_code/code.py</path><content>def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo._getentrysource</name><path>src/_pytest/_code/code.py</path><content>def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.repr_args</name><path>src/_pytest/_code/code.py</path><content>def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.get_source</name><path>src/_pytest/_code/code.py</path><content>def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.get_exconly</name><path>src/_pytest/_code/code.py</path><content>def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.repr_locals</name><path>src/_pytest/_code/code.py</path><content>def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.repr_traceback_entry</name><path>src/_pytest/_code/code.py</path><content>def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo._makepath</name><path>src/_pytest/_code/code.py</path><content>def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.repr_traceback</name><path>src/_pytest/_code/code.py</path><content>def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo._truncate_recursive_traceback</name><path>src/_pytest/_code/code.py</path><content>def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.FormattedExcinfo.repr_excinfo</name><path>src/_pytest/_code/code.py</path><content>def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionChainRepr</name><path>src/_pytest/_code/code.py</path><content>class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionChainRepr.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ExceptionChainRepr.toterminal</name><path>src/_pytest/_code/code.py</path><content>def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprExceptionInfo</name><path>src/_pytest/_code/code.py</path><content>class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprExceptionInfo.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprExceptionInfo.toterminal</name><path>src/_pytest/_code/code.py</path><content>def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTraceback</name><path>src/_pytest/_code/code.py</path><content>class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTraceback.entrysep</name><path>src/_pytest/_code/code.py</path><content>entrysep = \"_ \"</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTraceback.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTraceback.toterminal</name><path>src/_pytest/_code/code.py</path><content>def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTracebackNative</name><path>src/_pytest/_code/code.py</path><content>class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest._code.ReprTracebackNative.__init__</name><path>src/_pytest/_code/code.py</path><content>def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.assertion.pytest_runtest_teardown</name><path>src/_pytest/runner.py</path><content>when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content>func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.capture.CaptureManager.pytest_runtest_teardown</name><path>src/_pytest/runner.py</path><content>d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.hookspec.pytest_runtest_teardown</name><path>src/_pytest/runner.py</path><content>ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.hookspec.pytest_runtest_makereport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.hookspec.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.junitxml.LogXML.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.logging.LoggingPlugin.pytest_runtest_teardown</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.logging.LoggingPlugin.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.main.Session.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.runner.pytest_runtest_teardown</name><path>src/_pytest/runner.py</path><content>def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.runner.call_and_report</name><path>src/_pytest/runner.py</path><content>def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.runner.check_interactive_exception</name><path>src/_pytest/runner.py</path><content>def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.runner.CallInfo.from_call</name><path>src/_pytest/runner.py</path><content>@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.runner.pytest_runtest_makereport</name><path>src/_pytest/runner.py</path><content>def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.skipping.pytest_runtest_makereport</name><path>src/_pytest/runner.py</path><content> item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n </content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content>\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.terminal.TerminalReporter.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content></content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.unittest.pytest_runtest_makereport</name><path>src/_pytest/runner.py</path><content>None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      </content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.resultlog.ResultLog.pytest_runtest_logreport</name><path>src/_pytest/runner.py</path><content>d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.nodes.Node._prunetraceback</name><path>src/_pytest/nodes.py</path><content>def _prunetraceback(self, excinfo):\n        pass</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.nodes.Node._repr_failure_py</name><path>src/_pytest/nodes.py</path><content>def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )</content></symbol>"
    },
    {
      "role": "user",
      "content": "<symbol><name>_pytest.nodes.Node.repr_failure</name><path>src/_pytest/nodes.py</path><content>def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)</content></symbol>"
    }
  ],
  "completion": {
    "id": "chatcmpl-9xSuMCuCqN4n8gI9RLLrxmbfUS6J5",
    "choices": [
      {
        "finish_reason": "stop",
        "index": 0,
        "logprobs": null,
        "message": {
          "content": "{\"scratch_pad\":\"## Analyzing the Issue and Expected Fixes:\\n\\n- Reported Issue: The current exception reporting functionality not showing the entire chain or context of exceptions consistently when run with xdist.\\n- Issue Source: xdist potentially changes the environment such that chained exceptions are not printed. The relevant functions could involve serialization or representation of exceptions.\\n- Expected Result: When using xdist, exception reports should show the entire chain of exceptions just like the single-process execution without xdist.\\n- Cause Analysis: The serialization or exception reporting might be losing information about the exception hierarchy or chain during its process.\\n- Fix Strategy: Ensure the process for chaining exceptions in the reports is consistent and includes all detailed steps from the chaining process.\\n\\n## Identification of Symbols Related to the Issue:\\n- \\\"_pytest.reports.BaseReport._to_json\\\" serializes the report dict which should include handling chains in the exception tracebacks spun.\\n- \\\"_pytest._code.ExceptionInfo.traceback\\\" tracks how exceptions link up and pass on during serialization.\\n- \\\"_pytest._code.ExceptionInfo.getrepr\\\" handles the representation of exceptions with chained options.\\n- Each symbol affects part of process flow from object instantiation/traceback capture to provides final display output affected multiple sections.\\n- Core requirement is ensuring full chain propagation without any losses.\",\"symbols\":[{\"name\":\"_pytest.reports.BaseReport._to_json\",\"file_path\":\"src/_pytest/reports.py\",\"reason\":\"The _to_json function returns serialized data, but may not fully capture exception chains when using xdist.\"},{\"name\":\"_pytest._code.ExceptionInfo.getrepr\",\"file_path\":\"src/_pytest/_code/code.py\",\"reason\":\"The getrepr method formats exception info, including tracebacks; it may lack complete handling of chained exceptions, especially in distributed environments.\"}],\"more_info\":[],\"is_done\":false,\"symbols_scratch_pad\":[\"Analyzing _pytest.reports.BaseReport._to_json:\\n- Seems primarily concerned with converting existing exception data into a serializable dict format.\\n- Key concern could be the representation handling of 'disassembled_report' if it doesn't cover chained exceptions properly.\\n- Assume needs modification to ensure \\\"reprtraceback\\\" and \\\"reprcrash\\\" deal with multiple linked exceptions in process.\",\"Analyzing _pytest._code.ExceptionInfo.getrepr:\\n- Responsible for returning a string representation of the exception.\\n- Should inherently support chained exceptions through the \\\"chain\\\" parameter, allowing chained exceptions to be included in the output.\\n- However, potential loss in serialization might hinder chaining records in process.\",\"Analyzing further ExceptionInfo instances and whether they appropriately manage the capture and relay of complete exception and chaining data internally.\"]}",
          "refusal": null,
          "role": "assistant",
          "function_call": null,
          "tool_calls": [],
          "parsed": {
            "scratch_pad": "## Analyzing the Issue and Expected Fixes:\n\n- Reported Issue: The current exception reporting functionality not showing the entire chain or context of exceptions consistently when run with xdist.\n- Issue Source: xdist potentially changes the environment such that chained exceptions are not printed. The relevant functions could involve serialization or representation of exceptions.\n- Expected Result: When using xdist, exception reports should show the entire chain of exceptions just like the single-process execution without xdist.\n- Cause Analysis: The serialization or exception reporting might be losing information about the exception hierarchy or chain during its process.\n- Fix Strategy: Ensure the process for chaining exceptions in the reports is consistent and includes all detailed steps from the chaining process.\n\n## Identification of Symbols Related to the Issue:\n- \"_pytest.reports.BaseReport._to_json\" serializes the report dict which should include handling chains in the exception tracebacks spun.\n- \"_pytest._code.ExceptionInfo.traceback\" tracks how exceptions link up and pass on during serialization.\n- \"_pytest._code.ExceptionInfo.getrepr\" handles the representation of exceptions with chained options.\n- Each symbol affects part of process flow from object instantiation/traceback capture to provides final display output affected multiple sections.\n- Core requirement is ensuring full chain propagation without any losses.",
            "symbols": [
              {
                "name": "_pytest.reports.BaseReport._to_json",
                "file_path": "src/_pytest/reports.py",
                "reason": "The _to_json function returns serialized data, but may not fully capture exception chains when using xdist."
              },
              {
                "name": "_pytest._code.ExceptionInfo.getrepr",
                "file_path": "src/_pytest/_code/code.py",
                "reason": "The getrepr method formats exception info, including tracebacks; it may lack complete handling of chained exceptions, especially in distributed environments."
              }
            ],
            "more_info": [],
            "is_done": false,
            "symbols_scratch_pad": [
              "Analyzing _pytest.reports.BaseReport._to_json:\n- Seems primarily concerned with converting existing exception data into a serializable dict format.\n- Key concern could be the representation handling of 'disassembled_report' if it doesn't cover chained exceptions properly.\n- Assume needs modification to ensure \"reprtraceback\" and \"reprcrash\" deal with multiple linked exceptions in process.",
              "Analyzing _pytest._code.ExceptionInfo.getrepr:\n- Responsible for returning a string representation of the exception.\n- Should inherently support chained exceptions through the \"chain\" parameter, allowing chained exceptions to be included in the output.\n- However, potential loss in serialization might hinder chaining records in process.",
              "Analyzing further ExceptionInfo instances and whether they appropriately manage the capture and relay of complete exception and chaining data internally."
            ]
          }
        }
      }
    ],
    "created": 1723959502,
    "model": "gpt-4o-2024-08-06",
    "object": "chat.completion",
    "service_tier": null,
    "system_fingerprint": "fp_2a322c9ffc",
    "usage": {
      "completion_tokens": 556,
      "prompt_tokens": 18884,
      "total_tokens": 19440
    }
  }
}