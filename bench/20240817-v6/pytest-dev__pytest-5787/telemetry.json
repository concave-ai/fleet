{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-5787",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-17T22:37:48.294759",
        "usage": "1603.1653881072998 ms"
      },
      "request": {
        "repo_tokens": [
          "suspend_fixture",
          "visit_Attribute",
          "Function",
          "_py_ext_re",
          "_seen",
          "filename_arg",
          "name2fixturedefs",
          "CollectErrorRepr",
          "resultlog",
          "get_unpacked_marks",
          "_locationline",
          "pytest_runtest_teardown",
          "_disable_output_capturing_for_darwin",
          "issequence",
          "_get_marks",
          "getini",
          "DOCTEST_REPORT_CHOICE_NONE",
          "isnosetest",
          "make_hook_recorder",
          "DEFAULT_LOG_FORMAT",
          "_addexcinfo",
          "node_reporter",
          "setns",
          "markname",
          "at_level",
          "notset",
          "astcache",
          "__all__",
          "warning_types",
          "_legal_ranges",
          "get_scope_package",
          "param",
          "BINOP_MAP",
          "getbasetemp",
          "Traceback",
          "post_mortem",
          "_compare_eq_verbose",
          "get_scope_node",
          "deactivate_fixture",
          "_get_active_fixturedef",
          "create_new_paste",
          "__getitem__",
          "fix_cache_order",
          "LogXML",
          "linecomp",
          "_format_boolop",
          "getfuncargnames",
          "pytest_make_parametrize_id",
          "str",
          "_ensure_basetemp",
          "add_report_section",
          "ReprLocals",
          "ihook",
          "approx",
          "Config",
          "iter_markers",
          "setupplan",
          "nodes",
          "tracebackcutdir",
          "set_log_path",
          "pytest_keyboard_interrupt",
          "cached_eval",
          "passed",
          "_warn_already_imported",
          "classnamefilter",
          "USAGE_MSG",
          "MarkEvaluator",
          "__repr__",
          "pytest_runtest_call",
          "getpluginversioninfo",
          "recursionindex",
          "_cachedir",
          "showversion",
          "nodeid",
          "_istrue",
          "collect_one_node",
          "typename",
          "capfdbinary",
          "start",
          "format",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "function",
          "putaround",
          "mangle_test_address",
          "getcalls",
          "pytest_exception_interact",
          "_fail_on_non_top_pytest_plugins",
          "own_mark_names",
          "pytest_addhooks",
          "freeze_support",
          "_update_current_test_var",
          "PrintHelp",
          "PYTEST_TAG",
          "repr_locals",
          "illegal_xml_re",
          "outcomes",
          "_tryconvertpyarg",
          "SysCapture",
          "pytest_runtest_logreport",
          "newinstance",
          "_call_assertion_pass",
          "getargs",
          "unique_path",
          "get_default_arg_names",
          "AssertionState",
          "makedir",
          "set_when",
          "PytestWarning",
          "FixtureFunctionMarker",
          "repr_failure",
          "makeini",
          "_ensure_unconfigure",
          "flow_marker",
          "Instance",
          "build_summary_stats_line",
          "__module__",
          "cache_dir_from_config",
          "FSHookProxy",
          "PytestUnknownMarkWarning",
          "stop_capturing",
          "_colorama_workaround",
          "resume_fixture",
          "get_lines_after",
          "extract_from",
          "tb",
          "LineMatcher_fixture",
          "__hash__",
          "pytest_collection_modifyitems",
          "spawn",
          "_assertion_supported",
          "_notin_text",
          "parts",
          "_getnextfixturedef",
          "getpathnode",
          "CallInfo",
          "Package",
          "find_spec",
          "pytest_itemcollected",
          "terminal",
          "pytest_collect_file",
          "OptionGroup",
          "addoption",
          "safe_text_dupfile",
          "scopename2class",
          "cleanup_numbered_dir",
          "pytest_collection_finish",
          "isinitpath",
          "Node",
          "consider_env",
          "STRING_TYPES",
          "get_open_files",
          "MarkMapping",
          "_typ_map",
          "from_item_and_call",
          "compile_",
          "prog",
          "_recurse",
          "PyobjContext",
          "runpython_c",
          "pytest_pyfunc_call",
          "_teardown_with_finalization",
          "_given_basetemp",
          "pytest_warning_captured",
          "_resolve_arg_ids",
          "FDCapture",
          "OK",
          "countoutcomes",
          "WarningsChecker",
          "nofuncargs",
          "_get_stderr_fileno",
          "_get_allow_bytes_flag",
          "close",
          "mode",
          "_get_fixturestack",
          "iter_markers_with_node",
          "with_args",
          "UsageError",
          "delenv",
          "runpytest_inprocess",
          "_argcomplete",
          "File",
          "fail_fixturefunc",
          "AssertionRewriter",
          "__next__",
          "_getglobals",
          "PytestAssertRewriteWarning",
          "check_xfail_no_run",
          "_readline_workaround",
          "initialnames",
          "runtest",
          "cut",
          "mark_rewrite",
          "pytest_sessionfinish",
          "ResultLog",
          "_getreprcrash",
          "DEFAULT_MAX_LINES",
          "_markers",
          "autouse",
          "istestclass",
          "genitems",
          "excinfo",
          "write_ensure_prefix",
          "_for_parametrize",
          "pytest_cmdline_preparse",
          "CaptureResult",
          "addfinalizer",
          "node",
          "append_error",
          "pytest_unconfigure",
          "mkdir",
          "_should_truncate_item",
          "logging",
          "_report_keyboardinterrupt",
          "_processopt",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "capstdout",
          "_issue_warning_captured",
          "resolve_fixture_function",
          "_make_xunit_fixture",
          "_warn_about_missing_assertion",
          "getmodpath",
          "_prunetraceback",
          "pytest_internalerror",
          "_update_message",
          "ischildnode",
          "_should_rewrite",
          "print_teardown_sections",
          "visit_Compare",
          "LsofFdLeakChecker",
          "fail_marker",
          "getgroup",
          "safe_getattr",
          "TEST_OUTCOME",
          "_validate_args",
          "parse",
          "_teardown_towards",
          "locals",
          "_matchnodes",
          "syspathinsert",
          "finish",
          "__bool__",
          "_check_scope",
          "_should_repr_global_name",
          "RESULT_LOG",
          "Testdir",
          "PdbInvoke",
          "makeconftest",
          "global_and_fixture_disabled",
          "pytest_assertrepr_compare",
          "args",
          "_config_for_test",
          "copy_example",
          "scope2props",
          "getfixturedefs",
          "warn",
          "writeorg",
          "_py36_windowsconsoleio_workaround",
          "setitem",
          "findsource",
          "pop_outerr_to_orig",
          "parametrize",
          "FuncFixtureInfo",
          "getimfunc",
          "parse_num",
          "_recursive_debug",
          "_compare_eq_cls",
          "MoreQuietAction",
          "_assert_start_repr",
          "traceback",
          "deselect_by_mark",
          "_suspend",
          "_inject_setup_module_fixture",
          "_yield_comparisons",
          "processoption",
          "_main",
          "Source",
          "_getscopeitem",
          "_parse_lsof_output",
          "addError",
          "call_fixture_func",
          "compile",
          "scope2index",
          "emit",
          "_excinfo",
          "matching_platform",
          "_collectfile",
          "_config",
          "repr_instance",
          "path_matches_patterns",
          "_ellipsize",
          "_get_report_choice",
          "_inject_setup_function_fixture",
          "matchreport",
          "doctest",
          "DoctestTextfile",
          "teardown_exact",
          "FixtureLookupErrorRepr",
          "getstatement",
          "get_public_names",
          "set_location",
          "pytest_plugin_registered",
          "python",
          "_compute_fixture_value",
          "_getobj",
          "num_mock_patch_args",
          "PercentStyleMultiline",
          "_check_all_skipped",
          "_ensure_only_one_capture_fixture",
          "_start",
          "runitem",
          "records",
          "call_runtest_hook",
          "disabled",
          "_postmortem_traceback",
          "helpconfig",
          "default_plugins",
          "ReprFileLocation",
          "USAGE_ERROR",
          "find_suffixes",
          "_setoption",
          "clear",
          "_non_numeric_type_error",
          "_get_checker",
          "getcrashentry",
          "REGEX_TYPE",
          "re_match_lines_random",
          "_format_repr_exception",
          "setattr",
          "add_attribute",
          "get_closest_marker",
          "pytest_runtest_setup",
          "eval",
          "finish_recording",
          "DontReadFromInput",
          "report_collect",
          "is_potential_nosetest",
          "getfixturevalue",
          "_find_parametrized_scope",
          "isatty",
          "ReprEntry",
          "_compilecounter",
          "_is_setup_py",
          "pytest_fixture_setup",
          "assertion",
          "pytest_fixture_post_finalizer",
          "count_towards_summary",
          "rm_rf",
          "_callfinalizers",
          "for_config",
          "_early_rewrite_bailout",
          "pytest_load_initial_conftests",
          "_init_runner_class",
          "get_records",
          "buffer",
          "Skipped",
          "Frame",
          "_running_on_ci",
          "call_optional",
          "isdict",
          "_genfunctions",
          "context",
          "_legal_chars",
          "head_line",
          "WarningsRecorder",
          "combined_with",
          "append_collect_skipped",
          "strip",
          "reports",
          "_makeitem",
          "MarkGenerator",
          "wrap_session",
          "pytest_runtest_protocol",
          "gethookproxy",
          "deprecated",
          "testdir",
          "pytest_terminal_summary",
          "result",
          "EMPTY_PARAMETERSET_OPTION",
          "names_closure",
          "gethookrecorder",
          "fromdictargs",
          "isattrs",
          "pytest_report_header",
          "pytest_runtestloop",
          "rewrite_asserts",
          "README_CONTENT",
          "builtin",
          "is_rewrite_disabled",
          "finalize",
          "pytest_sessionstart",
          "_assert_expr_to_lineno",
          "id",
          "RE_IMPORT_ERROR_NAME",
          "_ensure_removed_sysmodule",
          "yield_fixture",
          "capsys",
          "parseconfig",
          "LEVELNAME_FMT_REGEX",
          "addSkip",
          "_inject_setup_teardown_fixtures",
          "getfailedcollections",
          "_version",
          "prepare",
          "_getpytestargs",
          "_log_text",
          "TracebackEntry",
          "get_direct_param_fixture_func",
          "CaptureManager",
          "saferepr",
          "parsefactories",
          "get_sections",
          "_log",
          "get_statement_startend2",
          "getoption",
          "getparam",
          "idmaker",
          "makepyfile",
          "spawn_pytest",
          "location",
          "pytestPDB",
          "_PLUGGY_DIR",
          "NoMatch",
          "getreports",
          "short_test_summary",
          "_ensure_immutable_ids",
          "cached_result",
          "pytest_leave_pdb",
          "set",
          "add_property",
          "ids",
          "warn_about_none_ast",
          "truncate_if_required",
          "fslocation",
          "version_tuple",
          "_log_cli_enabled",
          "_get_verbose_word",
          "_done",
          "inline_runsource",
          "maybe_delete_a_numbered_dir",
          "_parse_parametrize_parameters",
          "record_testsuite_property",
          "_get_progress_information_message",
          "getsource",
          "conftest_options",
          "fullsource",
          "python_api",
          "_trace",
          "_init_pdb",
          "rex_outcome",
          "addFailure",
          "reportinfo",
          "fixture",
          "_get_pos",
          "try_mkdir",
          "_NodeReporter",
          "patchsysdict",
          "DEPRECATED_EXTERNAL_PLUGINS",
          "SysPathsSnapshot",
          "CFG_PYTEST_SECTION",
          "activate_fixture",
          "_fillfixtures",
          "_code",
          "getstatementrange_ast",
          "_testcase",
          "HookRecorder",
          "getitem",
          "_width_of_current_line",
          "getfslineno",
          "filter_traceback",
          "__missing__",
          "to_xml",
          "teardown_nose",
          "_get_global_properties_node",
          "suspend",
          "parseoutcomes",
          "_makepath",
          "getlocation",
          "_is_marked_for_rewrite",
          "_write_report_lines_from_hooks",
          "_sys_snapshot",
          "Failed",
          "item_capture",
          "_idval",
          "_pytest",
          "determine_setup",
          "_getentrysource",
          "format_explanation",
          "reorder_items",
          "suspend_capturing",
          "_pop_and_teardown",
          "catch_warnings_for_item",
          "pytest_assertion_pass",
          "wasvalid",
          "_perform_collect",
          "add_stats",
          "getcall",
          "getstatementrange",
          "_addoption_instance",
          "_set_opt_strings",
          "_saved",
          "showheader",
          "builtin_plugins",
          "__array_ufunc__",
          "_truncate_by_char_count",
          "ParameterSet",
          "_import_plugin_specs",
          "FixtureManager",
          "tmpdir",
          "__version__",
          "_E",
          "params",
          "TestReport",
          "Parser",
          "TerminalRepr",
          "chain",
          "catching_logs",
          "xfail",
          "addini",
          "getparent",
          "last_failed_paths",
          "frame",
          "ensure_reset_dir",
          "matchnodes",
          "CACHEDIR_TAG_CONTENT",
          "iscoroutinefunction",
          "indent",
          "_folded_skips",
          "DOCTEST_REPORT_CHOICES",
          "listchain",
          "write_sep",
          "getslaveinfoline",
          "FastFilesCompleter",
          "source",
          "_validate_if_using_arg_names",
          "raises",
          "reorder_items_atscope",
          "Metafunc",
          "main",
          "TYPE_CHECKING",
          "_find_spec",
          "resume_global_capture",
          "_report_unserialization_failure",
          "append",
          "chdir",
          "statement",
          "parseconfigure",
          "fixturenames",
          "_runtest_for_main",
          "_is_doctest",
          "Class",
          "type",
          "warning_record_to_str",
          "OutcomeException",
          "message",
          "reset",
          "summary_warnings",
          "format_session_duration",
          "_iter_rewritable_modules",
          "readlines",
          "helper",
          "INTERRUPTED",
          "_resolve_arg_value_types",
          "mktemp",
          "FSCollector",
          "getvalueorskip",
          "_wrapped_pdb_cls",
          "Cache",
          "delitem",
          "explanation_param",
          "get_lock_path",
          "summary_passes",
          "tmp_path_factory",
          "_initrequest",
          "_get_plugin_specs_as_list",
          "_non_printable_ascii_translate_table",
          "NodeMarkers",
          "inline_genitems",
          "_format_args",
          "NFPlugin",
          "failed",
          "getinicfg",
          "CwdSnapshot",
          "UnformattedWarning",
          "import_plugin",
          "__ne__",
          "FDCaptureBinary",
          "makefile",
          "_getconftestmodules",
          "LFPlugin",
          "_approx_scalar",
          "ApproxNumpy",
          "_getini",
          "_mark_plugins_for_rewrite",
          "hookspec",
          "PYC_TAIL",
          "_bytes_to_ascii",
          "tmp_path",
          "FixtureRequest",
          "capstderr",
          "relline",
          "cls",
          "PYC_EXT",
          "parse_known_args",
          "from_config",
          "CollectError",
          "DEFAULT_LOG_DATE_FORMAT",
          "normalize_mark_list",
          "getfailures",
          "make_numbered_dir",
          "pytest_collectreport",
          "errors",
          "addExpectedFailure",
          "essential_plugins",
          "add_global_property",
          "_match_lines",
          "_remove_ansi_escape_sequences",
          "LogCaptureHandler",
          "_try_load_conftest",
          "_get_override_ini_value",
          "_is_numpy_array",
          "_inject_setup_class_fixture",
          "isset",
          "_is_capturing",
          "Module",
          "exconly",
          "_format_assertmsg",
          "names",
          "repr_excinfo",
          "_idvalset",
          "find",
          "PytestArg",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "register_cleanup_lock_removal",
          "__take_sys_modules_snapshot",
          "collect",
          "importorskip",
          "ExitCode",
          "NoCapture",
          "visit_Assert",
          "PytestUnhandledCoroutineWarning",
          "LogCaptureFixture",
          "get_exconly",
          "HelpAction",
          "repr",
          "_addoption",
          "_format_action_invocation",
          "addSuccess",
          "restore",
          "_rewrite_test",
          "parse_setoption",
          "pyobj_property",
          "_test_pytest_function",
          "compat",
          "ishidden",
          "find_prefixed",
          "create_module",
          "_setup_cli_logging",
          "SafeRepr",
          "run",
          "MarkDecorator",
          "SetupState",
          "try_cleanup",
          "pytester",
          "add_marker",
          "register_assert_rewrite",
          "_truncate_recursive_traceback",
          "consider_conftest",
          "_handle_skip",
          "_ALLOW_MARKERS",
          "stop",
          "_getindent",
          "showfixtures",
          "_get_direct_parametrize_args",
          "getplugin",
          "funcargs",
          "Exit",
          "read",
          "template",
          "summary_stats",
          "_assertion_pass",
          "addsection",
          "RUNNER_CLASS",
          "messages",
          "_recursive_list_map",
          "_prepareconfig",
          "_get_flag_lookup",
          "repr_traceback_entry",
          "add_cleanup",
          "_ascii_escaped_by_config",
          "FUNCARGNAMES",
          "showlocals",
          "_printcollecteditems",
          "LineMatcher",
          "stop_global_capturing",
          "scopeproperty",
          "pytest_runtest_logfinish",
          "collect_by_name",
          "PytestConfigWarning",
          "_truncate_explanation",
          "PYTESTER_COPY_EXAMPLE",
          "NO_TESTS_COLLECTED",
          "encoding",
          "ensure_newline",
          "exec_module",
          "COLLECT_FAKEMODULE_ATTRIBUTES",
          "__init__",
          "pytest_cmdline_main",
          "start_global_capturing",
          "ApproxBase",
          "fillfixtures",
          "ColoredLevelFormatter",
          "exit",
          "read_global_capture",
          "co_equal",
          "_importconftest",
          "_compare_eq_set",
          "_tmppath_factory",
          "teardown",
          "warnings",
          "showlongtestinfo",
          "_validate_usepdb_cls",
          "_getfailureheadline",
          "_read_pyc",
          "value",
          "getexplanation",
          "set_trace",
          "write",
          "handler",
          "PyCollector",
          "_show_fixture_action",
          "PyobjMixin",
          "_compare_eq_sequence",
          "repr_args",
          "_ANSI_ESCAPE_SEQ",
          "check_interactive_exception",
          "own_markers",
          "DEFAULT_RELATIVE_TOLERANCE",
          "pytest_cmdline_parse",
          "get_dirs_from_args",
          "_get_allow_unicode_flag",
          "ApproxSequencelike",
          "_node_location_to_relpath",
          "_diff_text",
          "assert_contains",
          "cmdline",
          "istext",
          "_from_json",
          "SubRequest",
          "get_parametrized_fixture_keys",
          "hookimpl",
          "BaseReport",
          "ExceptionRepr",
          "getnode",
          "matchmark",
          "install_importhook",
          "__exit__",
          "pytest_deselected",
          "_split_explanation",
          "fnmatch_lines_random",
          "_consider_importhook",
          "MultipleDoctestFailures",
          "__version_tuple__",
          "runtestprotocol",
          "caplog",
          "pytest_itemstart",
          "Mark",
          "assert_outcomes",
          "ConftestImportFailure",
          "argnames",
          "get_real_func",
          "check_strict_xfail",
          "_dump_lines",
          "show_fixtures_per_test",
          "done",
          "ApproxDecimal",
          "pytest_collect_directory",
          "_repr_failure_py",
          "from_current",
          "_setup_fixtures",
          "path",
          "verbosity",
          "errisinstance",
          "get_empty_parameterset_mark",
          "deprecated_call",
          "istestfunction",
          "_matches_prefix_or_glob_option",
          "pytest_report_teststatus",
          "RunResult",
          "listextrakeywords",
          "isparseable",
          "_checkversion",
          "_resume",
          "for_later",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "consider_module",
          "fixtures",
          "write_line",
          "from_item",
          "_get_runner",
          "matchkeyword",
          "_get_pdb_wrapper_class",
          "when",
          "tbfilter",
          "CaptureFixture",
          "consider_pluginarg",
          "getcfg",
          "_get_continue_on_failure",
          "invocation_dir",
          "is_generator",
          "append_skipped",
          "delattr",
          "getitems",
          "funcargnames",
          "_translate_non_printable",
          "scopemismatch",
          "_splitnode",
          "invalidraise",
          "funcnamefilter",
          "syspath_prepend",
          "EMPTY_BUFFER",
          "_reprcompare",
          "MODULE_NOT_FOUND_ERROR",
          "readline",
          "repr_traceback",
          "exists",
          "pytest_pycollect_makemodule",
          "raiseerror",
          "_add_simple",
          "__test__",
          "defaultfuncargprefixmarker",
          "visit_Name",
          "pytest_report_from_serializable",
          "truncate_locals",
          "nextitem",
          "update_testcase_duration",
          "notify_exception",
          "_strtobool",
          "formatrepr",
          "_compare_eq_dict",
          "get_actual_log_level",
          "pytest_collectstart",
          "setuponly",
          "Item",
          "_striptext",
          "_PY_DIR",
          "from_exc_info",
          "is_globally_capturing",
          "_visit_filter",
          "ReprFailDoctest",
          "tmpdir_factory",
          "_warn_incompatibility_with_xunit2",
          "_getautousenames",
          "StepwisePlugin",
          "dir",
          "freeze_includes",
          "kwargs",
          "CollectReport",
          "listnames",
          "_result",
          "pytest_enter_pdb",
          "_pyfuncitem",
          "name",
          "junitxml",
          "getrawcode",
          "_teardown_yield_fixture",
          "fill_unfilled",
          "rewrite",
          "MyOptionParser",
          "_LiveLoggingStreamHandler",
          "list",
          "applymarker",
          "_mk_tmp",
          "FunctionMixin",
          "version",
          "_factorytraceback",
          "UnitTestCase",
          "create_terminal_writer",
          "fnmatch_lines",
          "hasplugin",
          "scope",
          "SEP",
          "_get_number_flag",
          "re_match_lines",
          "runner",
          "_basetemp",
          "append_collect_error",
          "is_capturing",
          "LOCK_TIMEOUT",
          "tolerance",
          "assign",
          "style",
          "_do_configure",
          "showhelp",
          "_create_formatter",
          "_getcrashline",
          "snap",
          "TempdirFactory",
          "PytestCollectionWarning",
          "__nonzero__",
          "skip",
          "_check_if_assertion_pass_impl",
          "_preparse",
          "make_properties_node",
          "hasnew",
          "istrue",
          "get",
          "resume_capturing",
          "__delitem__",
          "entrysep",
          "section",
          "get_fslocation_from_item",
          "alias",
          "_match_lines_random",
          "ReprTraceback",
          "deindent",
          "inline_run",
          "bin_xml_escape",
          "_schedule_finalizers",
          "_bestrelpath_cache",
          "is_true",
          "hasopt",
          "UNARY_MAP",
          "make_numbered_dir_with_cleanup",
          "pytest_collection",
          "EncodedFile",
          "MARK_GEN",
          "unittest",
          "Argument",
          "hasinit",
          "getfixtureinfo",
          "FormattedExcinfo",
          "get_terminal_writer",
          "maketxtfile",
          "resolve",
          "out",
          "on_rm_rf_error",
          "capture_fixtures",
          "addinivalue_line",
          "TestCaseFunction",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "_write_progress_information_filling_space",
          "ReprTracebackNative",
          "_saferepr",
          "PytestDeprecationWarning",
          "BASE_TYPE",
          "_getparser",
          "_PytestWrapper",
          "_showfixtures_main",
          "PdbTrace",
          "pop",
          "set_session",
          "get_option_ini",
          "scopenum_function",
          "_get_assertion_exprs",
          "_opentestcase",
          "line",
          "_call_reprcompare",
          "register",
          "recwarn",
          "AssertionRewritingHook",
          "istestfunc",
          "popcall",
          "_ensure_supporting_files",
          "getdecoded",
          "_getlines",
          "FuncargnamesCompatAttr",
          "visit_Call",
          "mark",
          "DummyRewriteHook",
          "pytest_report_to_serializable",
          "show_test_item",
          "execute",
          "INTERNAL_ERROR",
          "_check_type",
          "write_fspath_result",
          "REPORT_COLLECTING_RESOLUTION",
          "rex_session_duration",
          "capture",
          "_force_symlink",
          "undo",
          "config",
          "_exec_lsof",
          "mkpydir",
          "ReprExceptionInfo",
          "get_location",
          "__eq__",
          "_to_json",
          "push_format_context",
          "suspend_global_capture",
          "obj",
          "IGNORE_PAM",
          "ensure_deletable",
          "ExceptionInfo",
          "stopTest",
          "_matchfactories",
          "get_source",
          "popen",
          "Notset",
          "fail",
          "debugging",
          "TempPathFactory",
          "_determine_show_progress_info",
          "capfd",
          "_repr_style",
          "_get_increasing_order",
          "families",
          "_traceback",
          "record_property",
          "getmodulecol",
          "_check_initialpaths_for_relpath",
          "visit_BinOp",
          "_write_pyc",
          "safe_isclass",
          "__len__",
          "append_pass",
          "SysCaptureBinary",
          "attrs",
          "_pluginmanager",
          "getrepr",
          "runpytest",
          "setenv",
          "pytest_make_collect_report",
          "__setitem__",
          "__enter__",
          "set_level",
          "_patch_unwrap_mock_aware",
          "ReprEntryNative",
          "record_tuples",
          "store_mark",
          "_runtest_for",
          "_format_lines",
          "_check_record_param_type",
          "filter",
          "NOTSET",
          "addUnexpectedSuccess",
          "Interrupted",
          "__iter__",
          "cleanup_candidates",
          "TESTS_FAILED",
          "LoggingPlugin",
          "write_docstring",
          "isiterable",
          "_in_venv",
          "visit_UnaryOp",
          "PytestPluginManager",
          "ParsedCall",
          "python_keywords_allowed_list",
          "startTest",
          "visit_Starred",
          "MultiCapture",
          "ReprFuncArgs",
          "pytestconfig",
          "InvocationParams",
          "ascii_escaped",
          "merge_family",
          "__str__",
          "set_repr_style",
          "append_failure",
          "LineComp",
          "readouterr",
          "parse_hookspec_opts",
          "get_data",
          "pytest_configure",
          "_import_pdb_cls",
          "pytest_runtest_makereport",
          "display",
          "getfirstlinesource",
          "parse_args",
          "monkeypatch",
          "DEFAULT_MAX_CHARS",
          "assertoutcome",
          "_is_mocked",
          "fileno",
          "_legal_xml_re",
          "_checkargnotcontained",
          "parse_hookimpl_opts",
          "start_capturing",
          "_getconftest_pathlist",
          "_rget_with_confmod",
          "pytest_generate_tests",
          "update",
          "NodeKeywords",
          "create_cleanup_lock",
          "summary_errors",
          "plugins",
          "variable",
          "_outrep_summary",
          "_enter_pdb",
          "pytest_report_collectionfinish",
          "fspath",
          "FILE_OR_DIR",
          "_importtestmodule",
          "consider_preparse",
          "FixtureDef",
          "TerminalReporter",
          "_plugin_nameversions",
          "longreprtext",
          "FunctionDefinition",
          "PseudoFixtureDef",
          "capsysbinary",
          "pastebin",
          "runpython",
          "_iter_all_modules",
          "DoctestItem",
          "writelines",
          "_finalize",
          "getvalue",
          "resume",
          "ArgumentError",
          "getfixturemarker",
          "_call_with_optional_argument",
          "parse_known_and_unknown_args",
          "CaptureIO",
          "exec_",
          "KeywordMapping",
          "Entry",
          "record_testreport",
          "fnmatch_ex",
          "cwd_relative_nodeid",
          "extract_suffixes",
          "TimeoutExpired",
          "MonkeyPatch",
          "match",
          "_set_initial_conftests",
          "setmulti2",
          "_collect",
          "_io",
          "cacheprovider",
          "from_call",
          "write_captured_output",
          "get_common_ancestor",
          "PytestCacheWarning",
          "get_user",
          "record_xml_attribute",
          "pop_format_context",
          "CLOSE_STDIN",
          "error",
          "pathlib",
          "skipped",
          "_addfinalizer",
          "ExceptionChainRepr",
          "directory_arg",
          "runpytest_subprocess",
          "CallSpec2",
          "log_outcome",
          "pytest_addoption",
          "safeformat",
          "nose",
          "copy",
          "_parsearg",
          "pytest_ignore_collect",
          "Session",
          "pytest_pycollect_makeitem",
          "prune_dependency_tree",
          "cache",
          "Code",
          "Junit",
          "session",
          "check_testcase_implements_trial_reporter",
          "module",
          "assert_contains_lines",
          "generic_visit",
          "derive_importpath",
          "perform_collect",
          "setup",
          "annotated_getattr",
          "get_plugin_manager",
          "ApproxMapping",
          "_PYTEST_DIR",
          "__array_priority__",
          "wrap_function_to_error_out_if_called_directly",
          "get_config",
          "_setup_collect_fakemodule",
          "__call__",
          "instance",
          "get_optionflags",
          "pytest_doctest_prepare_content",
          "visit_BoolOp",
          "simple",
          "getfixtureclosure",
          "skipping",
          "getreportopt",
          "_getcapture",
          "write_log_entry",
          "Collector",
          "add_funcarg_pseudo_fixture_def",
          "_state",
          "isdatacls",
          "doctest_namespace",
          "ApproxScalar",
          "cacheshow",
          "_get_line_with_reprcrash_message",
          "resolve_from_str",
          "WarningReport",
          "summary_failures",
          "__getattr__",
          "call_and_report",
          "showfspath",
          "_install_capture_fixture_on_item",
          "abspath",
          "RaisesContext",
          "_initini",
          "stepwise",
          "_makefile",
          "toterminal",
          "_getvaluepath",
          "warns",
          "SysModulesSnapshot",
          "teardown_all",
          "get_real_method",
          "faulthandler",
          "DropShorterLongHelpFormatter",
          "LOGLEVEL_COLOROPTS",
          "_parse_parametrize_args",
          "listoutcomes",
          "exprinfo",
          "text",
          "DoctestModule",
          "XFailed",
          "category",
          "_inject_setup_method_fixture",
          "PytestExperimentalApiWarning",
          "FixtureLookupError",
          "pytest_runtest_logstart",
          "keywords",
          "assertrepr_compare",
          "scopes",
          "deselect_by_keyword",
          "_get_first_non_fixture_func",
          "_compare_eq_iterable",
          "_show_fixtures_per_test"
        ]
      },
      "response": {
        "keywords": [
          "pytest_exception_interact",
          "Traceback",
          "ExceptionChainRepr",
          "excinfo",
          "ExceptionRepr",
          "AssertionRewritingHook",
          "ReprExceptionInfo",
          "pytest_runtest_protocol",
          "pytest_runtest_makereport"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-17T22:37:49.897939",
        "usage": "171.01788520812988 ms"
      },
      "request": {
        "tokens": [
          "pytest_exception_interact",
          "Traceback",
          "ExceptionChainRepr",
          "excinfo",
          "ExceptionRepr",
          "AssertionRewritingHook",
          "ReprExceptionInfo",
          "pytest_runtest_protocol",
          "pytest_runtest_makereport"
        ]
      },
      "response": {
        "results": {
          "excinfo": [
            "src/_pytest/nodes.py",
            "src/_pytest/runner.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/skipping.py",
            "src/_pytest/python.py",
            "src/_pytest/reports.py",
            "src/_pytest/terminal.py",
            "src/_pytest/debugging.py",
            "src/_pytest/main.py",
            "src/_pytest/unittest.py",
            "src/_pytest/capture.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/pytester.py",
            "src/_pytest/python_api.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/doctest.py"
          ],
          "pytest_runtest_makereport": [
            "src/_pytest/unittest.py",
            "src/_pytest/runner.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/skipping.py"
          ],
          "pytest_runtest_protocol": [
            "src/_pytest/runner.py",
            "src/_pytest/main.py",
            "src/_pytest/unittest.py",
            "src/_pytest/warnings.py",
            "src/_pytest/capture.py",
            "src/_pytest/pytester.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/faulthandler.py"
          ],
          "AssertionRewritingHook": [
            "src/_pytest/assertion/__init__.py",
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/python.py"
          ],
          "Traceback": [
            "src/_pytest/nodes.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/_code/__init__.py",
            "src/_pytest/python.py",
            "src/_pytest/recwarn.py"
          ],
          "pytest_exception_interact": [
            "src/_pytest/runner.py",
            "src/_pytest/debugging.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/faulthandler.py"
          ],
          "ReprExceptionInfo": [
            "src/_pytest/reports.py",
            "src/_pytest/_code/code.py"
          ],
          "ExceptionChainRepr": [
            "src/_pytest/_code/code.py"
          ],
          "ExceptionRepr": [
            "src/_pytest/_code/code.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-17T22:37:50.068966",
        "usage": "5114.861011505127 ms"
      },
      "request": {
        "keyword_search_results": {
          "excinfo": [
            "src/_pytest/nodes.py",
            "src/_pytest/runner.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/skipping.py",
            "src/_pytest/python.py",
            "src/_pytest/reports.py",
            "src/_pytest/terminal.py",
            "src/_pytest/debugging.py",
            "src/_pytest/main.py",
            "src/_pytest/unittest.py",
            "src/_pytest/capture.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/pytester.py",
            "src/_pytest/python_api.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/doctest.py"
          ],
          "pytest_runtest_makereport": [
            "src/_pytest/unittest.py",
            "src/_pytest/runner.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/skipping.py"
          ],
          "pytest_runtest_protocol": [
            "src/_pytest/runner.py",
            "src/_pytest/main.py",
            "src/_pytest/unittest.py",
            "src/_pytest/warnings.py",
            "src/_pytest/capture.py",
            "src/_pytest/pytester.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/faulthandler.py"
          ],
          "AssertionRewritingHook": [
            "src/_pytest/assertion/__init__.py",
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/python.py"
          ],
          "Traceback": [
            "src/_pytest/nodes.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/_code/__init__.py",
            "src/_pytest/python.py",
            "src/_pytest/recwarn.py"
          ],
          "pytest_exception_interact": [
            "src/_pytest/runner.py",
            "src/_pytest/debugging.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/faulthandler.py"
          ],
          "ReprExceptionInfo": [
            "src/_pytest/reports.py",
            "src/_pytest/_code/code.py"
          ],
          "ExceptionChainRepr": [
            "src/_pytest/_code/code.py"
          ],
          "ExceptionRepr": [
            "src/_pytest/_code/code.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is about exception serialization with chained exceptions when using pytest-xdist. The problem is that xdist isn't displaying the full exception trace.\n\nTo resolve this, we need to identify files responsible for exception handling, exception trace creation, and pytest-xdist integration.\n\nLet's break down the search results by relevance:\n\n1. **ExceptionChainRepr** and **ExceptionRepr**:\n   - Files like `src/_pytest/_code/code.py` appear highly relevant as they include terms like 'ExceptionChainRepr' and 'ExceptionRepr', indicating responsibility for how exceptions, particularly chained ones, are represented.\n   - Chained Exception representation is critical in solving this issue as the reported problem is about missing chained exceptions with xdist.\n\n2. **ReprExceptionInfo**:\n   - Also in `src/_pytest/_code/code.py` and `src/_pytest/reports.py`, handles representation of exception information, likely a lower level or related to `ExceptionRepr`.\n\n3. **Traceback**:\n   - Relevant because displaying exceptions often involves traceback objects. Found in `src/_pytest/_code/code.py` and `src/_pytest/nodes.py`. Important for investigating how traceback generation might differ when using xdist.\n\n4. **pytest_exception_interact**:\n   - In `src/_pytest/runner.py`, involved in managing exception interactions during test runs, possibly influencing how exceptions are formatted or recorded.\n\n5. **pytest_runtest_makereport**:\n   - Another potential hook or function affecting test report generation, located in `src/_pytest/runner.py`.\n\nSelecting these files helps us focus on areas most likely influencing exception serialization and representation, especially concerning chained exceptions in parallel execution contexts like xdist.",
        "file_paths": [
          "src/_pytest/_code/code.py",
          "src/_pytest/reports.py",
          "src/_pytest/runner.py",
          "src/_pytest/nodes.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-17T22:37:55.183861",
        "usage": "5893.33701133728 ms"
      },
      "request": {
        "file_path": "src/_pytest/_code/code.py"
      },
      "response": {
        "scratch_pad": "1. Analyze User Instructions:\n   1.1 The issue is related to exception serialization which includes chained exceptions when running tests with `pytest-xdist`. The exceptions are not fully shown when xdist is used, only the outermost exception is visible.\n   1.2 The user provides two test cases with `try` and `raise` statements that demonstrate this issue. The issue arises when `pytest-xdist` is used with `-n auto`, which typically runs tests in parallel.\n   1.3 Running the tests with `xdist` changes how exceptions are serialized, potentially due to limitations in how exceptions' state (especially chains) are shared across processes.\n   1.4 The user expects the complete traceback for chained exceptions, similar to when `xdist` is not used. \n   1.5 The absence of complete chaining in traceback indicates an incomplete serialization of exceptions in the `pytest-xdist` setup.\n   1.6 Solutions might involve enhancing exception serialization/deserialization in `pytest-xdist` or modifying how tracebacks are captured and reported within `_pytest` or `pytest-xdist`.\n\n2. Make file evaluation:\n   2.1 The file content gives insight into how traceback and exception information are handled within `_pytest._code.code.py`.\n   2.2 The `ExceptionInfo`, `Traceback`, and `FormattedExcinfo` classes along with the method `repr_excinfo` are crucial as they are directly involved in processing exception information.\n   2.3 The `repr_excinfo` method appears to manage exception representation, including the chaining (by checking `chain: bool = True`), which aligns with the user's issue.",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "xdist/remote.py",
          "xdist/worker.py",
          "src/_pytest/nodes.py"
        ],
        "relevant_symbols": [
          "ExceptionInfo",
          "ExceptionInfo.repr_excinfo",
          "Traceback",
          "FormattedExcinfo",
          "ExceptionChainRepr"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-17T22:38:01.077219",
        "usage": "8847.894191741943 ms"
      },
      "request": {
        "file_path": "src/_pytest/reports.py"
      },
      "response": {
        "scratch_pad": "1. **Analyze User Instructions:**\n\n1.1 **What issue is the user describing?**\n   The user describes an issue with how exception chaining is displayed in test reports when running tests in parallel using pytest-xdist versus running them locally. Locally, the entire chained exception traceback is shown, but with xdist, only the last exception is displayed.\n\n1.2 **Does the user give reproduction steps?**\n   Yes, the user provides two test cases to simulate chained exceptions and highlights the differing output when run with and without xdist.\n\n1.3 **How was this issue caused?**\n   Unsure from the user's description alone, but it seems likely that in parallel execution, the serialization or reporting of exceptions is missing parts of the chain.\n\n1.4 **Summarize the user expectation and why it causes the issue:**\n   User expects the full chain of exceptions to be displayed regardless of whether tests are run with xdist or not. The issue likely arises from limitations or bugs in the serialization or handling of exceptions in reports when using xdist.\n\n1.6 **Possible solutions:**\n   - Ensure that when exceptions are serialized or transformed into report form, each linked exception in the chain is preserved.\n   - Check if xdist has any known issues with exception serialization and contribute a fix if not already addressed.\n\n2. **Make file evaluation:**\n\n2.1 **Thoroughly analyze each line in <file_content>:**\n\n- **getslaveinfoline()**: Unrelated, handles node information formatting.\n- **BaseReport**: Class handling the base functionality for test reporting.\n  - **toterminal()**: Handles printing, might be tangentially related but not directly in serialization.\n  - **_to_json()**: This method serializes the report, key suspect in issue.\n  - **_from_json()**: Deserializes report, less likely the issue as problem pertains to loss during serialization.\n  \n2.2 **Match the symbol with the key elements:**\n   - \n2.3 **Evaluate relevance of symbols:**\n   - The `_to_json()` method in `BaseReport` is highly relevant to the issue as it likely deals with how reports are serialized when running tests in parallel, affecting exception chaining.\n\n2.4 **Review entire sections of code for understanding:**\n   - _(Examined implementation of serialization in `_to_json()` to see how exception info is converted into serializable formats.)_\n\n2.5 **Verify references to other parts of codebase:**\n   - If `_to_json()` calls or uses other methods that deal with full exception details, they must be checked as well.\n\n2.6 **Determine if the file is the root cause:**\n   - The file likely contains the root cause of the issue, specifically `_to_json()` in `BaseReport` might not handle chained exceptions properly in a serialized form.\n\nGiven the analysis, `_to_json()` method in `BaseReport` seems directly responsible for not maintaining the chain of exceptions when tests are reported on by xdist.",
        "relevant": true,
        "root_cause": true,
        "relevant_files": [],
        "relevant_symbols": [
          "BaseReport._to_json"
        ],
        "root_cause_symbols": [
          "BaseReport._to_json"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-17T22:38:09.925156",
        "usage": "6751.907825469971 ms"
      },
      "request": {
        "file_path": "src/_pytest/runner.py"
      },
      "response": {
        "scratch_pad": "1. **Analyze User Instructions**:\n- The issue relates to exception serialization in test reports when using pytest with xdist.\n- User reports an issue with chained exceptions not being fully displayed when using pytest-xdist for parallel test execution (`-n auto`), compared to running the tests without xdist.\n- This behavior occurs due to the exception handling or reporting mechanisms used with pytest-xdist, which may not showcase the interim exceptions correctly.\n\n2. **How was this issue caused?**\n- The chained exceptions are not captured vis-\u00e0-vis source exceptions and direct causes due to how exceptions are serialized or reported across distributed nodes with xdist.\n\n3. **User expectations and potential cause:**\n- Expectation is to have complete exception traces (including chained cause) displayed, even when running tests in parallel.\n\n4. **Possible solutions:**\n- Ensure that the exception handling and reporting parts of pytest runner capture and serialize chained exceptions, ensuring they remain intact even in distributed contexts (xdist).\n\n\n5. **Make file evaluation**:\n- The `runner.py` file handles many aspects related to test execution, including `call_and_report`, `runtestprotocol`, and `pytest_runtest_makereport` among others that manage how test outcomes are processed and reported.\n- Given functions like `pytest_report_teststatus`, `call_and_report`, and how exceptions are handled within these processes, these can have an effect on what is captured in reports. Especially, `pytest_runtest_makereport` could be responsible for collecting the exceptions and additional information related to test failures.\n\n\n6. Relevant sections in `runner.py`:\n- Exception handling for making reports (`pytest_runtest_makereport`), `call_and_report()` specifically how exceptions are caught and carried through the stack.\n- Handling of \"call\" and managing executions, part might be essential for integrating error serialization. \n- \"check_interactive_exception\" and handling within \"call_and_report()\" may need to be checked for handling chained exceptions completely.\n- _pytest_runtest_logreport_ and logs capturing mechanics might require modification to hold the extraction and display more verbose exception chains .\n\n7. **Conclusion**:\n- This file touches on the mechanisms that can impede or misrepresent the full extent of required exception traces when under pytest-xdist.\n- The issue might originate from this or related files that handle test execution and report.which originate the cause.\n\n**I will mark it as related but not necessarily the root cause as it involves multiple components in filed used when distributed testing is enabled. Any change here should holistically consider the integration with distributed execution mechanisms with xdist.**",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/reports.py",
          "src/_pytest/nodes.py",
          "src/_pytest/result.py"
        ],
        "relevant_symbols": [
          "pytest_runtest_makereport",
          "call_and_report",
          "check_interactive_exception",
          "CallInfo.from_call",
          "pytest_runtest_logreport",
          "pytest_runtest_teardown"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-17T22:38:16.677098",
        "usage": "4886.670112609863 ms"
      },
      "request": {
        "file_path": "src/_pytest/nodes.py"
      },
      "response": {
        "scratch_pad": "1. The issue reported is that when running tests using pytest-xdist (`-n auto`), the exception chaining is not displayed as expected. Without xdist, the whole exception trace is displayed, whereas with xdist, only the last exception is displayed.\n\n2. In the `src/_pytest/nodes.py` file, several classes and methods are related to how errors and tracebacks are represented, especially the `_repr_failure_py` method in the `Node` class, which formats exception information.\n\n3. The `_repr_failure_py` method handles formatting of exception traces. It uses the `excinfo.getrepr()` to get the representation of the exception information which includes traceback control based on configuration options like `fulltrace` and `verbose`.\n\n4. The problem might relate to how the `tbfilter` and `style` parameters affect the representation of exceptions when xdist (distributed or parallel testing) is used, possibly not considering chained exceptions properly.\n\n5. There is some filtering of the traceback using `_prunetraceback`, but this doesn't seem directly affecting xdist behavior.\n\n6. It's possible that the issue is in the `repr_failure` or the `_repr_failure_py` since these manage how failures are displayed and it seems xdist affects this representation.\n\n7. Possible solutions: Ensure the `excinfo.getrepr()` fully includes chained exceptions; review how xdist might limit/modify exception serialization and traceback. The current configuration options (like `tbstyle`, `fulltrace`) may also need reviewing or modifications to fully include chained exceptions in a distributed setting.",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/_code.py",
          "src/_pytest/config.py",
          "src/_pytest/runner.py"
        ],
        "relevant_symbols": [
          "Node._repr_failure_py",
          "Node.repr_failure",
          "Node._prunetraceback"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-17T22:38:21.563796",
        "usage": "172.6677417755127 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/_code/code.py",
            "relevant_symbol_keys": [
              "ExceptionInfo",
              "ExceptionInfo.repr_excinfo",
              "Traceback",
              "FormattedExcinfo",
              "ExceptionChainRepr"
            ],
            "root_cause_symbol_keys": []
          },
          {
            "file_path": "src/_pytest/reports.py",
            "relevant_symbol_keys": [
              "BaseReport._to_json"
            ],
            "root_cause_symbol_keys": [
              "BaseReport._to_json"
            ]
          },
          {
            "file_path": "src/_pytest/runner.py",
            "relevant_symbol_keys": [
              "pytest_runtest_makereport",
              "call_and_report",
              "check_interactive_exception",
              "CallInfo.from_call",
              "pytest_runtest_logreport",
              "pytest_runtest_teardown"
            ],
            "root_cause_symbol_keys": []
          },
          {
            "file_path": "src/_pytest/nodes.py",
            "relevant_symbol_keys": [
              "Node._repr_failure_py",
              "Node.repr_failure",
              "Node._prunetraceback"
            ],
            "root_cause_symbol_keys": []
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest._code.TracebackEntry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 162,
            "start_column": 4698,
            "end_line": 0,
            "end_column": 7955,
            "start_byte": 4698,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.TracebackEntry._repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_repr_style = None",
            "start_line": 165,
            "start_column": 4767,
            "end_line": 4,
            "end_column": 4785,
            "start_byte": 4767,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.exprinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "exprinfo = None",
            "start_line": 166,
            "start_column": 4790,
            "end_line": 4,
            "end_column": 4805,
            "start_byte": 4790,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1",
            "start_line": 168,
            "start_column": 4811,
            "end_line": 4,
            "end_column": 4965,
            "start_byte": 4811,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.set_repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode",
            "start_line": 173,
            "start_column": 4971,
            "end_line": 4,
            "end_column": 5075,
            "start_byte": 4971,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.frame",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)",
            "start_line": 177,
            "start_column": 5081,
            "end_line": 4,
            "end_column": 5201,
            "start_byte": 5081,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.relline",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno",
            "start_line": 183,
            "start_column": 5207,
            "end_line": 4,
            "end_column": 5296,
            "start_byte": 5207,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)",
            "start_line": 187,
            "start_column": 5302,
            "end_line": 4,
            "end_column": 5403,
            "start_byte": 5302,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.statement",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)",
            "start_line": 190,
            "start_column": 5409,
            "end_line": 4,
            "end_column": 5605,
            "start_byte": 5409,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.path",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path",
            "start_line": 196,
            "start_column": 5611,
            "end_line": 4,
            "end_column": 5716,
            "start_byte": 5611,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals",
            "start_line": 201,
            "start_column": 5722,
            "end_line": 4,
            "end_column": 5832,
            "start_byte": 5722,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.getfirstlinesource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getfirstlinesource(self):\n        return self.frame.code.firstlineno",
            "start_line": 206,
            "start_column": 5838,
            "end_line": 4,
            "end_column": 5910,
            "start_byte": 5838,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.getsource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]",
            "start_line": 209,
            "start_column": 5916,
            "end_line": 4,
            "end_column": 6798,
            "start_byte": 5916,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "source = property(getsource)",
            "start_line": 235,
            "start_column": 6804,
            "end_line": 4,
            "end_column": 6832,
            "start_byte": 6804,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.ishidden",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh",
            "start_line": 237,
            "start_column": 6838,
            "end_line": 4,
            "end_column": 7432,
            "start_byte": 6838,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)",
            "start_line": 254,
            "start_column": 7438,
            "end_line": 4,
            "end_column": 7833,
            "start_byte": 7438,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.name",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 268,
            "start_column": 7839,
            "end_line": 4,
            "end_column": 7955,
            "start_byte": 7839,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 274,
            "start_column": 7958,
            "end_line": 0,
            "end_column": 11818,
            "start_byte": 7958,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.Traceback.Entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "Entry = TracebackEntry",
            "start_line": 279,
            "start_column": 8092,
            "end_line": 4,
            "end_column": 8114,
            "start_byte": 8092,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)",
            "start_line": 281,
            "start_column": 8120,
            "end_line": 4,
            "end_column": 8555,
            "start_byte": 8120,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.cut",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self",
            "start_line": 295,
            "start_column": 8561,
            "end_line": 4,
            "end_column": 9668,
            "start_byte": 8561,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.__getitem__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val",
            "start_line": 321,
            "start_column": 9674,
            "end_line": 4,
            "end_column": 9841,
            "start_byte": 9674,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.filter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)",
            "start_line": 327,
            "start_column": 9847,
            "end_line": 4,
            "end_column": 10342,
            "start_byte": 9847,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.getcrashentry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]",
            "start_line": 339,
            "start_column": 10348,
            "end_line": 4,
            "end_column": 10652,
            "start_byte": 10348,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.recursionindex",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 349,
            "start_column": 10658,
            "end_line": 4,
            "end_column": 11818,
            "start_byte": 10658,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 386,
            "start_column": 11961,
            "end_line": 0,
            "end_column": 19503,
            "start_byte": 11961,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ExceptionInfo._assert_start_repr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_assert_start_repr = \"AssertionError('assert \"",
            "start_line": 392,
            "start_column": 12119,
            "end_line": 4,
            "end_column": 12165,
            "start_byte": 12119,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])",
            "start_line": 394,
            "start_column": 12171,
            "end_line": 4,
            "end_column": 12244,
            "start_byte": 12171,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._striptext",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_striptext = attr.ib(type=str, default=\"\")",
            "start_line": 395,
            "start_column": 12249,
            "end_line": 4,
            "end_column": 12291,
            "start_byte": 12249,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_traceback = attr.ib(type=Optional[Traceback], default=None)",
            "start_line": 396,
            "start_column": 12296,
            "end_line": 4,
            "end_column": 12356,
            "start_byte": 12296,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.from_exc_info",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)",
            "start_line": 398,
            "start_column": 12362,
            "end_line": 4,
            "end_column": 13284,
            "start_byte": 12362,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.from_current",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)",
            "start_line": 425,
            "start_column": 13290,
            "end_line": 4,
            "end_column": 14045,
            "start_byte": 13290,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.for_later",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)",
            "start_line": 447,
            "start_column": 14051,
            "end_line": 4,
            "end_column": 14191,
            "start_byte": 14051,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.fill_unfilled",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info",
            "start_line": 453,
            "start_column": 14197,
            "end_line": 4,
            "end_column": 14453,
            "start_byte": 14197,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.type",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]",
            "start_line": 458,
            "start_column": 14459,
            "end_line": 4,
            "end_column": 14691,
            "start_byte": 14459,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.value",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]",
            "start_line": 466,
            "start_column": 14697,
            "end_line": 4,
            "end_column": 14923,
            "start_byte": 14697,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.tb",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]",
            "start_line": 474,
            "start_column": 14929,
            "end_line": 4,
            "end_column": 15168,
            "start_byte": 14929,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.typename",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__",
            "start_line": 482,
            "start_column": 15174,
            "end_line": 4,
            "end_column": 15420,
            "start_byte": 15174,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback",
            "start_line": 490,
            "start_column": 15426,
            "end_line": 4,
            "end_column": 15636,
            "start_byte": 15426,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value",
            "start_line": 497,
            "start_column": 15642,
            "end_line": 4,
            "end_column": 15742,
            "start_byte": 15642,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))",
            "start_line": 501,
            "start_column": 15748,
            "end_line": 4,
            "end_column": 15955,
            "start_byte": 15748,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text",
            "start_line": 506,
            "start_column": 15961,
            "end_line": 4,
            "end_column": 16595,
            "start_byte": 15961,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)",
            "start_line": 522,
            "start_column": 16601,
            "end_line": 4,
            "end_column": 16827,
            "start_byte": 16601,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._getreprcrash",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)",
            "start_line": 528,
            "start_column": 16833,
            "end_line": 4,
            "end_column": 17101,
            "start_byte": 16833,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.getrepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)",
            "start_line": 534,
            "start_column": 17107,
            "end_line": 4,
            "end_column": 18918,
            "start_byte": 17107,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.match",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 593,
            "start_column": 18924,
            "end_line": 4,
            "end_column": 19503,
            "start_byte": 18924,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 607,
            "start_column": 19506,
            "end_line": 0,
            "end_column": 29052,
            "start_byte": 19506,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.FormattedExcinfo.flow_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "flow_marker = \">\"",
            "start_line": 612,
            "start_column": 19646,
            "end_line": 4,
            "end_column": 19663,
            "start_byte": 19646,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.fail_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "fail_marker = \"E\"",
            "start_line": 613,
            "start_column": 19668,
            "end_line": 4,
            "end_column": 19685,
            "start_byte": 19668,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.showlocals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "showlocals = attr.ib(default=False)",
            "start_line": 615,
            "start_column": 19691,
            "end_line": 4,
            "end_column": 19726,
            "start_byte": 19691,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "style = attr.ib(default=\"long\")",
            "start_line": 616,
            "start_column": 19731,
            "end_line": 4,
            "end_column": 19762,
            "start_byte": 19731,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.abspath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "abspath = attr.ib(default=True)",
            "start_line": 617,
            "start_column": 19767,
            "end_line": 4,
            "end_column": 19798,
            "start_byte": 19767,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.tbfilter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "tbfilter = attr.ib(default=True)",
            "start_line": 618,
            "start_column": 19803,
            "end_line": 4,
            "end_column": 19835,
            "start_byte": 19803,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.funcargs",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "funcargs = attr.ib(default=False)",
            "start_line": 619,
            "start_column": 19840,
            "end_line": 4,
            "end_column": 19873,
            "start_byte": 19840,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.truncate_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "truncate_locals = attr.ib(default=True)",
            "start_line": 620,
            "start_column": 19878,
            "end_line": 4,
            "end_column": 19917,
            "start_byte": 19878,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.chain",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "chain = attr.ib(default=True)",
            "start_line": 621,
            "start_column": 19922,
            "end_line": 4,
            "end_column": 19951,
            "start_byte": 19922,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.astcache",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)",
            "start_line": 622,
            "start_column": 19956,
            "end_line": 4,
            "end_column": 20026,
            "start_byte": 19956,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._getindent",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))",
            "start_line": 624,
            "start_column": 20032,
            "end_line": 4,
            "end_column": 20465,
            "start_byte": 20032,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._getentrysource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source",
            "start_line": 639,
            "start_column": 20471,
            "end_line": 4,
            "end_column": 20644,
            "start_byte": 20471,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_args",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)",
            "start_line": 645,
            "start_column": 20650,
            "end_line": 4,
            "end_column": 20890,
            "start_byte": 20650,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.get_source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
            "start_line": 652,
            "start_column": 20896,
            "end_line": 4,
            "end_column": 21896,
            "start_byte": 20896,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.get_exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines",
            "start_line": 676,
            "start_column": 21902,
            "end_line": 4,
            "end_column": 22326,
            "start_byte": 21902,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)",
            "start_line": 688,
            "start_column": 22332,
            "end_line": 4,
            "end_column": 23498,
            "start_byte": 22332,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback_entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)",
            "start_line": 714,
            "start_column": 23504,
            "end_line": 4,
            "end_column": 24777,
            "start_byte": 23504,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._makepath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path",
            "start_line": 747,
            "start_column": 24783,
            "end_line": 4,
            "end_column": 25053,
            "start_byte": 24783,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)",
            "start_line": 757,
            "start_column": 25059,
            "end_line": 4,
            "end_column": 25701,
            "start_byte": 25059,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._truncate_recursive_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline",
            "start_line": 775,
            "start_column": 25707,
            "end_line": 4,
            "end_column": 27387,
            "start_byte": 25707,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 812,
            "start_column": 27393,
            "end_line": 4,
            "end_column": 29052,
            "start_byte": 27393,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionChainRepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 882,
            "start_column": 29762,
            "end_line": 0,
            "end_column": 30319,
            "start_byte": 29762,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ExceptionChainRepr.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]",
            "start_line": 883,
            "start_column": 29807,
            "end_line": 4,
            "end_column": 30068,
            "start_byte": 29807,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionChainRepr.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 891,
            "start_column": 30074,
            "end_line": 4,
            "end_column": 30319,
            "start_byte": 30074,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 900,
            "start_column": 30322,
            "end_line": 0,
            "end_column": 30620,
            "start_byte": 30322,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprExceptionInfo.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash",
            "start_line": 901,
            "start_column": 30366,
            "end_line": 4,
            "end_column": 30516,
            "start_byte": 30366,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprExceptionInfo.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 906,
            "start_column": 30522,
            "end_line": 4,
            "end_column": 30620,
            "start_byte": 30522,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 911,
            "start_column": 30623,
            "end_line": 0,
            "end_column": 31451,
            "start_byte": 30623,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprTraceback.entrysep",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "entrysep = \"_ \"",
            "start_line": 912,
            "start_column": 30662,
            "end_line": 4,
            "end_column": 30677,
            "start_byte": 30662,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style",
            "start_line": 914,
            "start_column": 30683,
            "end_line": 4,
            "end_column": 30834,
            "start_byte": 30683,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 919,
            "start_column": 30840,
            "end_line": 4,
            "end_column": 31451,
            "start_byte": 30840,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTracebackNative",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 938,
            "start_column": 31454,
            "end_line": 0,
            "end_column": 31642,
            "start_byte": 31454,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprTracebackNative.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 939,
            "start_column": 31500,
            "end_line": 4,
            "end_column": 31642,
            "start_byte": 31500,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call",
            "start_line": 148,
            "start_column": 5001,
            "end_line": 0,
            "end_column": 5096,
            "start_byte": 5001,
            "end_byte": 0
          },
          {
            "name": "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star",
            "start_line": 185,
            "start_column": 6538,
            "end_line": 4,
            "end_column": 6784,
            "start_byte": 6538,
            "end_byte": 4
          },
          {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if",
            "start_line": 226,
            "start_column": 7575,
            "end_line": 4,
            "end_column": 7722,
            "start_byte": 7575,
            "end_byte": 4
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n",
            "start_line": 356,
            "start_column": 11465,
            "end_line": 0,
            "end_column": 11864,
            "start_byte": 11465,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 366,
            "start_column": 11867,
            "end_line": 0,
            "end_column": 12170,
            "start_byte": 11867,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 375,
            "start_column": 12173,
            "end_line": 0,
            "end_column": 12322,
            "start_byte": 12173,
            "end_byte": 0
          },
          {
            "name": "_pytest.junitxml.LogXML.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 534,
            "start_column": 17242,
            "end_line": 4,
            "end_column": 20560,
            "start_byte": 17242,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 572,
            "start_column": 19451,
            "end_line": 4,
            "end_column": 19598,
            "start_byte": 19451,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 589,
            "start_column": 19968,
            "end_line": 4,
            "end_column": 20111,
            "start_byte": 19968,
            "end_byte": 4
          },
          {
            "name": "_pytest.main.Session.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 406,
            "start_column": 12313,
            "end_line": 4,
            "end_column": 12675,
            "start_byte": 12313,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)",
            "start_line": 128,
            "start_column": 3862,
            "end_line": 0,
            "end_column": 4054,
            "start_byte": 3862,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.call_and_report",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report",
            "start_line": 165,
            "start_column": 4915,
            "end_line": 0,
            "end_column": 5311,
            "start_byte": 4915,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.check_interactive_exception",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )",
            "start_line": 176,
            "start_column": 5314,
            "end_line": 0,
            "end_column": 5534,
            "start_byte": 5314,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.CallInfo.from_call",
            "file_path": "src/_pytest/runner.py",
            "file_content": "@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)",
            "start_line": 212,
            "start_column": 6300,
            "end_line": 4,
            "end_column": 6846,
            "start_byte": 6300,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)",
            "start_line": 241,
            "start_column": 7243,
            "end_line": 0,
            "end_column": 7338,
            "start_byte": 7243,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": " item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n ",
            "start_line": 119,
            "start_column": 3957,
            "end_line": 0,
            "end_column": 5978,
            "start_byte": 3957,
            "end_byte": 0
          },
          {
            "name": "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na",
            "start_line": 72,
            "start_column": 2118,
            "end_line": 4,
            "end_column": 3104,
            "start_byte": 2118,
            "end_byte": 4
          },
          {
            "name": "_pytest.terminal.TerminalReporter.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 385,
            "start_column": 12404,
            "end_line": 4,
            "end_column": 14437,
            "start_byte": 12404,
            "end_byte": 4
          },
          {
            "name": "_pytest.unittest.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      ",
            "start_line": 222,
            "start_column": 7475,
            "end_line": 0,
            "end_column": 8105,
            "start_byte": 7475,
            "end_byte": 0
          },
          {
            "name": "_pytest.resultlog.ResultLog.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo",
            "start_line": 61,
            "start_column": 1933,
            "end_line": 4,
            "end_column": 2553,
            "start_byte": 1933,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node._prunetraceback",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _prunetraceback(self, excinfo):\n        pass",
            "start_line": 237,
            "start_column": 7628,
            "end_line": 4,
            "end_column": 7676,
            "start_byte": 7628,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )",
            "start_line": 240,
            "start_column": 7682,
            "end_line": 4,
            "end_column": 9224,
            "start_byte": 7682,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node.repr_failure",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)",
            "start_line": 285,
            "start_column": 9230,
            "end_line": 4,
            "end_column": 9327,
            "start_byte": 9230,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.reports.BaseReport._to_json",
            "file_path": "src/_pytest/reports.py",
            "file_content": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d",
            "start_line": 153,
            "start_column": 4241,
            "end_line": 4,
            "end_column": 5985,
            "start_byte": 4241,
            "end_byte": 4
          }
        ]
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-17T22:38:21.736477",
        "usage": "7644.094944000244 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest._code.TracebackEntry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 162,
            "start_column": 4698,
            "end_line": 0,
            "end_column": 7955,
            "start_byte": 4698,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.TracebackEntry._repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_repr_style = None",
            "start_line": 165,
            "start_column": 4767,
            "end_line": 4,
            "end_column": 4785,
            "start_byte": 4767,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.exprinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "exprinfo = None",
            "start_line": 166,
            "start_column": 4790,
            "end_line": 4,
            "end_column": 4805,
            "start_byte": 4790,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1",
            "start_line": 168,
            "start_column": 4811,
            "end_line": 4,
            "end_column": 4965,
            "start_byte": 4811,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.set_repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode",
            "start_line": 173,
            "start_column": 4971,
            "end_line": 4,
            "end_column": 5075,
            "start_byte": 4971,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.frame",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)",
            "start_line": 177,
            "start_column": 5081,
            "end_line": 4,
            "end_column": 5201,
            "start_byte": 5081,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.relline",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno",
            "start_line": 183,
            "start_column": 5207,
            "end_line": 4,
            "end_column": 5296,
            "start_byte": 5207,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)",
            "start_line": 187,
            "start_column": 5302,
            "end_line": 4,
            "end_column": 5403,
            "start_byte": 5302,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.statement",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)",
            "start_line": 190,
            "start_column": 5409,
            "end_line": 4,
            "end_column": 5605,
            "start_byte": 5409,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.path",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path",
            "start_line": 196,
            "start_column": 5611,
            "end_line": 4,
            "end_column": 5716,
            "start_byte": 5611,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals",
            "start_line": 201,
            "start_column": 5722,
            "end_line": 4,
            "end_column": 5832,
            "start_byte": 5722,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.getfirstlinesource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getfirstlinesource(self):\n        return self.frame.code.firstlineno",
            "start_line": 206,
            "start_column": 5838,
            "end_line": 4,
            "end_column": 5910,
            "start_byte": 5838,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.getsource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]",
            "start_line": 209,
            "start_column": 5916,
            "end_line": 4,
            "end_column": 6798,
            "start_byte": 5916,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "source = property(getsource)",
            "start_line": 235,
            "start_column": 6804,
            "end_line": 4,
            "end_column": 6832,
            "start_byte": 6804,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.ishidden",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh",
            "start_line": 237,
            "start_column": 6838,
            "end_line": 4,
            "end_column": 7432,
            "start_byte": 6838,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)",
            "start_line": 254,
            "start_column": 7438,
            "end_line": 4,
            "end_column": 7833,
            "start_byte": 7438,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.TracebackEntry.name",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 268,
            "start_column": 7839,
            "end_line": 4,
            "end_column": 7955,
            "start_byte": 7839,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 274,
            "start_column": 7958,
            "end_line": 0,
            "end_column": 11818,
            "start_byte": 7958,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.Traceback.Entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "Entry = TracebackEntry",
            "start_line": 279,
            "start_column": 8092,
            "end_line": 4,
            "end_column": 8114,
            "start_byte": 8092,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)",
            "start_line": 281,
            "start_column": 8120,
            "end_line": 4,
            "end_column": 8555,
            "start_byte": 8120,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.cut",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self",
            "start_line": 295,
            "start_column": 8561,
            "end_line": 4,
            "end_column": 9668,
            "start_byte": 8561,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.__getitem__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val",
            "start_line": 321,
            "start_column": 9674,
            "end_line": 4,
            "end_column": 9841,
            "start_byte": 9674,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.filter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)",
            "start_line": 327,
            "start_column": 9847,
            "end_line": 4,
            "end_column": 10342,
            "start_byte": 9847,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.getcrashentry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]",
            "start_line": 339,
            "start_column": 10348,
            "end_line": 4,
            "end_column": 10652,
            "start_byte": 10348,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.Traceback.recursionindex",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 349,
            "start_column": 10658,
            "end_line": 4,
            "end_column": 11818,
            "start_byte": 10658,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 386,
            "start_column": 11961,
            "end_line": 0,
            "end_column": 19503,
            "start_byte": 11961,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ExceptionInfo._assert_start_repr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_assert_start_repr = \"AssertionError('assert \"",
            "start_line": 392,
            "start_column": 12119,
            "end_line": 4,
            "end_column": 12165,
            "start_byte": 12119,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])",
            "start_line": 394,
            "start_column": 12171,
            "end_line": 4,
            "end_column": 12244,
            "start_byte": 12171,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._striptext",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_striptext = attr.ib(type=str, default=\"\")",
            "start_line": 395,
            "start_column": 12249,
            "end_line": 4,
            "end_column": 12291,
            "start_byte": 12249,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_traceback = attr.ib(type=Optional[Traceback], default=None)",
            "start_line": 396,
            "start_column": 12296,
            "end_line": 4,
            "end_column": 12356,
            "start_byte": 12296,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.from_exc_info",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)",
            "start_line": 398,
            "start_column": 12362,
            "end_line": 4,
            "end_column": 13284,
            "start_byte": 12362,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.from_current",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)",
            "start_line": 425,
            "start_column": 13290,
            "end_line": 4,
            "end_column": 14045,
            "start_byte": 13290,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.for_later",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)",
            "start_line": 447,
            "start_column": 14051,
            "end_line": 4,
            "end_column": 14191,
            "start_byte": 14051,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.fill_unfilled",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info",
            "start_line": 453,
            "start_column": 14197,
            "end_line": 4,
            "end_column": 14453,
            "start_byte": 14197,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.type",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]",
            "start_line": 458,
            "start_column": 14459,
            "end_line": 4,
            "end_column": 14691,
            "start_byte": 14459,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.value",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]",
            "start_line": 466,
            "start_column": 14697,
            "end_line": 4,
            "end_column": 14923,
            "start_byte": 14697,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.tb",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]",
            "start_line": 474,
            "start_column": 14929,
            "end_line": 4,
            "end_column": 15168,
            "start_byte": 14929,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.typename",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__",
            "start_line": 482,
            "start_column": 15174,
            "end_line": 4,
            "end_column": 15420,
            "start_byte": 15174,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback",
            "start_line": 490,
            "start_column": 15426,
            "end_line": 4,
            "end_column": 15636,
            "start_byte": 15426,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value",
            "start_line": 497,
            "start_column": 15642,
            "end_line": 4,
            "end_column": 15742,
            "start_byte": 15642,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))",
            "start_line": 501,
            "start_column": 15748,
            "end_line": 4,
            "end_column": 15955,
            "start_byte": 15748,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text",
            "start_line": 506,
            "start_column": 15961,
            "end_line": 4,
            "end_column": 16595,
            "start_byte": 15961,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)",
            "start_line": 522,
            "start_column": 16601,
            "end_line": 4,
            "end_column": 16827,
            "start_byte": 16601,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo._getreprcrash",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)",
            "start_line": 528,
            "start_column": 16833,
            "end_line": 4,
            "end_column": 17101,
            "start_byte": 16833,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.getrepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)",
            "start_line": 534,
            "start_column": 17107,
            "end_line": 4,
            "end_column": 18918,
            "start_byte": 17107,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionInfo.match",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 593,
            "start_column": 18924,
            "end_line": 4,
            "end_column": 19503,
            "start_byte": 18924,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 607,
            "start_column": 19506,
            "end_line": 0,
            "end_column": 29052,
            "start_byte": 19506,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.FormattedExcinfo.flow_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "flow_marker = \">\"",
            "start_line": 612,
            "start_column": 19646,
            "end_line": 4,
            "end_column": 19663,
            "start_byte": 19646,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.fail_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "fail_marker = \"E\"",
            "start_line": 613,
            "start_column": 19668,
            "end_line": 4,
            "end_column": 19685,
            "start_byte": 19668,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.showlocals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "showlocals = attr.ib(default=False)",
            "start_line": 615,
            "start_column": 19691,
            "end_line": 4,
            "end_column": 19726,
            "start_byte": 19691,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "style = attr.ib(default=\"long\")",
            "start_line": 616,
            "start_column": 19731,
            "end_line": 4,
            "end_column": 19762,
            "start_byte": 19731,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.abspath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "abspath = attr.ib(default=True)",
            "start_line": 617,
            "start_column": 19767,
            "end_line": 4,
            "end_column": 19798,
            "start_byte": 19767,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.tbfilter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "tbfilter = attr.ib(default=True)",
            "start_line": 618,
            "start_column": 19803,
            "end_line": 4,
            "end_column": 19835,
            "start_byte": 19803,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.funcargs",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "funcargs = attr.ib(default=False)",
            "start_line": 619,
            "start_column": 19840,
            "end_line": 4,
            "end_column": 19873,
            "start_byte": 19840,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.truncate_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "truncate_locals = attr.ib(default=True)",
            "start_line": 620,
            "start_column": 19878,
            "end_line": 4,
            "end_column": 19917,
            "start_byte": 19878,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.chain",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "chain = attr.ib(default=True)",
            "start_line": 621,
            "start_column": 19922,
            "end_line": 4,
            "end_column": 19951,
            "start_byte": 19922,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.astcache",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)",
            "start_line": 622,
            "start_column": 19956,
            "end_line": 4,
            "end_column": 20026,
            "start_byte": 19956,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._getindent",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))",
            "start_line": 624,
            "start_column": 20032,
            "end_line": 4,
            "end_column": 20465,
            "start_byte": 20032,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._getentrysource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source",
            "start_line": 639,
            "start_column": 20471,
            "end_line": 4,
            "end_column": 20644,
            "start_byte": 20471,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_args",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)",
            "start_line": 645,
            "start_column": 20650,
            "end_line": 4,
            "end_column": 20890,
            "start_byte": 20650,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.get_source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
            "start_line": 652,
            "start_column": 20896,
            "end_line": 4,
            "end_column": 21896,
            "start_byte": 20896,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.get_exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines",
            "start_line": 676,
            "start_column": 21902,
            "end_line": 4,
            "end_column": 22326,
            "start_byte": 21902,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)",
            "start_line": 688,
            "start_column": 22332,
            "end_line": 4,
            "end_column": 23498,
            "start_byte": 22332,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback_entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)",
            "start_line": 714,
            "start_column": 23504,
            "end_line": 4,
            "end_column": 24777,
            "start_byte": 23504,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._makepath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path",
            "start_line": 747,
            "start_column": 24783,
            "end_line": 4,
            "end_column": 25053,
            "start_byte": 24783,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)",
            "start_line": 757,
            "start_column": 25059,
            "end_line": 4,
            "end_column": 25701,
            "start_byte": 25059,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo._truncate_recursive_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline",
            "start_line": 775,
            "start_column": 25707,
            "end_line": 4,
            "end_column": 27387,
            "start_byte": 25707,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 812,
            "start_column": 27393,
            "end_line": 4,
            "end_column": 29052,
            "start_byte": 27393,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionChainRepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 882,
            "start_column": 29762,
            "end_line": 0,
            "end_column": 30319,
            "start_byte": 29762,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ExceptionChainRepr.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]",
            "start_line": 883,
            "start_column": 29807,
            "end_line": 4,
            "end_column": 30068,
            "start_byte": 29807,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ExceptionChainRepr.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 891,
            "start_column": 30074,
            "end_line": 4,
            "end_column": 30319,
            "start_byte": 30074,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 900,
            "start_column": 30322,
            "end_line": 0,
            "end_column": 30620,
            "start_byte": 30322,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprExceptionInfo.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash",
            "start_line": 901,
            "start_column": 30366,
            "end_line": 4,
            "end_column": 30516,
            "start_byte": 30366,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprExceptionInfo.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 906,
            "start_column": 30522,
            "end_line": 4,
            "end_column": 30620,
            "start_byte": 30522,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 911,
            "start_column": 30623,
            "end_line": 0,
            "end_column": 31451,
            "start_byte": 30623,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprTraceback.entrysep",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "entrysep = \"_ \"",
            "start_line": 912,
            "start_column": 30662,
            "end_line": 4,
            "end_column": 30677,
            "start_byte": 30662,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style",
            "start_line": 914,
            "start_column": 30683,
            "end_line": 4,
            "end_column": 30834,
            "start_byte": 30683,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTraceback.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 919,
            "start_column": 30840,
            "end_line": 4,
            "end_column": 31451,
            "start_byte": 30840,
            "end_byte": 4
          },
          {
            "name": "_pytest._code.ReprTracebackNative",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 938,
            "start_column": 31454,
            "end_line": 0,
            "end_column": 31642,
            "start_byte": 31454,
            "end_byte": 0
          },
          {
            "name": "_pytest._code.ReprTracebackNative.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 939,
            "start_column": 31500,
            "end_line": 4,
            "end_column": 31642,
            "start_byte": 31500,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call",
            "start_line": 148,
            "start_column": 5001,
            "end_line": 0,
            "end_column": 5096,
            "start_byte": 5001,
            "end_byte": 0
          },
          {
            "name": "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star",
            "start_line": 185,
            "start_column": 6538,
            "end_line": 4,
            "end_column": 6784,
            "start_byte": 6538,
            "end_byte": 4
          },
          {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if",
            "start_line": 226,
            "start_column": 7575,
            "end_line": 4,
            "end_column": 7722,
            "start_byte": 7575,
            "end_byte": 4
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n",
            "start_line": 356,
            "start_column": 11465,
            "end_line": 0,
            "end_column": 11864,
            "start_byte": 11465,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 366,
            "start_column": 11867,
            "end_line": 0,
            "end_column": 12170,
            "start_byte": 11867,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 375,
            "start_column": 12173,
            "end_line": 0,
            "end_column": 12322,
            "start_byte": 12173,
            "end_byte": 0
          },
          {
            "name": "_pytest.junitxml.LogXML.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 534,
            "start_column": 17242,
            "end_line": 4,
            "end_column": 20560,
            "start_byte": 17242,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 572,
            "start_column": 19451,
            "end_line": 4,
            "end_column": 19598,
            "start_byte": 19451,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 589,
            "start_column": 19968,
            "end_line": 4,
            "end_column": 20111,
            "start_byte": 19968,
            "end_byte": 4
          },
          {
            "name": "_pytest.main.Session.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 406,
            "start_column": 12313,
            "end_line": 4,
            "end_column": 12675,
            "start_byte": 12313,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)",
            "start_line": 128,
            "start_column": 3862,
            "end_line": 0,
            "end_column": 4054,
            "start_byte": 3862,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.call_and_report",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report",
            "start_line": 165,
            "start_column": 4915,
            "end_line": 0,
            "end_column": 5311,
            "start_byte": 4915,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.check_interactive_exception",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )",
            "start_line": 176,
            "start_column": 5314,
            "end_line": 0,
            "end_column": 5534,
            "start_byte": 5314,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.CallInfo.from_call",
            "file_path": "src/_pytest/runner.py",
            "file_content": "@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)",
            "start_line": 212,
            "start_column": 6300,
            "end_line": 4,
            "end_column": 6846,
            "start_byte": 6300,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)",
            "start_line": 241,
            "start_column": 7243,
            "end_line": 0,
            "end_column": 7338,
            "start_byte": 7243,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": " item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n ",
            "start_line": 119,
            "start_column": 3957,
            "end_line": 0,
            "end_column": 5978,
            "start_byte": 3957,
            "end_byte": 0
          },
          {
            "name": "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na",
            "start_line": 72,
            "start_column": 2118,
            "end_line": 4,
            "end_column": 3104,
            "start_byte": 2118,
            "end_byte": 4
          },
          {
            "name": "_pytest.terminal.TerminalReporter.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 385,
            "start_column": 12404,
            "end_line": 4,
            "end_column": 14437,
            "start_byte": 12404,
            "end_byte": 4
          },
          {
            "name": "_pytest.unittest.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      ",
            "start_line": 222,
            "start_column": 7475,
            "end_line": 0,
            "end_column": 8105,
            "start_byte": 7475,
            "end_byte": 0
          },
          {
            "name": "_pytest.resultlog.ResultLog.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo",
            "start_line": 61,
            "start_column": 1933,
            "end_line": 4,
            "end_column": 2553,
            "start_byte": 1933,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node._prunetraceback",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _prunetraceback(self, excinfo):\n        pass",
            "start_line": 237,
            "start_column": 7628,
            "end_line": 4,
            "end_column": 7676,
            "start_byte": 7628,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )",
            "start_line": 240,
            "start_column": 7682,
            "end_line": 4,
            "end_column": 9224,
            "start_byte": 7682,
            "end_byte": 4
          },
          {
            "name": "_pytest.nodes.Node.repr_failure",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)",
            "start_line": 285,
            "start_column": 9230,
            "end_line": 4,
            "end_column": 9327,
            "start_byte": 9230,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.reports.BaseReport._to_json",
            "file_path": "src/_pytest/reports.py",
            "file_content": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d",
            "start_line": 153,
            "start_column": 4241,
            "end_line": 4,
            "end_column": 5985,
            "start_byte": 4241,
            "end_byte": 4
          }
        ]
      },
      "response": {
        "scratch_pad": "## Analyzing the Issue and Expected Fixes:\n\n- Reported Issue: The current exception reporting functionality not showing the entire chain or context of exceptions consistently when run with xdist.\n- Issue Source: xdist potentially changes the environment such that chained exceptions are not printed. The relevant functions could involve serialization or representation of exceptions.\n- Expected Result: When using xdist, exception reports should show the entire chain of exceptions just like the single-process execution without xdist.\n- Cause Analysis: The serialization or exception reporting might be losing information about the exception hierarchy or chain during its process.\n- Fix Strategy: Ensure the process for chaining exceptions in the reports is consistent and includes all detailed steps from the chaining process.\n\n## Identification of Symbols Related to the Issue:\n- \"_pytest.reports.BaseReport._to_json\" serializes the report dict which should include handling chains in the exception tracebacks spun.\n- \"_pytest._code.ExceptionInfo.traceback\" tracks how exceptions link up and pass on during serialization.\n- \"_pytest._code.ExceptionInfo.getrepr\" handles the representation of exceptions with chained options.\n- Each symbol affects part of process flow from object instantiation/traceback capture to provides final display output affected multiple sections.\n- Core requirement is ensuring full chain propagation without any losses.",
        "symbols": [
          {
            "name": "_pytest.reports.BaseReport._to_json",
            "file_path": "src/_pytest/reports.py",
            "reason": "The _to_json function returns serialized data, but may not fully capture exception chains when using xdist."
          },
          {
            "name": "_pytest._code.ExceptionInfo.getrepr",
            "file_path": "src/_pytest/_code/code.py",
            "reason": "The getrepr method formats exception info, including tracebacks; it may lack complete handling of chained exceptions, especially in distributed environments."
          }
        ],
        "more_info": [],
        "is_done": false,
        "symbols_scratch_pad": [
          "Analyzing _pytest.reports.BaseReport._to_json:\n- Seems primarily concerned with converting existing exception data into a serializable dict format.\n- Key concern could be the representation handling of 'disassembled_report' if it doesn't cover chained exceptions properly.\n- Assume needs modification to ensure \"reprtraceback\" and \"reprcrash\" deal with multiple linked exceptions in process.",
          "Analyzing _pytest._code.ExceptionInfo.getrepr:\n- Responsible for returning a string representation of the exception.\n- Should inherently support chained exceptions through the \"chain\" parameter, allowing chained exceptions to be included in the output.\n- However, potential loss in serialization might hinder chaining records in process.",
          "Analyzing further ExceptionInfo instances and whether they appropriately manage the capture and relay of complete exception and chaining data internally."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-17T22:38:29.380584",
        "usage": "3.801107406616211 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest._code.TracebackEntry",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
              "start_line": 162,
              "start_column": 4698,
              "end_line": 0,
              "end_column": 7955,
              "start_byte": 4698,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.TracebackEntry._repr_style",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "_repr_style = None",
              "start_line": 165,
              "start_column": 4767,
              "end_line": 4,
              "end_column": 4785,
              "start_byte": 4767,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.exprinfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "exprinfo = None",
              "start_line": 166,
              "start_column": 4790,
              "end_line": 4,
              "end_column": 4805,
              "start_byte": 4790,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1",
              "start_line": 168,
              "start_column": 4811,
              "end_line": 4,
              "end_column": 4965,
              "start_byte": 4811,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.set_repr_style",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode",
              "start_line": 173,
              "start_column": 4971,
              "end_line": 4,
              "end_column": 5075,
              "start_byte": 4971,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.frame",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)",
              "start_line": 177,
              "start_column": 5081,
              "end_line": 4,
              "end_column": 5201,
              "start_byte": 5081,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.relline",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno",
              "start_line": 183,
              "start_column": 5207,
              "end_line": 4,
              "end_column": 5296,
              "start_byte": 5207,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.__repr__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)",
              "start_line": 187,
              "start_column": 5302,
              "end_line": 4,
              "end_column": 5403,
              "start_byte": 5302,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.statement",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)",
              "start_line": 190,
              "start_column": 5409,
              "end_line": 4,
              "end_column": 5605,
              "start_byte": 5409,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.path",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path",
              "start_line": 196,
              "start_column": 5611,
              "end_line": 4,
              "end_column": 5716,
              "start_byte": 5611,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.locals",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals",
              "start_line": 201,
              "start_column": 5722,
              "end_line": 4,
              "end_column": 5832,
              "start_byte": 5722,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.getfirstlinesource",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def getfirstlinesource(self):\n        return self.frame.code.firstlineno",
              "start_line": 206,
              "start_column": 5838,
              "end_line": 4,
              "end_column": 5910,
              "start_byte": 5838,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.getsource",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]",
              "start_line": 209,
              "start_column": 5916,
              "end_line": 4,
              "end_column": 6798,
              "start_byte": 5916,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.source",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "source = property(getsource)",
              "start_line": 235,
              "start_column": 6804,
              "end_line": 4,
              "end_column": 6832,
              "start_byte": 6804,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.ishidden",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh",
              "start_line": 237,
              "start_column": 6838,
              "end_line": 4,
              "end_column": 7432,
              "start_byte": 6838,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.__str__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)",
              "start_line": 254,
              "start_column": 7438,
              "end_line": 4,
              "end_column": 7833,
              "start_byte": 7438,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.TracebackEntry.name",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
              "start_line": 268,
              "start_column": 7839,
              "end_line": 4,
              "end_column": 7955,
              "start_byte": 7839,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
              "start_line": 274,
              "start_column": 7958,
              "end_line": 0,
              "end_column": 11818,
              "start_byte": 7958,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.Traceback.Entry",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "Entry = TracebackEntry",
              "start_line": 279,
              "start_column": 8092,
              "end_line": 4,
              "end_column": 8114,
              "start_byte": 8092,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)",
              "start_line": 281,
              "start_column": 8120,
              "end_line": 4,
              "end_column": 8555,
              "start_byte": 8120,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.cut",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self",
              "start_line": 295,
              "start_column": 8561,
              "end_line": 4,
              "end_column": 9668,
              "start_byte": 8561,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.__getitem__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val",
              "start_line": 321,
              "start_column": 9674,
              "end_line": 4,
              "end_column": 9841,
              "start_byte": 9674,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.filter",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)",
              "start_line": 327,
              "start_column": 9847,
              "end_line": 4,
              "end_column": 10342,
              "start_byte": 9847,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.getcrashentry",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]",
              "start_line": 339,
              "start_column": 10348,
              "end_line": 4,
              "end_column": 10652,
              "start_byte": 10348,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.Traceback.recursionindex",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
              "start_line": 349,
              "start_column": 10658,
              "end_line": 4,
              "end_column": 11818,
              "start_byte": 10658,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
              "start_line": 386,
              "start_column": 11961,
              "end_line": 0,
              "end_column": 19503,
              "start_byte": 11961,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.ExceptionInfo._assert_start_repr",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "_assert_start_repr = \"AssertionError('assert \"",
              "start_line": 392,
              "start_column": 12119,
              "end_line": 4,
              "end_column": 12165,
              "start_byte": 12119,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo._excinfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])",
              "start_line": 394,
              "start_column": 12171,
              "end_line": 4,
              "end_column": 12244,
              "start_byte": 12171,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo._striptext",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "_striptext = attr.ib(type=str, default=\"\")",
              "start_line": 395,
              "start_column": 12249,
              "end_line": 4,
              "end_column": 12291,
              "start_byte": 12249,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo._traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "_traceback = attr.ib(type=Optional[Traceback], default=None)",
              "start_line": 396,
              "start_column": 12296,
              "end_line": 4,
              "end_column": 12356,
              "start_byte": 12296,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.from_exc_info",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)",
              "start_line": 398,
              "start_column": 12362,
              "end_line": 4,
              "end_column": 13284,
              "start_byte": 12362,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.from_current",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)",
              "start_line": 425,
              "start_column": 13290,
              "end_line": 4,
              "end_column": 14045,
              "start_byte": 13290,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.for_later",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)",
              "start_line": 447,
              "start_column": 14051,
              "end_line": 4,
              "end_column": 14191,
              "start_byte": 14051,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.fill_unfilled",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info",
              "start_line": 453,
              "start_column": 14197,
              "end_line": 4,
              "end_column": 14453,
              "start_byte": 14197,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.type",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]",
              "start_line": 458,
              "start_column": 14459,
              "end_line": 4,
              "end_column": 14691,
              "start_byte": 14459,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.value",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]",
              "start_line": 466,
              "start_column": 14697,
              "end_line": 4,
              "end_column": 14923,
              "start_byte": 14697,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.tb",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]",
              "start_line": 474,
              "start_column": 14929,
              "end_line": 4,
              "end_column": 15168,
              "start_byte": 14929,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.typename",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__",
              "start_line": 482,
              "start_column": 15174,
              "end_line": 4,
              "end_column": 15420,
              "start_byte": 15174,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback",
              "start_line": 490,
              "start_column": 15426,
              "end_line": 4,
              "end_column": 15636,
              "start_byte": 15426,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value",
              "start_line": 497,
              "start_column": 15642,
              "end_line": 4,
              "end_column": 15742,
              "start_byte": 15642,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.__repr__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))",
              "start_line": 501,
              "start_column": 15748,
              "end_line": 4,
              "end_column": 15955,
              "start_byte": 15748,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.exconly",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text",
              "start_line": 506,
              "start_column": 15961,
              "end_line": 4,
              "end_column": 16595,
              "start_byte": 15961,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.errisinstance",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)",
              "start_line": 522,
              "start_column": 16601,
              "end_line": 4,
              "end_column": 16827,
              "start_byte": 16601,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo._getreprcrash",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)",
              "start_line": 528,
              "start_column": 16833,
              "end_line": 4,
              "end_column": 17101,
              "start_byte": 16833,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.getrepr",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)",
              "start_line": 534,
              "start_column": 17107,
              "end_line": 4,
              "end_column": 18918,
              "start_byte": 17107,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionInfo.match",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
              "start_line": 593,
              "start_column": 18924,
              "end_line": 4,
              "end_column": 19503,
              "start_byte": 18924,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
              "start_line": 607,
              "start_column": 19506,
              "end_line": 0,
              "end_column": 29052,
              "start_byte": 19506,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.FormattedExcinfo.flow_marker",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "flow_marker = \">\"",
              "start_line": 612,
              "start_column": 19646,
              "end_line": 4,
              "end_column": 19663,
              "start_byte": 19646,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.fail_marker",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "fail_marker = \"E\"",
              "start_line": 613,
              "start_column": 19668,
              "end_line": 4,
              "end_column": 19685,
              "start_byte": 19668,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.showlocals",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "showlocals = attr.ib(default=False)",
              "start_line": 615,
              "start_column": 19691,
              "end_line": 4,
              "end_column": 19726,
              "start_byte": 19691,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.style",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "style = attr.ib(default=\"long\")",
              "start_line": 616,
              "start_column": 19731,
              "end_line": 4,
              "end_column": 19762,
              "start_byte": 19731,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.abspath",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "abspath = attr.ib(default=True)",
              "start_line": 617,
              "start_column": 19767,
              "end_line": 4,
              "end_column": 19798,
              "start_byte": 19767,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.tbfilter",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "tbfilter = attr.ib(default=True)",
              "start_line": 618,
              "start_column": 19803,
              "end_line": 4,
              "end_column": 19835,
              "start_byte": 19803,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.funcargs",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "funcargs = attr.ib(default=False)",
              "start_line": 619,
              "start_column": 19840,
              "end_line": 4,
              "end_column": 19873,
              "start_byte": 19840,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.truncate_locals",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "truncate_locals = attr.ib(default=True)",
              "start_line": 620,
              "start_column": 19878,
              "end_line": 4,
              "end_column": 19917,
              "start_byte": 19878,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.chain",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "chain = attr.ib(default=True)",
              "start_line": 621,
              "start_column": 19922,
              "end_line": 4,
              "end_column": 19951,
              "start_byte": 19922,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.astcache",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)",
              "start_line": 622,
              "start_column": 19956,
              "end_line": 4,
              "end_column": 20026,
              "start_byte": 19956,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo._getindent",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))",
              "start_line": 624,
              "start_column": 20032,
              "end_line": 4,
              "end_column": 20465,
              "start_byte": 20032,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo._getentrysource",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source",
              "start_line": 639,
              "start_column": 20471,
              "end_line": 4,
              "end_column": 20644,
              "start_byte": 20471,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.repr_args",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)",
              "start_line": 645,
              "start_column": 20650,
              "end_line": 4,
              "end_column": 20890,
              "start_byte": 20650,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.get_source",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
              "start_line": 652,
              "start_column": 20896,
              "end_line": 4,
              "end_column": 21896,
              "start_byte": 20896,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.get_exconly",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines",
              "start_line": 676,
              "start_column": 21902,
              "end_line": 4,
              "end_column": 22326,
              "start_byte": 21902,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.repr_locals",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)",
              "start_line": 688,
              "start_column": 22332,
              "end_line": 4,
              "end_column": 23498,
              "start_byte": 22332,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.repr_traceback_entry",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)",
              "start_line": 714,
              "start_column": 23504,
              "end_line": 4,
              "end_column": 24777,
              "start_byte": 23504,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo._makepath",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path",
              "start_line": 747,
              "start_column": 24783,
              "end_line": 4,
              "end_column": 25053,
              "start_byte": 24783,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.repr_traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)",
              "start_line": 757,
              "start_column": 25059,
              "end_line": 4,
              "end_column": 25701,
              "start_byte": 25059,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo._truncate_recursive_traceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline",
              "start_line": 775,
              "start_column": 25707,
              "end_line": 4,
              "end_column": 27387,
              "start_byte": 25707,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.FormattedExcinfo.repr_excinfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
              "start_line": 812,
              "start_column": 27393,
              "end_line": 4,
              "end_column": 29052,
              "start_byte": 27393,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionChainRepr",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
              "start_line": 882,
              "start_column": 29762,
              "end_line": 0,
              "end_column": 30319,
              "start_byte": 29762,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.ExceptionChainRepr.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]",
              "start_line": 883,
              "start_column": 29807,
              "end_line": 4,
              "end_column": 30068,
              "start_byte": 29807,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ExceptionChainRepr.toterminal",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
              "start_line": 891,
              "start_column": 30074,
              "end_line": 4,
              "end_column": 30319,
              "start_byte": 30074,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprExceptionInfo",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
              "start_line": 900,
              "start_column": 30322,
              "end_line": 0,
              "end_column": 30620,
              "start_byte": 30322,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.ReprExceptionInfo.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash",
              "start_line": 901,
              "start_column": 30366,
              "end_line": 4,
              "end_column": 30516,
              "start_byte": 30366,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprExceptionInfo.toterminal",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
              "start_line": 906,
              "start_column": 30522,
              "end_line": 4,
              "end_column": 30620,
              "start_byte": 30522,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprTraceback",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
              "start_line": 911,
              "start_column": 30623,
              "end_line": 0,
              "end_column": 31451,
              "start_byte": 30623,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.ReprTraceback.entrysep",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "entrysep = \"_ \"",
              "start_line": 912,
              "start_column": 30662,
              "end_line": 4,
              "end_column": 30677,
              "start_byte": 30662,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprTraceback.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style",
              "start_line": 914,
              "start_column": 30683,
              "end_line": 4,
              "end_column": 30834,
              "start_byte": 30683,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprTraceback.toterminal",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
              "start_line": 919,
              "start_column": 30840,
              "end_line": 4,
              "end_column": 31451,
              "start_byte": 30840,
              "end_byte": 4
            },
            {
              "name": "_pytest._code.ReprTracebackNative",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
              "start_line": 938,
              "start_column": 31454,
              "end_line": 0,
              "end_column": 31642,
              "start_byte": 31454,
              "end_byte": 0
            },
            {
              "name": "_pytest._code.ReprTracebackNative.__init__",
              "file_path": "src/_pytest/_code/code.py",
              "file_content": "def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
              "start_line": 939,
              "start_column": 31500,
              "end_line": 4,
              "end_column": 31642,
              "start_byte": 31500,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.pytest_runtest_teardown",
              "file_path": "src/_pytest/runner.py",
              "file_content": "when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call",
              "start_line": 148,
              "start_column": 5001,
              "end_line": 0,
              "end_column": 5096,
              "start_byte": 5001,
              "end_byte": 0
            },
            {
              "name": "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star",
              "start_line": 185,
              "start_column": 6538,
              "end_line": 4,
              "end_column": 6784,
              "start_byte": 6538,
              "end_byte": 4
            },
            {
              "name": "_pytest.capture.CaptureManager.pytest_runtest_teardown",
              "file_path": "src/_pytest/runner.py",
              "file_content": "d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if",
              "start_line": 226,
              "start_column": 7575,
              "end_line": 4,
              "end_column": 7722,
              "start_byte": 7575,
              "end_byte": 4
            },
            {
              "name": "_pytest.hookspec.pytest_runtest_teardown",
              "file_path": "src/_pytest/runner.py",
              "file_content": "ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n",
              "start_line": 356,
              "start_column": 11465,
              "end_line": 0,
              "end_column": 11864,
              "start_byte": 11465,
              "end_byte": 0
            },
            {
              "name": "_pytest.hookspec.pytest_runtest_makereport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 366,
              "start_column": 11867,
              "end_line": 0,
              "end_column": 12170,
              "start_byte": 11867,
              "end_byte": 0
            },
            {
              "name": "_pytest.hookspec.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 375,
              "start_column": 12173,
              "end_line": 0,
              "end_column": 12322,
              "start_byte": 12173,
              "end_byte": 0
            },
            {
              "name": "_pytest.junitxml.LogXML.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 534,
              "start_column": 17242,
              "end_line": 4,
              "end_column": 20560,
              "start_byte": 17242,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 572,
              "start_column": 19451,
              "end_line": 4,
              "end_column": 19598,
              "start_byte": 19451,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 589,
              "start_column": 19968,
              "end_line": 4,
              "end_column": 20111,
              "start_byte": 19968,
              "end_byte": 4
            },
            {
              "name": "_pytest.main.Session.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 406,
              "start_column": 12313,
              "end_line": 4,
              "end_column": 12675,
              "start_byte": 12313,
              "end_byte": 4
            },
            {
              "name": "_pytest.runner.pytest_runtest_teardown",
              "file_path": "src/_pytest/runner.py",
              "file_content": "def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)",
              "start_line": 128,
              "start_column": 3862,
              "end_line": 0,
              "end_column": 4054,
              "start_byte": 3862,
              "end_byte": 0
            },
            {
              "name": "_pytest.runner.call_and_report",
              "file_path": "src/_pytest/runner.py",
              "file_content": "def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report",
              "start_line": 165,
              "start_column": 4915,
              "end_line": 0,
              "end_column": 5311,
              "start_byte": 4915,
              "end_byte": 0
            },
            {
              "name": "_pytest.runner.check_interactive_exception",
              "file_path": "src/_pytest/runner.py",
              "file_content": "def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )",
              "start_line": 176,
              "start_column": 5314,
              "end_line": 0,
              "end_column": 5534,
              "start_byte": 5314,
              "end_byte": 0
            },
            {
              "name": "_pytest.runner.CallInfo.from_call",
              "file_path": "src/_pytest/runner.py",
              "file_content": "@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)",
              "start_line": 212,
              "start_column": 6300,
              "end_line": 4,
              "end_column": 6846,
              "start_byte": 6300,
              "end_byte": 4
            },
            {
              "name": "_pytest.runner.pytest_runtest_makereport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)",
              "start_line": 241,
              "start_column": 7243,
              "end_line": 0,
              "end_column": 7338,
              "start_byte": 7243,
              "end_byte": 0
            },
            {
              "name": "_pytest.skipping.pytest_runtest_makereport",
              "file_path": "src/_pytest/runner.py",
              "file_content": " item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n ",
              "start_line": 119,
              "start_column": 3957,
              "end_line": 0,
              "end_column": 5978,
              "start_byte": 3957,
              "end_byte": 0
            },
            {
              "name": "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na",
              "start_line": 72,
              "start_column": 2118,
              "end_line": 4,
              "end_column": 3104,
              "start_byte": 2118,
              "end_byte": 4
            },
            {
              "name": "_pytest.terminal.TerminalReporter.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "",
              "start_line": 385,
              "start_column": 12404,
              "end_line": 4,
              "end_column": 14437,
              "start_byte": 12404,
              "end_byte": 4
            },
            {
              "name": "_pytest.unittest.pytest_runtest_makereport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      ",
              "start_line": 222,
              "start_column": 7475,
              "end_line": 0,
              "end_column": 8105,
              "start_byte": 7475,
              "end_byte": 0
            },
            {
              "name": "_pytest.resultlog.ResultLog.pytest_runtest_logreport",
              "file_path": "src/_pytest/runner.py",
              "file_content": "d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo",
              "start_line": 61,
              "start_column": 1933,
              "end_line": 4,
              "end_column": 2553,
              "start_byte": 1933,
              "end_byte": 4
            },
            {
              "name": "_pytest.nodes.Node._prunetraceback",
              "file_path": "src/_pytest/nodes.py",
              "file_content": "def _prunetraceback(self, excinfo):\n        pass",
              "start_line": 237,
              "start_column": 7628,
              "end_line": 4,
              "end_column": 7676,
              "start_byte": 7628,
              "end_byte": 4
            },
            {
              "name": "_pytest.nodes.Node._repr_failure_py",
              "file_path": "src/_pytest/nodes.py",
              "file_content": "def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )",
              "start_line": 240,
              "start_column": 7682,
              "end_line": 4,
              "end_column": 9224,
              "start_byte": 7682,
              "end_byte": 4
            },
            {
              "name": "_pytest.nodes.Node.repr_failure",
              "file_path": "src/_pytest/nodes.py",
              "file_content": "def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)",
              "start_line": 285,
              "start_column": 9230,
              "end_line": 4,
              "end_column": 9327,
              "start_byte": 9230,
              "end_byte": 4
            }
          ],
          "root_caused_symbols": [
            {
              "name": "_pytest.reports.BaseReport._to_json",
              "file_path": "src/_pytest/reports.py",
              "file_content": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d",
              "start_line": 153,
              "start_column": 4241,
              "end_line": 4,
              "end_column": 5985,
              "start_byte": 4241,
              "end_byte": 4
            }
          ]
        },
        "symbols_evaluate": {
          "scratch_pad": "## Analyzing the Issue and Expected Fixes:\n\n- Reported Issue: The current exception reporting functionality not showing the entire chain or context of exceptions consistently when run with xdist.\n- Issue Source: xdist potentially changes the environment such that chained exceptions are not printed. The relevant functions could involve serialization or representation of exceptions.\n- Expected Result: When using xdist, exception reports should show the entire chain of exceptions just like the single-process execution without xdist.\n- Cause Analysis: The serialization or exception reporting might be losing information about the exception hierarchy or chain during its process.\n- Fix Strategy: Ensure the process for chaining exceptions in the reports is consistent and includes all detailed steps from the chaining process.\n\n## Identification of Symbols Related to the Issue:\n- \"_pytest.reports.BaseReport._to_json\" serializes the report dict which should include handling chains in the exception tracebacks spun.\n- \"_pytest._code.ExceptionInfo.traceback\" tracks how exceptions link up and pass on during serialization.\n- \"_pytest._code.ExceptionInfo.getrepr\" handles the representation of exceptions with chained options.\n- Each symbol affects part of process flow from object instantiation/traceback capture to provides final display output affected multiple sections.\n- Core requirement is ensuring full chain propagation without any losses.",
          "symbols": [
            {
              "name": "_pytest.reports.BaseReport._to_json",
              "file_path": "src/_pytest/reports.py",
              "reason": "The _to_json function returns serialized data, but may not fully capture exception chains when using xdist."
            },
            {
              "name": "_pytest._code.ExceptionInfo.getrepr",
              "file_path": "src/_pytest/_code/code.py",
              "reason": "The getrepr method formats exception info, including tracebacks; it may lack complete handling of chained exceptions, especially in distributed environments."
            }
          ],
          "more_info": [],
          "is_done": false,
          "symbols_scratch_pad": [
            "Analyzing _pytest.reports.BaseReport._to_json:\n- Seems primarily concerned with converting existing exception data into a serializable dict format.\n- Key concern could be the representation handling of 'disassembled_report' if it doesn't cover chained exceptions properly.\n- Assume needs modification to ensure \"reprtraceback\" and \"reprcrash\" deal with multiple linked exceptions in process.",
            "Analyzing _pytest._code.ExceptionInfo.getrepr:\n- Responsible for returning a string representation of the exception.\n- Should inherently support chained exceptions through the \"chain\" parameter, allowing chained exceptions to be included in the output.\n- However, potential loss in serialization might hinder chaining records in process.",
            "Analyzing further ExceptionInfo instances and whether they appropriately manage the capture and relay of complete exception and chaining data internally."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/reports.py",
          "src/_pytest/_code/code.py"
        ],
        "symbols": [
          "_pytest.reports.BaseReport._to_json",
          "_pytest._code.ExceptionInfo.getrepr"
        ],
        "code_spans": {
          "_pytest._code.TracebackEntry": {
            "name": "_pytest._code.TracebackEntry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class TracebackEntry:\n    \"\"\" a single entry in a traceback \"\"\"\n\n    _repr_style = None\n    exprinfo = None\n\n    def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1\n\n    def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode\n\n    @property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)\n\n    @property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno\n\n    def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)\n\n    @property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)\n\n    @property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path\n\n    @property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals\n\n    def getfirstlinesource(self):\n        return self.frame.code.firstlineno\n\n    def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]\n\n    source = property(getsource)\n\n    def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh\n\n    def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)\n\n    @property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 162,
            "start_column": 4698,
            "end_line": 0,
            "end_column": 7955,
            "start_byte": 4698,
            "end_byte": 0
          },
          "_pytest._code.TracebackEntry._repr_style": {
            "name": "_pytest._code.TracebackEntry._repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_repr_style = None",
            "start_line": 165,
            "start_column": 4767,
            "end_line": 4,
            "end_column": 4785,
            "start_byte": 4767,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.exprinfo": {
            "name": "_pytest._code.TracebackEntry.exprinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "exprinfo = None",
            "start_line": 166,
            "start_column": 4790,
            "end_line": 4,
            "end_column": 4805,
            "start_byte": 4790,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.__init__": {
            "name": "_pytest._code.TracebackEntry.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, rawentry, excinfo=None):\n        self._excinfo = excinfo\n        self._rawentry = rawentry\n        self.lineno = rawentry.tb_lineno - 1",
            "start_line": 168,
            "start_column": 4811,
            "end_line": 4,
            "end_column": 4965,
            "start_byte": 4811,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.set_repr_style": {
            "name": "_pytest._code.TracebackEntry.set_repr_style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def set_repr_style(self, mode):\n        assert mode in (\"short\", \"long\")\n        self._repr_style = mode",
            "start_line": 173,
            "start_column": 4971,
            "end_line": 4,
            "end_column": 5075,
            "start_byte": 4971,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.frame": {
            "name": "_pytest._code.TracebackEntry.frame",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def frame(self):\n        import _pytest._code\n\n        return _pytest._code.Frame(self._rawentry.tb_frame)",
            "start_line": 177,
            "start_column": 5081,
            "end_line": 4,
            "end_column": 5201,
            "start_byte": 5081,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.relline": {
            "name": "_pytest._code.TracebackEntry.relline",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def relline(self):\n        return self.lineno - self.frame.code.firstlineno",
            "start_line": 183,
            "start_column": 5207,
            "end_line": 4,
            "end_column": 5296,
            "start_byte": 5207,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.__repr__": {
            "name": "_pytest._code.TracebackEntry.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self):\n        return \"<TracebackEntry %s:%d>\" % (self.frame.code.path, self.lineno + 1)",
            "start_line": 187,
            "start_column": 5302,
            "end_line": 4,
            "end_column": 5403,
            "start_byte": 5302,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.statement": {
            "name": "_pytest._code.TracebackEntry.statement",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def statement(self):\n        \"\"\" _pytest._code.Source object for the current statement \"\"\"\n        source = self.frame.code.fullsource\n        return source.getstatement(self.lineno)",
            "start_line": 190,
            "start_column": 5409,
            "end_line": 4,
            "end_column": 5605,
            "start_byte": 5409,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.path": {
            "name": "_pytest._code.TracebackEntry.path",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def path(self):\n        \"\"\" path to the source code \"\"\"\n        return self.frame.code.path",
            "start_line": 196,
            "start_column": 5611,
            "end_line": 4,
            "end_column": 5716,
            "start_byte": 5611,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.locals": {
            "name": "_pytest._code.TracebackEntry.locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def locals(self):\n        \"\"\" locals of underlaying frame \"\"\"\n        return self.frame.f_locals",
            "start_line": 201,
            "start_column": 5722,
            "end_line": 4,
            "end_column": 5832,
            "start_byte": 5722,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.getfirstlinesource": {
            "name": "_pytest._code.TracebackEntry.getfirstlinesource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getfirstlinesource(self):\n        return self.frame.code.firstlineno",
            "start_line": 206,
            "start_column": 5838,
            "end_line": 4,
            "end_column": 5910,
            "start_byte": 5838,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.getsource": {
            "name": "_pytest._code.TracebackEntry.getsource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getsource(self, astcache=None):\n        \"\"\" return failing source code. \"\"\"\n        # we use the passed in astcache to not reparse asttrees\n        # within exception info printing\n        from _pytest._code.source import getstatementrange_ast\n\n        source = self.frame.code.fullsource\n        if source is None:\n            return None\n        key = astnode = None\n        if astcache is not None:\n            key = self.frame.code.path\n            if key is not None:\n                astnode = astcache.get(key, None)\n        start = self.getfirstlinesource()\n        try:\n            astnode, _, end = getstatementrange_ast(\n                self.lineno, source, astnode=astnode\n            )\n        except SyntaxError:\n            end = self.lineno + 1\n        else:\n            if key is not None:\n                astcache[key] = astnode\n        return source[start:end]",
            "start_line": 209,
            "start_column": 5916,
            "end_line": 4,
            "end_column": 6798,
            "start_byte": 5916,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.source": {
            "name": "_pytest._code.TracebackEntry.source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "source = property(getsource)",
            "start_line": 235,
            "start_column": 6804,
            "end_line": 4,
            "end_column": 6832,
            "start_byte": 6804,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.ishidden": {
            "name": "_pytest._code.TracebackEntry.ishidden",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def ishidden(self):\n        \"\"\" return True if the current frame has a var __tracebackhide__\n            resolving to True.\n\n            If __tracebackhide__ is a callable, it gets called with the\n            ExceptionInfo instance and can decide whether to hide the traceback.\n\n            mostly for internal use\n        \"\"\"\n        f = self.frame\n        tbh = f.f_locals.get(\n            \"__tracebackhide__\", f.f_globals.get(\"__tracebackhide__\", False)\n        )\n        if tbh and callable(tbh):\n            return tbh(None if self._excinfo is None else self._excinfo())\n        return tbh",
            "start_line": 237,
            "start_column": 6838,
            "end_line": 4,
            "end_column": 7432,
            "start_byte": 6838,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.__str__": {
            "name": "_pytest._code.TracebackEntry.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __str__(self):\n        try:\n            fn = str(self.path)\n        except py.error.Error:\n            fn = \"???\"\n        name = self.frame.code.name\n        try:\n            line = str(self.statement).lstrip()\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            line = \"???\"\n        return \"  File %r:%d in %s\\n  %s\\n\" % (fn, self.lineno + 1, name, line)",
            "start_line": 254,
            "start_column": 7438,
            "end_line": 4,
            "end_column": 7833,
            "start_byte": 7438,
            "end_byte": 4
          },
          "_pytest._code.TracebackEntry.name": {
            "name": "_pytest._code.TracebackEntry.name",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def name(self):\n        \"\"\" co_name of underlaying code \"\"\"\n        return self.frame.code.raw.co_name",
            "start_line": 268,
            "start_column": 7839,
            "end_line": 4,
            "end_column": 7955,
            "start_byte": 7839,
            "end_byte": 4
          },
          "_pytest._code.Traceback": {
            "name": "_pytest._code.Traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class Traceback(list):\n    \"\"\" Traceback objects encapsulate and offer higher level\n        access to Traceback entries.\n    \"\"\"\n\n    Entry = TracebackEntry\n\n    def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)\n\n    def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self\n\n    def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val\n\n    def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)\n\n    def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]\n\n    def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 274,
            "start_column": 7958,
            "end_line": 0,
            "end_column": 11818,
            "start_byte": 7958,
            "end_byte": 0
          },
          "_pytest._code.Traceback.Entry": {
            "name": "_pytest._code.Traceback.Entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "Entry = TracebackEntry",
            "start_line": 279,
            "start_column": 8092,
            "end_line": 4,
            "end_column": 8114,
            "start_byte": 8092,
            "end_byte": 4
          },
          "_pytest._code.Traceback.__init__": {
            "name": "_pytest._code.Traceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tb, excinfo=None):\n        \"\"\" initialize from given python traceback object and ExceptionInfo \"\"\"\n        self._excinfo = excinfo\n        if hasattr(tb, \"tb_next\"):\n\n            def f(cur):\n                while cur is not None:\n                    yield self.Entry(cur, excinfo=excinfo)\n                    cur = cur.tb_next\n\n            list.__init__(self, f(tb))\n        else:\n            list.__init__(self, tb)",
            "start_line": 281,
            "start_column": 8120,
            "end_line": 4,
            "end_column": 8555,
            "start_byte": 8120,
            "end_byte": 4
          },
          "_pytest._code.Traceback.cut": {
            "name": "_pytest._code.Traceback.cut",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def cut(self, path=None, lineno=None, firstlineno=None, excludepath=None):\n        \"\"\" return a Traceback instance wrapping part of this Traceback\n\n            by provding any combination of path, lineno and firstlineno, the\n            first frame to start the to-be-returned traceback is determined\n\n            this allows cutting the first part of a Traceback instance e.g.\n            for formatting reasons (removing some uninteresting bits that deal\n            with handling of the exception/traceback)\n        \"\"\"\n        for x in self:\n            code = x.frame.code\n            codepath = code.path\n            if (\n                (path is None or codepath == path)\n                and (\n                    excludepath is None\n                    or not hasattr(codepath, \"relto\")\n                    or not codepath.relto(excludepath)\n                )\n                and (lineno is None or x.lineno == lineno)\n                and (firstlineno is None or x.frame.code.firstlineno == firstlineno)\n            ):\n                return Traceback(x._rawentry, self._excinfo)\n        return self",
            "start_line": 295,
            "start_column": 8561,
            "end_line": 4,
            "end_column": 9668,
            "start_byte": 8561,
            "end_byte": 4
          },
          "_pytest._code.Traceback.__getitem__": {
            "name": "_pytest._code.Traceback.__getitem__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __getitem__(self, key):\n        val = super().__getitem__(key)\n        if isinstance(key, type(slice(0))):\n            val = self.__class__(val)\n        return val",
            "start_line": 321,
            "start_column": 9674,
            "end_line": 4,
            "end_column": 9841,
            "start_byte": 9674,
            "end_byte": 4
          },
          "_pytest._code.Traceback.filter": {
            "name": "_pytest._code.Traceback.filter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def filter(self, fn=lambda x: not x.ishidden()):\n        \"\"\" return a Traceback instance with certain items removed\n\n            fn is a function that gets a single argument, a TracebackEntry\n            instance, and should return True when the item should be added\n            to the Traceback, False when not\n\n            by default this removes all the TracebackEntries which are hidden\n            (see ishidden() above)\n        \"\"\"\n        return Traceback(filter(fn, self), self._excinfo)",
            "start_line": 327,
            "start_column": 9847,
            "end_line": 4,
            "end_column": 10342,
            "start_byte": 9847,
            "end_byte": 4
          },
          "_pytest._code.Traceback.getcrashentry": {
            "name": "_pytest._code.Traceback.getcrashentry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getcrashentry(self):\n        \"\"\" return last non-hidden traceback entry that lead\n        to the exception of a traceback.\n        \"\"\"\n        for i in range(-1, -len(self) - 1, -1):\n            entry = self[i]\n            if not entry.ishidden():\n                return entry\n        return self[-1]",
            "start_line": 339,
            "start_column": 10348,
            "end_line": 4,
            "end_column": 10652,
            "start_byte": 10348,
            "end_byte": 4
          },
          "_pytest._code.Traceback.recursionindex": {
            "name": "_pytest._code.Traceback.recursionindex",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def recursionindex(self):\n        \"\"\" return the index of the frame/TracebackEntry where recursion\n            originates if appropriate, None if no recursion occurred\n        \"\"\"\n        cache = {}\n        for i, entry in enumerate(self):\n            # id for the code.raw is needed to work around\n            # the strange metaprogramming in the decorator lib from pypi\n            # which generates code objects that have hash/value equality\n            # XXX needs a test\n            key = entry.frame.code.path, id(entry.frame.code.raw), entry.lineno\n            # print \"checking for recursion at\", key\n            values = cache.setdefault(key, [])\n            if values:\n                f = entry.frame\n                loc = f.f_locals\n                for otherloc in values:\n                    if f.is_true(\n                        f.eval(\n                            co_equal,\n                            __recursioncache_locals_1=loc,\n                            __recursioncache_locals_2=otherloc,\n                        )\n                    ):\n                        return i\n            values.append(entry.frame.f_locals)\n        return None",
            "start_line": 349,
            "start_column": 10658,
            "end_line": 4,
            "end_column": 11818,
            "start_byte": 10658,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo": {
            "name": "_pytest._code.ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s(repr=False)\nclass ExceptionInfo(Generic[_E]):\n    \"\"\" wraps sys.exc_info() objects and offers\n        help for navigating the traceback.\n    \"\"\"\n\n    _assert_start_repr = \"AssertionError('assert \"\n\n    _excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])\n    _striptext = attr.ib(type=str, default=\"\")\n    _traceback = attr.ib(type=Optional[Traceback], default=None)\n\n    @classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)\n\n    @classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)\n\n    @classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)\n\n    def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info\n\n    @property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]\n\n    @property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]\n\n    @property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]\n\n    @property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__\n\n    @property\n    def traceback(self) -> Traceback:\n        \"\"\"the traceback\"\"\"\n        if self._traceback is None:\n            self._traceback = Traceback(self.tb, excinfo=ref(self))\n        return self._traceback\n\n    @traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value\n\n    def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))\n\n    def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text\n\n    def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)\n\n    def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)\n\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)\n\n    def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 386,
            "start_column": 11961,
            "end_line": 0,
            "end_column": 19503,
            "start_byte": 11961,
            "end_byte": 0
          },
          "_pytest._code.ExceptionInfo._assert_start_repr": {
            "name": "_pytest._code.ExceptionInfo._assert_start_repr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_assert_start_repr = \"AssertionError('assert \"",
            "start_line": 392,
            "start_column": 12119,
            "end_line": 4,
            "end_column": 12165,
            "start_byte": 12119,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo._excinfo": {
            "name": "_pytest._code.ExceptionInfo._excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_excinfo = attr.ib(type=Optional[Tuple[\"Type[_E]\", \"_E\", TracebackType]])",
            "start_line": 394,
            "start_column": 12171,
            "end_line": 4,
            "end_column": 12244,
            "start_byte": 12171,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo._striptext": {
            "name": "_pytest._code.ExceptionInfo._striptext",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_striptext = attr.ib(type=str, default=\"\")",
            "start_line": 395,
            "start_column": 12249,
            "end_line": 4,
            "end_column": 12291,
            "start_byte": 12249,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo._traceback": {
            "name": "_pytest._code.ExceptionInfo._traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "_traceback = attr.ib(type=Optional[Traceback], default=None)",
            "start_line": 396,
            "start_column": 12296,
            "end_line": 4,
            "end_column": 12356,
            "start_byte": 12296,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.from_exc_info": {
            "name": "_pytest._code.ExceptionInfo.from_exc_info",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_exc_info(\n        cls,\n        exc_info: Tuple[\"Type[_E]\", \"_E\", TracebackType],\n        exprinfo: Optional[str] = None,\n    ) -> \"ExceptionInfo[_E]\":\n        \"\"\"returns an ExceptionInfo for an existing exc_info tuple.\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        _striptext = \"\"\n        if exprinfo is None and isinstance(exc_info[1], AssertionError):\n            exprinfo = getattr(exc_info[1], \"msg\", None)\n            if exprinfo is None:\n                exprinfo = saferepr(exc_info[1])\n            if exprinfo and exprinfo.startswith(cls._assert_start_repr):\n                _striptext = \"AssertionError: \"\n\n        return cls(exc_info, _striptext)",
            "start_line": 398,
            "start_column": 12362,
            "end_line": 4,
            "end_column": 13284,
            "start_byte": 12362,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.from_current": {
            "name": "_pytest._code.ExceptionInfo.from_current",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def from_current(\n        cls, exprinfo: Optional[str] = None\n    ) -> \"ExceptionInfo[BaseException]\":\n        \"\"\"returns an ExceptionInfo matching the current traceback\n\n        .. warning::\n\n            Experimental API\n\n\n        :param exprinfo: a text string helping to determine if we should\n                         strip ``AssertionError`` from the output, defaults\n                         to the exception message/``__str__()``\n        \"\"\"\n        tup = sys.exc_info()\n        assert tup[0] is not None, \"no current exception\"\n        assert tup[1] is not None, \"no current exception\"\n        assert tup[2] is not None, \"no current exception\"\n        exc_info = (tup[0], tup[1], tup[2])\n        return cls.from_exc_info(exc_info)",
            "start_line": 425,
            "start_column": 13290,
            "end_line": 4,
            "end_column": 14045,
            "start_byte": 13290,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.for_later": {
            "name": "_pytest._code.ExceptionInfo.for_later",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@classmethod\n    def for_later(cls) -> \"ExceptionInfo[_E]\":\n        \"\"\"return an unfilled ExceptionInfo\n        \"\"\"\n        return cls(None)",
            "start_line": 447,
            "start_column": 14051,
            "end_line": 4,
            "end_column": 14191,
            "start_byte": 14051,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.fill_unfilled": {
            "name": "_pytest._code.ExceptionInfo.fill_unfilled",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def fill_unfilled(self, exc_info: Tuple[\"Type[_E]\", _E, TracebackType]) -> None:\n        \"\"\"fill an unfilled ExceptionInfo created with for_later()\"\"\"\n        assert self._excinfo is None, \"ExceptionInfo was already filled\"\n        self._excinfo = exc_info",
            "start_line": 453,
            "start_column": 14197,
            "end_line": 4,
            "end_column": 14453,
            "start_byte": 14197,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.type": {
            "name": "_pytest._code.ExceptionInfo.type",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def type(self) -> \"Type[_E]\":\n        \"\"\"the exception class\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".type can only be used after the context manager exits\"\n        return self._excinfo[0]",
            "start_line": 458,
            "start_column": 14459,
            "end_line": 4,
            "end_column": 14691,
            "start_byte": 14459,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.value": {
            "name": "_pytest._code.ExceptionInfo.value",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def value(self) -> _E:\n        \"\"\"the exception value\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".value can only be used after the context manager exits\"\n        return self._excinfo[1]",
            "start_line": 466,
            "start_column": 14697,
            "end_line": 4,
            "end_column": 14923,
            "start_byte": 14697,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.tb": {
            "name": "_pytest._code.ExceptionInfo.tb",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def tb(self) -> TracebackType:\n        \"\"\"the exception raw traceback\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".tb can only be used after the context manager exits\"\n        return self._excinfo[2]",
            "start_line": 474,
            "start_column": 14929,
            "end_line": 4,
            "end_column": 15168,
            "start_byte": 14929,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.typename": {
            "name": "_pytest._code.ExceptionInfo.typename",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@property\n    def typename(self) -> str:\n        \"\"\"the type name of the exception\"\"\"\n        assert (\n            self._excinfo is not None\n        ), \".typename can only be used after the context manager exits\"\n        return self.type.__name__",
            "start_line": 482,
            "start_column": 15174,
            "end_line": 4,
            "end_column": 15420,
            "start_byte": 15174,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.traceback": {
            "name": "_pytest._code.ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@traceback.setter\n    def traceback(self, value: Traceback) -> None:\n        self._traceback = value",
            "start_line": 497,
            "start_column": 15642,
            "end_line": 4,
            "end_column": 15742,
            "start_byte": 15642,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.__repr__": {
            "name": "_pytest._code.ExceptionInfo.__repr__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __repr__(self) -> str:\n        if self._excinfo is None:\n            return \"<ExceptionInfo for raises contextmanager>\"\n        return \"<ExceptionInfo %s tblen=%d>\" % (self.typename, len(self.traceback))",
            "start_line": 501,
            "start_column": 15748,
            "end_line": 4,
            "end_column": 15955,
            "start_byte": 15748,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.exconly": {
            "name": "_pytest._code.ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def exconly(self, tryshort: bool = False) -> str:\n        \"\"\" return the exception as a string\n\n            when 'tryshort' resolves to True, and the exception is a\n            _pytest._code._AssertionError, only the actual exception part of\n            the exception representation is returned (so 'AssertionError: ' is\n            removed from the beginning)\n        \"\"\"\n        lines = format_exception_only(self.type, self.value)\n        text = \"\".join(lines)\n        text = text.rstrip()\n        if tryshort:\n            if text.startswith(self._striptext):\n                text = text[len(self._striptext) :]\n        return text",
            "start_line": 506,
            "start_column": 15961,
            "end_line": 4,
            "end_column": 16595,
            "start_byte": 15961,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.errisinstance": {
            "name": "_pytest._code.ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def errisinstance(\n        self, exc: Union[\"Type[BaseException]\", Tuple[\"Type[BaseException]\", ...]]\n    ) -> bool:\n        \"\"\" return True if the exception is an instance of exc \"\"\"\n        return isinstance(self.value, exc)",
            "start_line": 522,
            "start_column": 16601,
            "end_line": 4,
            "end_column": 16827,
            "start_byte": 16601,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo._getreprcrash": {
            "name": "_pytest._code.ExceptionInfo._getreprcrash",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getreprcrash(self) -> \"ReprFileLocation\":\n        exconly = self.exconly(tryshort=True)\n        entry = self.traceback.getcrashentry()\n        path, lineno = entry.frame.code.raw.co_filename, entry.lineno\n        return ReprFileLocation(path, lineno + 1, exconly)",
            "start_line": 528,
            "start_column": 16833,
            "end_line": 4,
            "end_column": 17101,
            "start_byte": 16833,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.getrepr": {
            "name": "_pytest._code.ExceptionInfo.getrepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def getrepr(\n        self,\n        showlocals: bool = False,\n        style: str = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ):\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        fmt = FormattedExcinfo(\n            showlocals=showlocals,\n            style=style,\n            abspath=abspath,\n            tbfilter=tbfilter,\n            funcargs=funcargs,\n            truncate_locals=truncate_locals,\n            chain=chain,\n        )\n        return fmt.repr_excinfo(self)",
            "start_line": 534,
            "start_column": 17107,
            "end_line": 4,
            "end_column": 18918,
            "start_byte": 17107,
            "end_byte": 4
          },
          "_pytest._code.ExceptionInfo.match": {
            "name": "_pytest._code.ExceptionInfo.match",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def match(self, regexp: \"Union[str, Pattern]\") -> bool:\n        \"\"\"\n        Check whether the regular expression 'regexp' is found in the string\n        representation of the exception using ``re.search``. If it matches\n        then True is returned (so that it is possible to write\n        ``assert excinfo.match()``). If it doesn't match an AssertionError is\n        raised.\n        \"\"\"\n        __tracebackhide__ = True\n        if not re.search(regexp, str(self.value)):\n            assert 0, \"Pattern {!r} not found in {!r}\".format(regexp, str(self.value))\n        return True",
            "start_line": 593,
            "start_column": 18924,
            "end_line": 4,
            "end_column": 19503,
            "start_byte": 18924,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo": {
            "name": "_pytest._code.FormattedExcinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "@attr.s\nclass FormattedExcinfo:\n    \"\"\" presenting information about failing Functions and Generators. \"\"\"\n\n    # for traceback entries\n    flow_marker = \">\"\n    fail_marker = \"E\"\n\n    showlocals = attr.ib(default=False)\n    style = attr.ib(default=\"long\")\n    abspath = attr.ib(default=True)\n    tbfilter = attr.ib(default=True)\n    funcargs = attr.ib(default=False)\n    truncate_locals = attr.ib(default=True)\n    chain = attr.ib(default=True)\n    astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)\n\n    def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))\n\n    def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source\n\n    def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)\n\n    def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines\n\n    def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines\n\n    def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)\n\n    def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)\n\n    def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path\n\n    def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)\n\n    def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline\n\n    def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 607,
            "start_column": 19506,
            "end_line": 0,
            "end_column": 29052,
            "start_byte": 19506,
            "end_byte": 0
          },
          "_pytest._code.FormattedExcinfo.flow_marker": {
            "name": "_pytest._code.FormattedExcinfo.flow_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "flow_marker = \">\"",
            "start_line": 612,
            "start_column": 19646,
            "end_line": 4,
            "end_column": 19663,
            "start_byte": 19646,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.fail_marker": {
            "name": "_pytest._code.FormattedExcinfo.fail_marker",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "fail_marker = \"E\"",
            "start_line": 613,
            "start_column": 19668,
            "end_line": 4,
            "end_column": 19685,
            "start_byte": 19668,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.showlocals": {
            "name": "_pytest._code.FormattedExcinfo.showlocals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "showlocals = attr.ib(default=False)",
            "start_line": 615,
            "start_column": 19691,
            "end_line": 4,
            "end_column": 19726,
            "start_byte": 19691,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.style": {
            "name": "_pytest._code.FormattedExcinfo.style",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "style = attr.ib(default=\"long\")",
            "start_line": 616,
            "start_column": 19731,
            "end_line": 4,
            "end_column": 19762,
            "start_byte": 19731,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.abspath": {
            "name": "_pytest._code.FormattedExcinfo.abspath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "abspath = attr.ib(default=True)",
            "start_line": 617,
            "start_column": 19767,
            "end_line": 4,
            "end_column": 19798,
            "start_byte": 19767,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.tbfilter": {
            "name": "_pytest._code.FormattedExcinfo.tbfilter",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "tbfilter = attr.ib(default=True)",
            "start_line": 618,
            "start_column": 19803,
            "end_line": 4,
            "end_column": 19835,
            "start_byte": 19803,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.funcargs": {
            "name": "_pytest._code.FormattedExcinfo.funcargs",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "funcargs = attr.ib(default=False)",
            "start_line": 619,
            "start_column": 19840,
            "end_line": 4,
            "end_column": 19873,
            "start_byte": 19840,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.truncate_locals": {
            "name": "_pytest._code.FormattedExcinfo.truncate_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "truncate_locals = attr.ib(default=True)",
            "start_line": 620,
            "start_column": 19878,
            "end_line": 4,
            "end_column": 19917,
            "start_byte": 19878,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.chain": {
            "name": "_pytest._code.FormattedExcinfo.chain",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "chain = attr.ib(default=True)",
            "start_line": 621,
            "start_column": 19922,
            "end_line": 4,
            "end_column": 19951,
            "start_byte": 19922,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.astcache": {
            "name": "_pytest._code.FormattedExcinfo.astcache",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "astcache = attr.ib(default=attr.Factory(dict), init=False, repr=False)",
            "start_line": 622,
            "start_column": 19956,
            "end_line": 4,
            "end_column": 20026,
            "start_byte": 19956,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo._getindent": {
            "name": "_pytest._code.FormattedExcinfo._getindent",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getindent(self, source):\n        # figure out indent for given source\n        try:\n            s = str(source.getstatement(len(source) - 1))\n        except KeyboardInterrupt:\n            raise\n        except:  # noqa\n            try:\n                s = str(source[-1])\n            except KeyboardInterrupt:\n                raise\n            except:  # noqa\n                return 0\n        return 4 + (len(s) - len(s.lstrip()))",
            "start_line": 624,
            "start_column": 20032,
            "end_line": 4,
            "end_column": 20465,
            "start_byte": 20032,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo._getentrysource": {
            "name": "_pytest._code.FormattedExcinfo._getentrysource",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _getentrysource(self, entry):\n        source = entry.getsource(self.astcache)\n        if source is not None:\n            source = source.deindent()\n        return source",
            "start_line": 639,
            "start_column": 20471,
            "end_line": 4,
            "end_column": 20644,
            "start_byte": 20471,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.repr_args": {
            "name": "_pytest._code.FormattedExcinfo.repr_args",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_args(self, entry):\n        if self.funcargs:\n            args = []\n            for argname, argvalue in entry.frame.getargs(var=True):\n                args.append((argname, saferepr(argvalue)))\n            return ReprFuncArgs(args)",
            "start_line": 645,
            "start_column": 20650,
            "end_line": 4,
            "end_column": 20890,
            "start_byte": 20650,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.get_source": {
            "name": "_pytest._code.FormattedExcinfo.get_source",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_source(self, source, line_index=-1, excinfo=None, short=False):\n        \"\"\" return formatted and marked up source lines. \"\"\"\n        import _pytest._code\n\n        lines = []\n        if source is None or line_index >= len(source.lines):\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        if line_index < 0:\n            line_index += len(source)\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
            "start_line": 652,
            "start_column": 20896,
            "end_line": 4,
            "end_column": 21896,
            "start_byte": 20896,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.get_exconly": {
            "name": "_pytest._code.FormattedExcinfo.get_exconly",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def get_exconly(self, excinfo, indent=4, markall=False):\n        lines = []\n        indent = \" \" * indent\n        # get the real exception information out\n        exlines = excinfo.exconly(tryshort=True).split(\"\\n\")\n        failindent = self.fail_marker + indent[1:]\n        for line in exlines:\n            lines.append(failindent + line)\n            if not markall:\n                failindent = indent\n        return lines",
            "start_line": 676,
            "start_column": 21902,
            "end_line": 4,
            "end_column": 22326,
            "start_byte": 21902,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.repr_locals": {
            "name": "_pytest._code.FormattedExcinfo.repr_locals",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_locals(self, locals):\n        if self.showlocals:\n            lines = []\n            keys = [loc for loc in locals if loc[0] != \"@\"]\n            keys.sort()\n            for name in keys:\n                value = locals[name]\n                if name == \"__builtins__\":\n                    lines.append(\"__builtins__ = <builtins>\")\n                else:\n                    # This formatting could all be handled by the\n                    # _repr() function, which is only reprlib.Repr in\n                    # disguise, so is very configurable.\n                    if self.truncate_locals:\n                        str_repr = saferepr(value)\n                    else:\n                        str_repr = safeformat(value)\n                    # if len(str_repr) < 70 or not isinstance(value,\n                    #                            (list, tuple, dict)):\n                    lines.append(\"{:<10} = {}\".format(name, str_repr))\n                    # else:\n                    #    self._line(\"%-10s =\\\\\" % (name,))\n                    #    # XXX\n                    #    pprint.pprint(value, stream=self.excinfowriter)\n            return ReprLocals(lines)",
            "start_line": 688,
            "start_column": 22332,
            "end_line": 4,
            "end_column": 23498,
            "start_byte": 22332,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.repr_traceback_entry": {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback_entry",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback_entry(self, entry, excinfo=None):\n        import _pytest._code\n\n        source = self._getentrysource(entry)\n        if source is None:\n            source = _pytest._code.Source(\"???\")\n            line_index = 0\n        else:\n            line_index = entry.lineno - entry.getfirstlinesource()\n\n        lines = []\n        style = entry._repr_style\n        if style is None:\n            style = self.style\n        if style in (\"short\", \"long\"):\n            short = style == \"short\"\n            reprargs = self.repr_args(entry) if not short else None\n            s = self.get_source(source, line_index, excinfo, short=short)\n            lines.extend(s)\n            if short:\n                message = \"in %s\" % (entry.name)\n            else:\n                message = excinfo and excinfo.typename or \"\"\n            path = self._makepath(entry.path)\n            filelocrepr = ReprFileLocation(path, entry.lineno + 1, message)\n            localsrepr = None\n            if not short:\n                localsrepr = self.repr_locals(entry.locals)\n            return ReprEntry(lines, reprargs, localsrepr, filelocrepr, style)\n        if excinfo:\n            lines.extend(self.get_exconly(excinfo, indent=4))\n        return ReprEntry(lines, None, None, None, style)",
            "start_line": 714,
            "start_column": 23504,
            "end_line": 4,
            "end_column": 24777,
            "start_byte": 23504,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo._makepath": {
            "name": "_pytest._code.FormattedExcinfo._makepath",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _makepath(self, path):\n        if not self.abspath:\n            try:\n                np = py.path.local().bestrelpath(path)\n            except OSError:\n                return path\n            if len(np) < len(str(path)):\n                path = np\n        return path",
            "start_line": 747,
            "start_column": 24783,
            "end_line": 4,
            "end_column": 25053,
            "start_byte": 24783,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.repr_traceback": {
            "name": "_pytest._code.FormattedExcinfo.repr_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_traceback(self, excinfo):\n        traceback = excinfo.traceback\n        if self.tbfilter:\n            traceback = traceback.filter()\n\n        if excinfo.errisinstance(RecursionError):\n            traceback, extraline = self._truncate_recursive_traceback(traceback)\n        else:\n            extraline = None\n\n        last = traceback[-1]\n        entries = []\n        for index, entry in enumerate(traceback):\n            einfo = (last == entry) and excinfo or None\n            reprentry = self.repr_traceback_entry(entry, einfo)\n            entries.append(reprentry)\n        return ReprTraceback(entries, extraline, style=self.style)",
            "start_line": 757,
            "start_column": 25059,
            "end_line": 4,
            "end_column": 25701,
            "start_byte": 25059,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo._truncate_recursive_traceback": {
            "name": "_pytest._code.FormattedExcinfo._truncate_recursive_traceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def _truncate_recursive_traceback(self, traceback):\n        \"\"\"\n        Truncate the given recursive traceback trying to find the starting point\n        of the recursion.\n\n        The detection is done by going through each traceback entry and finding the\n        point in which the locals of the frame are equal to the locals of a previous frame (see ``recursionindex()``.\n\n        Handle the situation where the recursion process might raise an exception (for example\n        comparing numpy arrays using equality raises a TypeError), in which case we do our best to\n        warn the user of the error and show a limited traceback.\n        \"\"\"\n        try:\n            recursionindex = traceback.recursionindex()\n        except Exception as e:\n            max_frames = 10\n            extraline = (\n                \"!!! Recursion error detected, but an error occurred locating the origin of recursion.\\n\"\n                \"  The following exception happened when comparing locals in the stack frame:\\n\"\n                \"    {exc_type}: {exc_msg}\\n\"\n                \"  Displaying first and last {max_frames} stack frames out of {total}.\"\n            ).format(\n                exc_type=type(e).__name__,\n                exc_msg=str(e),\n                max_frames=max_frames,\n                total=len(traceback),\n            )\n            traceback = traceback[:max_frames] + traceback[-max_frames:]\n        else:\n            if recursionindex is not None:\n                extraline = \"!!! Recursion detected (same locals & position)\"\n                traceback = traceback[: recursionindex + 1]\n            else:\n                extraline = None\n\n        return traceback, extraline",
            "start_line": 775,
            "start_column": 25707,
            "end_line": 4,
            "end_column": 27387,
            "start_byte": 25707,
            "end_byte": 4
          },
          "_pytest._code.FormattedExcinfo.repr_excinfo": {
            "name": "_pytest._code.FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def repr_excinfo(self, excinfo):\n\n        repr_chain = []\n        e = excinfo.value\n        descr = None\n        seen = set()\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo:\n                reprtraceback = self.repr_traceback(excinfo)\n                reprcrash = excinfo._getreprcrash()\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)",
            "start_line": 812,
            "start_column": 27393,
            "end_line": 4,
            "end_column": 29052,
            "start_byte": 27393,
            "end_byte": 4
          },
          "_pytest._code.ExceptionChainRepr": {
            "name": "_pytest._code.ExceptionChainRepr",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ExceptionChainRepr(ExceptionRepr):\n    def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]\n\n    def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 882,
            "start_column": 29762,
            "end_line": 0,
            "end_column": 30319,
            "start_byte": 29762,
            "end_byte": 0
          },
          "_pytest._code.ExceptionChainRepr.__init__": {
            "name": "_pytest._code.ExceptionChainRepr.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, chain):\n        super().__init__()\n        self.chain = chain\n        # reprcrash and reprtraceback of the outermost (the newest) exception\n        # in the chain\n        self.reprtraceback = chain[-1][0]\n        self.reprcrash = chain[-1][1]",
            "start_line": 883,
            "start_column": 29807,
            "end_line": 4,
            "end_column": 30068,
            "start_byte": 29807,
            "end_byte": 4
          },
          "_pytest._code.ExceptionChainRepr.toterminal": {
            "name": "_pytest._code.ExceptionChainRepr.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        for element in self.chain:\n            element[0].toterminal(tw)\n            if element[2] is not None:\n                tw.line(\"\")\n                tw.line(element[2], yellow=True)\n        super().toterminal(tw)",
            "start_line": 891,
            "start_column": 30074,
            "end_line": 4,
            "end_column": 30319,
            "start_byte": 30074,
            "end_byte": 4
          },
          "_pytest._code.ReprExceptionInfo": {
            "name": "_pytest._code.ReprExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprExceptionInfo(ExceptionRepr):\n    def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash\n\n    def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 900,
            "start_column": 30322,
            "end_line": 0,
            "end_column": 30620,
            "start_byte": 30322,
            "end_byte": 0
          },
          "_pytest._code.ReprExceptionInfo.__init__": {
            "name": "_pytest._code.ReprExceptionInfo.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprtraceback, reprcrash):\n        super().__init__()\n        self.reprtraceback = reprtraceback\n        self.reprcrash = reprcrash",
            "start_line": 901,
            "start_column": 30366,
            "end_line": 4,
            "end_column": 30516,
            "start_byte": 30366,
            "end_byte": 4
          },
          "_pytest._code.ReprExceptionInfo.toterminal": {
            "name": "_pytest._code.ReprExceptionInfo.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        self.reprtraceback.toterminal(tw)\n        super().toterminal(tw)",
            "start_line": 906,
            "start_column": 30522,
            "end_line": 4,
            "end_column": 30620,
            "start_byte": 30522,
            "end_byte": 4
          },
          "_pytest._code.ReprTraceback": {
            "name": "_pytest._code.ReprTraceback",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTraceback(TerminalRepr):\n    entrysep = \"_ \"\n\n    def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style\n\n    def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 911,
            "start_column": 30623,
            "end_line": 0,
            "end_column": 31451,
            "start_byte": 30623,
            "end_byte": 0
          },
          "_pytest._code.ReprTraceback.entrysep": {
            "name": "_pytest._code.ReprTraceback.entrysep",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "entrysep = \"_ \"",
            "start_line": 912,
            "start_column": 30662,
            "end_line": 4,
            "end_column": 30677,
            "start_byte": 30662,
            "end_byte": 4
          },
          "_pytest._code.ReprTraceback.__init__": {
            "name": "_pytest._code.ReprTraceback.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, reprentries, extraline, style):\n        self.reprentries = reprentries\n        self.extraline = extraline\n        self.style = style",
            "start_line": 914,
            "start_column": 30683,
            "end_line": 4,
            "end_column": 30834,
            "start_byte": 30683,
            "end_byte": 4
          },
          "_pytest._code.ReprTraceback.toterminal": {
            "name": "_pytest._code.ReprTraceback.toterminal",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def toterminal(self, tw):\n        # the entries might have different styles\n        for i, entry in enumerate(self.reprentries):\n            if entry.style == \"long\":\n                tw.line(\"\")\n            entry.toterminal(tw)\n            if i < len(self.reprentries) - 1:\n                next_entry = self.reprentries[i + 1]\n                if (\n                    entry.style == \"long\"\n                    or entry.style == \"short\"\n                    and next_entry.style == \"long\"\n                ):\n                    tw.sep(self.entrysep)\n\n        if self.extraline:\n            tw.line(self.extraline)",
            "start_line": 919,
            "start_column": 30840,
            "end_line": 4,
            "end_column": 31451,
            "start_byte": 30840,
            "end_byte": 4
          },
          "_pytest._code.ReprTracebackNative": {
            "name": "_pytest._code.ReprTracebackNative",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "class ReprTracebackNative(ReprTraceback):\n    def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 938,
            "start_column": 31454,
            "end_line": 0,
            "end_column": 31642,
            "start_byte": 31454,
            "end_byte": 0
          },
          "_pytest._code.ReprTracebackNative.__init__": {
            "name": "_pytest._code.ReprTracebackNative.__init__",
            "file_path": "src/_pytest/_code/code.py",
            "file_content": "def __init__(self, tblines):\n        self.style = \"native\"\n        self.reprentries = [ReprEntryNative(tblines)]\n        self.extraline = None",
            "start_line": 939,
            "start_column": 31500,
            "end_line": 4,
            "end_column": 31642,
            "start_byte": 31500,
            "end_byte": 4
          },
          "_pytest.assertion.pytest_runtest_teardown": {
            "name": "_pytest.assertion.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call",
            "start_line": 148,
            "start_column": 5001,
            "end_line": 0,
            "end_column": 5096,
            "start_byte": 5001,
            "end_byte": 0
          },
          "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport": {
            "name": "_pytest.cacheprovider.LFPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(star",
            "start_line": 185,
            "start_column": 6538,
            "end_line": 4,
            "end_column": 6784,
            "start_byte": 6538,
            "end_byte": 4
          },
          "_pytest.capture.CaptureManager.pytest_runtest_teardown": {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if",
            "start_line": 226,
            "start_column": 7575,
            "end_line": 4,
            "end_column": 7722,
            "start_byte": 7575,
            "end_byte": 4
          },
          "_pytest.hookspec.pytest_runtest_teardown": {
            "name": "_pytest.hookspec.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "ok.pytest_collectstart(collector=collector)\n    rep = ihook.pytest_make_collect_report(collector=collector)\n    call = rep.__dict__.pop(\"call\", None)\n    if call and check_interactive_exception(call, rep):\n        ihook.pytest_exception_interact(node=collector, call=call, report=rep)\n    return rep\n",
            "start_line": 356,
            "start_column": 11465,
            "end_line": 0,
            "end_column": 11864,
            "start_byte": 11465,
            "end_byte": 0
          },
          "_pytest.hookspec.pytest_runtest_makereport": {
            "name": "_pytest.hookspec.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 366,
            "start_column": 11867,
            "end_line": 0,
            "end_column": 12170,
            "start_byte": 11867,
            "end_byte": 0
          },
          "_pytest.hookspec.pytest_runtest_logreport": {
            "name": "_pytest.hookspec.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 375,
            "start_column": 12173,
            "end_line": 0,
            "end_column": 12322,
            "start_byte": 12173,
            "end_byte": 0
          },
          "_pytest.junitxml.LogXML.pytest_runtest_logreport": {
            "name": "_pytest.junitxml.LogXML.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 534,
            "start_column": 17242,
            "end_line": 4,
            "end_column": 20560,
            "start_byte": 17242,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_teardown": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 572,
            "start_column": 19451,
            "end_line": 4,
            "end_column": 19598,
            "start_byte": 19451,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_logreport": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 589,
            "start_column": 19968,
            "end_line": 4,
            "end_column": 20111,
            "start_byte": 19968,
            "end_byte": 4
          },
          "_pytest.main.Session.pytest_runtest_logreport": {
            "name": "_pytest.main.Session.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 406,
            "start_column": 12313,
            "end_line": 4,
            "end_column": 12675,
            "start_byte": 12313,
            "end_byte": 4
          },
          "_pytest.runner.pytest_runtest_teardown": {
            "name": "_pytest.runner.pytest_runtest_teardown",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_teardown(item, nextitem):\n    _update_current_test_var(item, \"teardown\")\n    item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)",
            "start_line": 128,
            "start_column": 3862,
            "end_line": 0,
            "end_column": 4054,
            "start_byte": 3862,
            "end_byte": 0
          },
          "_pytest.runner.call_and_report": {
            "name": "_pytest.runner.call_and_report",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report",
            "start_line": 165,
            "start_column": 4915,
            "end_line": 0,
            "end_column": 5311,
            "start_byte": 4915,
            "end_byte": 0
          },
          "_pytest.runner.check_interactive_exception": {
            "name": "_pytest.runner.check_interactive_exception",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )",
            "start_line": 176,
            "start_column": 5314,
            "end_line": 0,
            "end_column": 5534,
            "start_byte": 5314,
            "end_byte": 0
          },
          "_pytest.runner.CallInfo.from_call": {
            "name": "_pytest.runner.CallInfo.from_call",
            "file_path": "src/_pytest/runner.py",
            "file_content": "@classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n            result = func()\n        except:  # noqa\n            excinfo = ExceptionInfo.from_current()\n            if reraise is not None and excinfo.errisinstance(reraise):\n                raise\n            result = None\n        stop = time()\n        return cls(start=start, stop=stop, when=when, result=result, excinfo=excinfo)",
            "start_line": 212,
            "start_column": 6300,
            "end_line": 4,
            "end_column": 6846,
            "start_byte": 6300,
            "end_byte": 4
          },
          "_pytest.runner.pytest_runtest_makereport": {
            "name": "_pytest.runner.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "def pytest_runtest_makereport(item, call):\n    return TestReport.from_item_and_call(item, call)",
            "start_line": 241,
            "start_column": 7243,
            "end_line": 0,
            "end_column": 7338,
            "start_byte": 7243,
            "end_byte": 0
          },
          "_pytest.skipping.pytest_runtest_makereport": {
            "name": "_pytest.skipping.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": " item.session._setupstate.teardown_exact(item, nextitem)\n    _update_current_test_var(item, None)\n\n\ndef _update_current_test_var(item, when):\n    \"\"\"\n    Update PYTEST_CURRENT_TEST to reflect the current item and stage.\n\n    If ``when`` is None, delete PYTEST_CURRENT_TEST from the environment.\n    \"\"\"\n    var_name = \"PYTEST_CURRENT_TEST\"\n    if when:\n        value = \"{} ({})\".format(item.nodeid, when)\n        # don't allow null bytes on environment variables (see #2644, #2957)\n        value = value.replace(\"\\x00\", \"(null)\")\n        os.environ[var_name] = value\n    else:\n        os.environ.pop(var_name)\n\n\ndef pytest_report_teststatus(report):\n    if report.when in (\"setup\", \"teardown\"):\n        if report.failed:\n            #      category, shortletter, verbose-word\n            return \"error\", \"E\", \"ERROR\"\n        elif report.skipped:\n            return \"skipped\", \"s\", \"SKIPPED\"\n        else:\n            return \"\", \"\", \"\"\n\n\n#\n# Implementation\n\n\ndef call_and_report(item, when, log=True, **kwds):\n    call = call_runtest_hook(item, when, **kwds)\n    hook = item.ihook\n    report = hook.pytest_runtest_makereport(item=item, call=call)\n    if log:\n        hook.pytest_runtest_logreport(report=report)\n    if check_interactive_exception(call, report):\n        hook.pytest_exception_interact(node=item, call=call, report=report)\n    return report\n\n\ndef check_interactive_exception(call, report):\n    return call.excinfo and not (\n        hasattr(report, \"wasxfail\")\n        or call.excinfo.errisinstance(Skipped)\n        or call.excinfo.errisinstance(bdb.BdbQuit)\n    )\n\n\ndef call_runtest_hook(item, when, **kwds):\n    hookname = \"pytest_runtest_\" + when\n    ihook = getattr(item.ihook, hookname)\n    reraise = (Exit,)\n    if not item.config.getoption(\"usepdb\", False):\n        reraise += (KeyboardInterrupt,)\n    return CallInfo.from_call(\n        lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n\n@attr.s(repr=False)\nclass CallInfo:\n    \"\"\" Result/Exception info a function invocation. \"\"\"\n\n ",
            "start_line": 119,
            "start_column": 3957,
            "end_line": 0,
            "end_column": 5978,
            "start_byte": 3957,
            "end_byte": 0
          },
          "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport": {
            "name": "_pytest.stepwise.StepwisePlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_report(item, \"call\", log))\n    reports.append(call_and_report(item, \"teardown\", log, nextitem=nextitem))\n    # after all teardown hooks have been called\n    # want funcargs and request info to go away\n    if hasrequest:\n        item._request = False\n        item.funcargs = None\n    return reports\n\n\ndef show_test_item(item):\n    \"\"\"Show test function, parameters and the fixtures of the test item.\"\"\"\n    tw = item.config.get_terminal_writer()\n    tw.line()\n    tw.write(\" \" * 8)\n    tw.write(item._nodeid)\n    used_fixtures = sorted(item._fixtureinfo.na",
            "start_line": 72,
            "start_column": 2118,
            "end_line": 4,
            "end_column": 3104,
            "start_byte": 2118,
            "end_byte": 4
          },
          "_pytest.terminal.TerminalReporter.pytest_runtest_logreport": {
            "name": "_pytest.terminal.TerminalReporter.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "",
            "start_line": 385,
            "start_column": 12404,
            "end_line": 4,
            "end_column": 14437,
            "start_byte": 12404,
            "end_byte": 4
          },
          "_pytest.unittest.pytest_runtest_makereport": {
            "name": "_pytest.unittest.pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "None\n    if not call.excinfo:\n        outcome = \"passed\"\n    else:\n        skip_exceptions = [Skipped]\n        unittest = sys.modules.get(\"unittest\")\n        if unittest is not None:\n            skip_exceptions.append(unittest.SkipTest)\n        if call.excinfo.errisinstance(tuple(skip_exceptions)):\n            outcome = \"skipped\"\n            r = collector._repr_failure_py(call.excinfo, \"line\").reprcrash\n            longrepr = (str(r.path), r.lineno, r.message)\n        else:\n            outcome = \"failed\"\n            errorinfo = collector.repr_failure(call.excinfo)\n            if not hasattr(errorinfo, \"toterminal\"):\n      ",
            "start_line": 222,
            "start_column": 7475,
            "end_line": 0,
            "end_column": 8105,
            "start_byte": 7475,
            "end_byte": 0
          },
          "_pytest.resultlog.ResultLog.pytest_runtest_logreport": {
            "name": "_pytest.resultlog.ResultLog.pytest_runtest_logreport",
            "file_path": "src/_pytest/runner.py",
            "file_content": "d=item.nodeid, location=item.location)\n    runtestprotocol(item, nextitem=nextitem)\n    item.ihook.pytest_runtest_logfinish(nodeid=item.nodeid, location=item.location)\n    return True\n\n\ndef runtestprotocol(item, log=True, nextitem=None):\n    hasrequest = hasattr(item, \"_request\")\n    if hasrequest and not item._request:\n        item._initrequest()\n    rep = call_and_report(item, \"setup\", log)\n    reports = [rep]\n    if rep.passed:\n        if item.config.getoption(\"setupshow\", False):\n            show_test_item(item)\n        if not item.config.getoption(\"setuponly\", False):\n            reports.append(call_and_repo",
            "start_line": 61,
            "start_column": 1933,
            "end_line": 4,
            "end_column": 2553,
            "start_byte": 1933,
            "end_byte": 4
          },
          "_pytest.nodes.Node._prunetraceback": {
            "name": "_pytest.nodes.Node._prunetraceback",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _prunetraceback(self, excinfo):\n        pass",
            "start_line": 237,
            "start_column": 7628,
            "end_line": 4,
            "end_column": 7676,
            "start_byte": 7628,
            "end_byte": 4
          },
          "_pytest.nodes.Node._repr_failure_py": {
            "name": "_pytest.nodes.Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def _repr_failure_py(self, excinfo, style=None):\n        if excinfo.errisinstance(fail.Exception):\n            if not excinfo.value.pytrace:\n                return str(excinfo.value)\n        fm = self.session._fixturemanager\n        if excinfo.errisinstance(fm.FixtureLookupError):\n            return excinfo.value.formatrepr()\n        tbfilter = True\n        if self.config.getoption(\"fulltrace\", False):\n            style = \"long\"\n        else:\n            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n            self._prunetraceback(excinfo)\n            if len(excinfo.traceback) == 0:\n                excinfo.traceback = tb\n            tbfilter = False  # prunetraceback already does it\n            if style == \"auto\":\n                style = \"long\"\n        # XXX should excinfo.getrepr record all data and toterminal() process it?\n        if style is None:\n            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n                style = \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"verbose\", 0) > 1:\n            truncate_locals = False\n        else:\n            truncate_locals = True\n\n        try:\n            os.getcwd()\n            abspath = False\n        except OSError:\n            abspath = True\n\n        return excinfo.getrepr(\n            funcargs=True,\n            abspath=abspath,\n            showlocals=self.config.getoption(\"showlocals\", False),\n            style=style,\n            tbfilter=tbfilter,\n            truncate_locals=truncate_locals,\n        )",
            "start_line": 240,
            "start_column": 7682,
            "end_line": 4,
            "end_column": 9224,
            "start_byte": 7682,
            "end_byte": 4
          },
          "_pytest.nodes.Node.repr_failure": {
            "name": "_pytest.nodes.Node.repr_failure",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def repr_failure(self, excinfo, style=None):\n        return self._repr_failure_py(excinfo, style)",
            "start_line": 285,
            "start_column": 9230,
            "end_line": 4,
            "end_column": 9327,
            "start_byte": 9230,
            "end_byte": 4
          },
          "_pytest.reports.BaseReport._to_json": {
            "name": "_pytest.reports.BaseReport._to_json",
            "file_path": "src/_pytest/reports.py",
            "file_content": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }\n\n        d = self.__dict__.copy()\n        if hasattr(self.longrepr, \"toterminal\"):\n            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                self.longrepr, \"reprcrash\"\n            ):\n                d[\"longrepr\"] = disassembled_report(self)\n            else:\n                d[\"longrepr\"] = str(self.longrepr)\n        else:\n            d[\"longrepr\"] = self.longrepr\n        for name in d:\n            if isinstance(d[name], (py.path.local, Path)):\n                d[name] = str(d[name])\n            elif name == \"result\":\n                d[name] = None  # for now\n        return d",
            "start_line": 153,
            "start_column": 4241,
            "end_line": 4,
            "end_column": 5985,
            "start_byte": 4241,
            "end_byte": 4
          }
        }
      }
    }
  ]
}