{
    "file_paths": [
        "src/_pytest/compat.py"
    ],
    "symbols": [
        "_pytest.compat.num_mock_patch_args"
    ],
    "code_spans": {
        "_pytest.hookspec.pytest_pycollect_makeitem": {
            "name": "_pytest.hookspec.pytest_pycollect_makeitem",
            "file_path": "src/_pytest/python.py",
            "file_content": ":\n    return None\n\n\nclass PyobjContext:\n    module = pyobj_property(\"Module\")\n    cls = pyobj_property(\"Class\")\n    instance = pyobj_property(\"Instance\")\n\n\nclass PyobjMixin(PyobjContext):\n    _ALLOW_MARKERS = True\n\n    def ",
            "start_line": 257,
            "start_column": 8306,
            "end_line": 0,
            "end_column": 8529,
            "start_byte": 8306,
            "end_byte": 0
        },
        "_pytest.python.pytest_pycollect_makeitem": {
            "name": "_pytest.python.pytest_pycollect_makeitem",
            "file_path": "src/_pytest/python.py",
            "file_content": "@hookimpl(hookwrapper=True)\ndef pytest_pycollect_makeitem(collector, name, obj):\n    outcome = yield\n    res = outcome.get_result()\n    if res is not None:\n        return\n    # nothing was collected elsewhere, let's do it here\n    if safe_isclass(obj):\n        if collector.istestclass(obj, name):\n            outcome.force_result(Class(name, parent=collector))\n    elif collector.istestfunction(obj, name):\n        # mock seems to store unbound methods (issue473), normalize it\n        obj = getattr(obj, \"__func__\", obj)\n        # We need to try and unwrap the function if it's a functools.partial\n        # or a funtools.wrapped.\n        # We musn't if it's been wrapped with mock.patch (python 2 only)\n        if not (inspect.isfunction(obj) or inspect.isfunction(get_real_func(obj))):\n            filename, lineno = getfslineno(obj)\n            warnings.warn_explicit(\n                message=PytestCollectionWarning(\n                    \"cannot collect %r because it is not a function.\" % name\n                ),\n                category=None,\n                filename=str(filename),\n                lineno=lineno + 1,\n            )\n        elif getattr(obj, \"__test__\", True):\n            if is_generator(obj):\n                res = Function(name, parent=collector)\n                reason = deprecated.YIELD_TESTS.format(name=name)\n                res.add_marker(MARK_GEN.xfail(run=False, reason=reason))\n                res.warn(PytestCollectionWarning(reason))\n            else:\n                res = list(collector._genfunctions(name, obj))\n            outcome.force_result(res)",
            "start_line": 191,
            "start_column": 6658,
            "end_line": 0,
            "end_column": 8246,
            "start_byte": 6658,
            "end_byte": 0
        },
        "_pytest.unittest.pytest_pycollect_makeitem": {
            "name": "_pytest.unittest.pytest_pycollect_makeitem",
            "file_path": "src/_pytest/python.py",
            "file_content": " _pytest.compat import ascii_escaped\nfrom _pytest.compat import get_default_arg_names\nfrom _pytest.compat import get_real_func\nfrom _pytest.compat import getfslineno\nfrom _pytest.compat import getimfunc\nfrom _pytest.compat import getlocation\nfrom _pytest.compat import is_generator\nfrom _pytest.compat import NOTSET\nfrom _pytest.compa",
            "start_line": 15,
            "start_column": 380,
            "end_line": 0,
            "end_column": 714,
            "start_byte": 380,
            "end_byte": 0
        },
        "_pytest.compat.num_mock_patch_args": {
            "name": "_pytest.compat.num_mock_patch_args",
            "file_path": "src/_pytest/compat.py",
            "file_content": "def num_mock_patch_args(function):\n    \"\"\" return number of arguments used up by mock arguments (if any) \"\"\"\n    patchings = getattr(function, \"patchings\", None)\n    if not patchings:\n        return 0\n    mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        return len(\n            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n        )\n    return len(patchings)",
            "start_line": 61,
            "start_column": 1479,
            "end_line": 0,
            "end_column": 1993,
            "start_byte": 1479,
            "end_byte": 0
        }
    }
}