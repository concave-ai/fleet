{
    "file_paths": [
        "src/_pytest/logging.py"
    ],
    "symbols": [
        "_pytest.logging.LogCaptureFixture._finalize",
        "_pytest.logging.LogCaptureFixture.set_level",
        "_pytest.logging.caplog"
    ],
    "code_spans": {
        "_pytest.logging.caplog_handler_key": {
            "name": "_pytest.logging.caplog_handler_key",
            "file_path": "src/_pytest/logging.py",
            "file_content": "caplog_handler_key = StoreKey[\"LogCaptureHandler\"]()",
            "start_line": 36,
            "start_column": 1081,
            "end_line": 0,
            "end_column": 1133,
            "start_byte": 1081,
            "end_byte": 0
        },
        "_pytest.logging.caplog_records_key": {
            "name": "_pytest.logging.caplog_records_key",
            "file_path": "src/_pytest/logging.py",
            "file_content": "caplog_records_key = StoreKey[Dict[str, List[logging.LogRecord]]]()",
            "start_line": 37,
            "start_column": 1134,
            "end_line": 0,
            "end_column": 1201,
            "start_byte": 1134,
            "end_byte": 0
        },
        "_pytest.logging.LogCaptureFixture.set_level": {
            "name": "_pytest.logging.LogCaptureFixture.set_level",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n        \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n        the test.\n\n        :param int level: the logger to level.\n        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be restored to their initial values at the\n            end of the test.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        # save the original log-level to restore it during teardown\n        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n        logger_obj.setLevel(level)\n        self.handler.setLevel(level)",
            "start_line": 421,
            "start_column": 14587,
            "end_line": 4,
            "end_column": 15399,
            "start_byte": 14587,
            "end_byte": 4
        },
        "_pytest.logging.caplog": {
            "name": "_pytest.logging.caplog",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.fixture\ndef caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n    \"\"\"Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.messages        -> list of format-interpolated log messages\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    \"\"\"\n    result = LogCaptureFixture(request.node)\n    yield result\n    result._finalize()",
            "start_line": 460,
            "start_column": 16213,
            "end_line": 0,
            "end_column": 16896,
            "start_byte": 16213,
            "end_byte": 0
        },
        "_pytest.reports.BaseReport.caplog": {
            "name": "_pytest.reports.BaseReport.caplog",
            "file_path": "src/_pytest/logging.py",
            "file_content": "e(logging.PercentStyle):\n    \"\"\"A logging style with special support for multiline messages.\n\n    If the message of a record consists of multiple lines, this style\n    formats the message as if each line were logged separately.\n    \"\"\"\n\n    def __init__(self, fm",
            "start_line": 108,
            "start_column": 3122,
            "end_line": 4,
            "end_column": 3384,
            "start_byte": 3122,
            "end_byte": 4
        },
        "_pytest.logging.LogCaptureFixture._finalize": {
            "name": "_pytest.logging.LogCaptureFixture._finalize",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _finalize(self) -> None:\n        \"\"\"Finalizes the fixture.\n\n        This restores the log levels changed by :meth:`set_level`.\n        \"\"\"\n        # restore log levels\n        for logger_name, level in self._initial_logger_levels.items():\n            logger = logging.getLogger(logger_name)\n            logger.setLevel(level)",
            "start_line": 349,
            "start_column": 12013,
            "end_line": 4,
            "end_column": 12342,
            "start_byte": 12013,
            "end_byte": 4
        }
    }
}