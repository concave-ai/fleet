{
    "file_paths": [
        "src/_pytest/python.py"
    ],
    "symbols": [
        "_pytest.python.PyobjMixin.getmodpath"
    ],
    "code_spans": {
        "_pytest.doctest.DoctestItem.reportinfo": {
            "name": "_pytest.doctest.DoctestItem.reportinfo",
            "file_path": "src/_pytest/nodes.py",
            "file_content": " \"short\"\n            else:\n                style = \"long\"\n\n        if self.config.getoption(\"ve",
            "start_line": 273,
            "start_column": 9251,
            "end_line": 4,
            "end_column": 9346,
            "start_byte": 9251,
            "end_byte": 4
        },
        "_pytest.nodes.Item.reportinfo": {
            "name": "_pytest.nodes.Item.reportinfo",
            "file_path": "src/_pytest/nodes.py",
            "file_content": "def reportinfo(self):\n        return self.fspath, None, \"\"",
            "start_line": 428,
            "start_column": 14305,
            "end_line": 4,
            "end_column": 14363,
            "start_byte": 14305,
            "end_byte": 4
        },
        "_pytest.python.PyobjMixin.getmodpath": {
            "name": "_pytest.python.PyobjMixin.getmodpath",
            "file_path": "src/_pytest/python.py",
            "file_content": "def getmodpath(self, stopatmodule=True, includemodule=False):\n        \"\"\" return python path relative to the containing module. \"\"\"\n        chain = self.listchain()\n        chain.reverse()\n        parts = []\n        for node in chain:\n            if isinstance(node, Instance):\n                continue\n            name = node.name\n            if isinstance(node, Module):\n                name = os.path.splitext(name)[0]\n                if stopatmodule:\n                    if includemodule:\n                        parts.append(name)\n                    break\n            parts.append(name)\n        parts.reverse()\n        s = \".\".join(parts)\n        return s.replace(\".[\", \"[\")",
            "start_line": 270,
            "start_column": 9431,
            "end_line": 4,
            "end_column": 10111,
            "start_byte": 9431,
            "end_byte": 4
        }
    }
}