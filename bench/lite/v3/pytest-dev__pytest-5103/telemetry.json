{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-5103",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-19T13:45:22.776424",
        "usage": "1602.1029949188232 ms"
      },
      "request": {
        "repo_tokens": [
          "showversion",
          "putaround",
          "setenv",
          "CollectError",
          "maketxtfile",
          "get_default_arg_names",
          "pytest_runtest_makereport",
          "Module",
          "pytest_make_collect_report",
          "Cache",
          "LogXML",
          "_is_numpy_array",
          "ecu",
          "get_unpacked_marks",
          "pytest_runtest_setup",
          "ensure_newline",
          "_is_marked_for_rewrite",
          "dummy_context_manager",
          "NodeMarkers",
          "Entry",
          "popcall",
          "pytest_collect_directory",
          "_compare_eq_verbose",
          "keywords",
          "_get_marks",
          "get_lock_path",
          "cls",
          "makeconftest",
          "recursionindex",
          "resume_fixture",
          "pytest_addoption",
          "NoMatch",
          "mkpydir",
          "_is_unittest_unexpected_success_a_failure",
          "write",
          "StepwisePlugin",
          "visit_BoolOp",
          "check_strict_xfail",
          "_format_final_exc_line",
          "fillfixtures",
          "notset",
          "helpconfig",
          "assert_outcomes",
          "funcargnames",
          "_locationline",
          "ReprExceptionInfo",
          "__call__",
          "_rewrite_test",
          "pytest_exception_interact",
          "merge_family",
          "_for_parametrize",
          "annotated_getattr",
          "essential_plugins",
          "get_closest_marker",
          "pytest_warning_captured",
          "_factorytraceback",
          "setupplan",
          "hasplugin",
          "debugging",
          "TestCaseFunction",
          "ConftestImportFailure",
          "resume_global_capture",
          "_config_for_test",
          "activate_fixture",
          "warning_types",
          "_argcomplete",
          "assertoutcome",
          "_getautousenames",
          "FIXTURE_FUNCTION_CALL",
          "getmodulecol",
          "makedir",
          "_import_plugin_specs",
          "_fix_spoof_python2",
          "fullsource",
          "_initini",
          "_get_fixturestack",
          "_init_runner_class",
          "FunctionMixin",
          "explanation_param",
          "PytestCacheWarning",
          "version",
          "listextrakeywords",
          "write_sep",
          "set",
          "push_format_context",
          "line",
          "terminal",
          "addExpectedFailure",
          "reset",
          "ReprFileLocation",
          "exit",
          "pytest_deselected",
          "warn",
          "notify_exception",
          "_getconftest_pathlist",
          "runpython_c",
          "Code",
          "disabled",
          "capsys",
          "compat",
          "doctest_namespace",
          "pytest_itemstart",
          "prog",
          "_PytestWrapper",
          "mode",
          "PYTEST_ENSURETEMP",
          "repr_locals",
          "pytest_report_to_serializable",
          "scope2props",
          "try_cleanup",
          "FixtureManager",
          "fnmatch_lines_random",
          "NodeKeywords",
          "ApproxNumpy",
          "winpymap",
          "inline_runsource",
          "names_closure",
          "writeorg",
          "getpluginversioninfo",
          "Node",
          "get_source",
          "build_summary_stats_line",
          "getlocation",
          "tmpdir_factory",
          "fslocation",
          "_ALLOW_MARKERS",
          "_validate_if_using_arg_names",
          "stop_global_capturing",
          "showfixtures",
          "classnamefilter",
          "Skipped",
          "ExceptionChainRepr",
          "_update_current_test_var",
          "session",
          "repr_traceback_entry",
          "SysModulesSnapshot",
          "instance",
          "_PY3",
          "type",
          "_inject_setup_teardown_fixtures",
          "FormattedExcinfo",
          "PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST",
          "COLLECT_FAKEMODULE_ATTRIBUTES",
          "ReprFailDoctest",
          "syspathinsert",
          "CallSpec2",
          "_checkversion",
          "_match_lines",
          "istext",
          "resolve_fixture_function",
          "from_item",
          "getvalueorskip",
          "visit_Attribute",
          "chdir",
          "_initrequest",
          "_should_rewrite",
          "is_true",
          "add_funcarg_pseudo_fixture_def",
          "deprecated",
          "_resume",
          "_warn_incompatibility_with_xunit2",
          "ReprTracebackNative",
          "_check_initialpaths_for_relpath",
          "EXIT_USAGEERROR",
          "_log_cli_enabled",
          "register",
          "_patched_find_module",
          "_getparser",
          "exec_",
          "deactivate_fixture",
          "getitems",
          "_from_json",
          "getplugin",
          "failed",
          "scopeproperty",
          "is_generator",
          "location",
          "UnitTestCase",
          "_main",
          "FuncFixtureInfo",
          "_saferepr",
          "get_config",
          "get_scope_package",
          "FixtureLookupErrorRepr",
          "assign",
          "_truncate_explanation",
          "tmp_path_factory",
          "ArgumentError",
          "_PY2",
          "_idvalset",
          "getfixtureclosure",
          "params",
          "record_testsuite_property",
          "makeini",
          "freeze_support",
          "own_markers",
          "monkeypatch",
          "__bool__",
          "find_module",
          "_strtobool",
          "_ensure_supporting_files",
          "summary_stats",
          "get_direct_param_fixture_func",
          "re_match_lines",
          "pytest_collectreport",
          "register_assert_rewrite",
          "name2fixturedefs",
          "ApproxSequencelike",
          "isnosetest",
          "_get_plugin_specs_as_list",
          "install_importhook",
          "GETFUNCARGVALUE",
          "SHOW_PYTEST_WARNINGS_ARG",
          "PYTEST_PARAM_UNKNOWN_KWARGS",
          "addini",
          "get_lines_after",
          "__take_sys_modules_snapshot",
          "getsource",
          "getcall",
          "builtin",
          "fail_fixturefunc",
          "PYTEST_LOGWARNING",
          "pytest_ignore_collect",
          "unary_map",
          "_opentestcase",
          "scope2index",
          "PytestDeprecationWarning",
          "consider_module",
          "_parse_lsof_output",
          "hookimpl",
          "summary_warnings",
          "_report_unserialization_failure",
          "safe_isclass",
          "__init__",
          "__array_priority__",
          "__all__",
          "_try_load_conftest",
          "TempPathFactory",
          "deselect_by_keyword",
          "illegal_xml_re",
          "PYTESTER_COPY_EXAMPLE",
          "matchnodes",
          "EXIT_NOTESTSCOLLECTED",
          "showhelp",
          "isdict",
          "summary_failures",
          "spawn_pytest",
          "Failed",
          "istestfunction",
          "__enter__",
          "filename_arg",
          "recwarn",
          "assertion",
          "write_fspath_result",
          "FunctionDefinition",
          "BaseReport",
          "get_exconly",
          "message",
          "write_log_entry",
          "_get_verbose_word",
          "getini",
          "_call_with_optional_argument",
          "_issue_warning_captured",
          "matching_platform",
          "get_parametrized_fixture_keys",
          "readouterr",
          "processoption",
          "_early_rewrite_bailout",
          "fspath",
          "getcrashentry",
          "delattr",
          "fileno",
          "getcfg",
          "addSuccess",
          "EXIT_INTERRUPTED",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "parseconfigure",
          "_PY_DIR",
          "skip",
          "fnmatch_lines",
          "Collector",
          "saferepr",
          "add_cleanup",
          "_getobj",
          "_typ_map",
          "PytestAssertRewriteWarning",
          "_ConfigDeprecated",
          "_perform_collect",
          "_is_capturing",
          "normalize_mark_list",
          "importorskip",
          "source",
          "CACHEDIR_TAG_CONTENT",
          "_repr_style",
          "N",
          "match",
          "MultipleDoctestFailures",
          "MarkDecorator",
          "teardown_nose",
          "ColoredLevelFormatter",
          "_compare_eq_cls",
          "safe_text_dupfile",
          "done",
          "CallInfo",
          "WarningsChecker",
          "_write_pyc",
          "fixture",
          "MonkeyPatch",
          "PY36",
          "getfixturedefs",
          "genitems",
          "_start",
          "fail",
          "filter_traceback",
          "get_data",
          "_get_allow_bytes_flag",
          "entrysep",
          "_callhelper",
          "invalidraise",
          "from_item_and_call",
          "_show_fixtures_per_test",
          "fix_cache_order",
          "Interrupted",
          "getstatementrange",
          "newinstance",
          "iscoroutinefunction",
          "collect",
          "cmdline",
          "variable",
          "run",
          "_compare_eq_sequence",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "pytest_fixture_post_finalizer",
          "collect_by_name",
          "getparent",
          "_set_opt_strings",
          "pytest_unconfigure",
          "get_records",
          "_get_increasing_order",
          "ensuretemp",
          "fixturenames",
          "isparseable",
          "Item",
          "DontReadFromInput",
          "text",
          "matchreport",
          "_pdb_cls",
          "hasopt",
          "verbosity",
          "_check_scope",
          "ParameterSet",
          "raises",
          "Junit",
          "format",
          "_imp_find_module",
          "summary_errors",
          "_determine_show_progress_info",
          "getimfunc",
          "warnings",
          "pytest_logwarning",
          "caplog",
          "_cmp_raises_type_error",
          "_saved",
          "tmpdir",
          "_inject_setup_class_fixture",
          "pytest_doctest_prepare_content",
          "CollectReport",
          "_tryconvertpyarg",
          "cacheprovider",
          "_fillfixtures",
          "when",
          "_legal_ranges",
          "PYC_EXT",
          "PYTEST_WARNS_UNKNOWN_KWARGS",
          "reportinfo",
          "ensure_reset_dir",
          "_enter_pdb",
          "conftest_options",
          "_get_checker",
          "log_outcome",
          "finish",
          "ExceptionRepr",
          "pytest_pyfunc_call",
          "_non_printable_ascii_translate_table",
          "rex_outcome",
          "pytest_addhooks",
          "tb",
          "DEFAULT_LOG_DATE_FORMAT",
          "update_testcase_duration",
          "_makeitem",
          "python_api",
          "linecomp",
          "repr_failure",
          "__array_ufunc__",
          "showheader",
          "pytestPDB",
          "record_testreport",
          "_outrep_summary",
          "listoutcomes",
          "getinicfg",
          "_approx_scalar",
          "_yield_comparisons",
          "DOCTEST_REPORT_CHOICES",
          "junitxml",
          "ReprTraceback",
          "stepwise",
          "CollectErrorRepr",
          "pytest_configure",
          "TYPE_CHECKING",
          "make_hook_recorder",
          "finish_recording",
          "restore",
          "RE_IMPORT_ERROR_NAME",
          "_exec_lsof",
          "istestfunc",
          "IGNORE_PAM",
          "MARK_GEN",
          "finalize",
          "_parsearg",
          "directory_arg",
          "locals",
          "_get_progress_information_message",
          "findsource",
          "pytest_runtest_protocol",
          "CaptureResult",
          "typename",
          "perform_collect",
          "traceback",
          "is_capturing",
          "MarkGenerator",
          "LogCaptureFixture",
          "pytest_collection_finish",
          "LogCaptureHandler",
          "pytest_collectstart",
          "argnames",
          "CaptureManager",
          "isinitpath",
          "RemovedInPytest4Warning",
          "PYTEST_CONFIG_GLOBAL",
          "visit_Assert",
          "resume",
          "_setoption",
          "_matchnodes",
          "_do_configure",
          "get_fslocation_from_item",
          "_attempt_to_close_capture_file",
          "DummyRewriteHook",
          "parse_num",
          "UnformattedWarning",
          "_validate_args",
          "_warn_about_missing_assertion",
          "getnode",
          "_showfixtures_main",
          "parse_hookspec_opts",
          "iter_markers",
          "getstatement",
          "item_capture",
          "LoggingPlugin",
          "import_plugin",
          "pytest_pycollect_makemodule",
          "stop_capturing",
          "pytest_report_header",
          "_notin_text",
          "append_pass",
          "writelines",
          "record_xml_attribute",
          "EXIT_OK",
          "DEFAULT_MAX_CHARS",
          "tolerance",
          "_getreprcrash",
          "_get_override_ini_value",
          "get_terminal_writer",
          "_find_parametrized_scope",
          "getrepr",
          "SysCapture",
          "exprinfo",
          "scopenum_function",
          "FixtureLookupError",
          "frame",
          "names",
          "Mark",
          "EncodedFile",
          "own_mark_names",
          "_splitnode",
          "mark_rewrite",
          "LEVELNAME_FMT_REGEX",
          "get_empty_parameterset_mark",
          "__exit__",
          "_register_with_pkg_resources",
          "LineMatcher",
          "_resolve_arg_value_types",
          "_recursive_debug",
          "parseoutcomes",
          "matchkeyword",
          "setall",
          "isattrs",
          "encoding",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "pytest_enter_pdb",
          "store_mark",
          "_compilecounter",
          "consider_preparse",
          "_get_report_choice",
          "LOGLEVEL_COLOROPTS",
          "runpytest",
          "check_testcase_implements_trial_reporter",
          "MyOptionParser",
          "assertrepr_compare",
          "_show_fixture_action",
          "EXIT_TESTSFAILED",
          "RaisesContext",
          "hookspec",
          "list",
          "_matches_prefix_or_glob_option",
          "_format_assertmsg",
          "_py_ext_re",
          "NoneType",
          "_fix_unittest_skip_decorator",
          "warn_about_none_ast",
          "add_marker",
          "PytestExperimentalApiWarning",
          "generic_visit",
          "make_properties_node",
          "BASE_TYPE",
          "mkdir",
          "RESULT_LOG",
          "get_sections",
          "_getini",
          "make_numbered_dir",
          "setattr",
          "exconly",
          "_repr_failure_py",
          "binop_map",
          "_recursive_list_map",
          "_report_keyboardinterrupt",
          "Parser",
          "FDCaptureBinary",
          "_ensure_unconfigure",
          "check_interactive_exception",
          "DEFAULT_LOG_FORMAT",
          "passed",
          "repr",
          "errors",
          "_assertion_supported",
          "_force_symlink",
          "__unicode__",
          "__len__",
          "catching_logs",
          "style",
          "eval",
          "_read_pyc",
          "print_teardown_sections",
          "NFPlugin",
          "_call_and_format_exception",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "idmaker",
          "show_test_item",
          "exc_clear",
          "rewrite",
          "toterminal",
          "nodes",
          "_get_flag_lookup",
          "_io",
          "builtin_plugins",
          "getargs",
          "getfuncargvalue",
          "BOM_UTF8",
          "addSkip",
          "update",
          "assert_contains",
          "capsysbinary",
          "FastFilesCompleter",
          "append_collect_error",
          "logging",
          "ParsedCall",
          "is_package",
          "parametrize",
          "__str__",
          "_traceback",
          "_get_pos",
          "_sys_snapshot",
          "issequence",
          "suspend_fixture",
          "runtestprotocol",
          "_should_truncate_item",
          "indent",
          "_ensure_only_one_capture_fixture",
          "parse_args",
          "_find_last_non_hidden_frame",
          "skipped",
          "id",
          "getgroup",
          "num_mock_patch_args",
          "cwd_relative_nodeid",
          "MODULE_NOT_FOUND_ERROR",
          "setuponly",
          "_get_xunit_setup_teardown",
          "ishidden",
          "defaultfuncargprefixmarker",
          "_config",
          "REPORT_COLLECTING_RESOLUTION",
          "_printcollecteditems",
          "str",
          "getdecoded",
          "__version_tuple__",
          "set_session",
          "showlocals",
          "error",
          "ids",
          "warns",
          "__version__",
          "raiseerror",
          "FixtureRequest",
          "getslaveinfoline",
          "pathlib",
          "_code",
          "__module__",
          "astcache",
          "_iter_rewritable_modules",
          "SafeRepr",
          "_handle_skip",
          "HookRecorder",
          "README_CONTENT",
          "visit_Compare",
          "record_property",
          "resolve",
          "simple",
          "reorder_items_atscope",
          "read",
          "_validate_usepdb_cls",
          "_getscopeitem",
          "show_fixtures_per_test",
          "runpython",
          "visit_BinOp",
          "_pop_and_teardown",
          "suspend_capturing",
          "Class",
          "set_log_path",
          "_postmortem_traceback",
          "_getpytestargs",
          "_set_initial_conftests",
          "re_match_lines_random",
          "excinfo",
          "CaptureFixture",
          "PrintHelp",
          "cache",
          "messages",
          "capstdout",
          "WarningReport",
          "setns",
          "fromdictargs",
          "PYC_TAIL",
          "runpytest_inprocess",
          "DEFAULT_MAX_LINES",
          "EXIT_INTERNALERROR",
          "summary_passes",
          "_seen",
          "SubRequest",
          "setup",
          "showfspath",
          "getfixturevalue",
          "EMPTY_BUFFER",
          "alias",
          "_addexcinfo",
          "Metafunc",
          "fnmatch_ex",
          "ApproxMapping",
          "_get_active_fixturedef",
          "format_exception_only",
          "LineComp",
          "_striptext",
          "PyobjContext",
          "isdatacls",
          "SysCaptureBinary",
          "find_suffixes",
          "LFPlugin",
          "count_towards_summary",
          "autouse",
          "CLOSE_STDIN",
          "cached_result",
          "PytestConfigWarning",
          "add_report_section",
          "flow_marker",
          "pop",
          "DEFAULT_RELATIVE_TOLERANCE",
          "deindent",
          "_callfinalizers",
          "capfdbinary",
          "Function",
          "WARNS_EXEC",
          "section",
          "_markers",
          "addUnexpectedSuccess",
          "repr_instance",
          "scopename2class",
          "ReprEntryNative",
          "doctest",
          "_get_continue_on_failure",
          "stop",
          "resultlog",
          "MultiCapture",
          "post_mortem",
          "countoutcomes",
          "suspend_global_capture",
          "helper",
          "getoption",
          "append_failure",
          "add_property",
          "write_ensure_prefix",
          "inline_run",
          "_ensure_immutable_ids",
          "teardown_exact",
          "delenv",
          "copy_example",
          "assert_contains_lines",
          "KeywordMapping",
          "truncate_locals",
          "_collect",
          "append",
          "FSCollector",
          "mangle_test_address",
          "value",
          "parse_known_args",
          "pytest_generate_tests",
          "kwargs",
          "FSHookProxy",
          "cache_dir_from_config",
          "Frame",
          "head_line",
          "pytest_sessionstart",
          "find_prefixed",
          "Testdir",
          "get_real_func",
          "get_plugin_manager",
          "_basetemp",
          "repr_args",
          "_cachedir",
          "_patch_unwrap_mock_aware",
          "make_numbered_dir_with_cleanup",
          "_match_lines_random",
          "relline",
          "startTest",
          "getcalls",
          "errisinstance",
          "_check_type",
          "_state",
          "_inject_setup_method_fixture",
          "get",
          "_mark_plugins_for_rewrite",
          "add_stats",
          "_plugin_nameversions",
          "ensure_deletable",
          "_compare_eq_iterable",
          "getfuncargnames",
          "getreportopt",
          "MoreQuietAction",
          "pytest_collection_modifyitems",
          "AssertionState",
          "showlongtestinfo",
          "FixtureFunctionMarker",
          "FIXTURE_NAMED_REQUEST",
          "_non_numeric_type_error",
          "iter_markers_with_node",
          "consider_pluginarg",
          "determine_setup",
          "Traceback",
          "scopes",
          "_suspend",
          "_node_location_to_relpath",
          "safe_getattr",
          "abspath",
          "PytestCollectionWarning",
          "_LiveLoggingStreamHandler",
          "extract_from",
          "ischildnode",
          "_getcapture",
          "_rget_with_confmod",
          "setmulti2",
          "_install_capture_fixture_on_item",
          "tracebackcutdir",
          "_get_non_fixture_func",
          "_consider_importhook",
          "global_and_fixture_disabled",
          "statement",
          "clear",
          "parsefactories",
          "get_skip_exceptions",
          "create_cleanup_lock",
          "_NodeReporter",
          "__delitem__",
          "version_tuple",
          "bin_xml_escape",
          "visit_Call_35",
          "context",
          "short_test_summary",
          "__next__",
          "FDCapture",
          "get_option_ini",
          "runtest",
          "DoctestTextfile",
          "report_collect",
          "addsection",
          "write_captured_output",
          "fail_marker",
          "is_globally_capturing",
          "funcargs",
          "get_public_names",
          "_compare_eq_set",
          "_make_xunit_fixture",
          "to_xml",
          "getexplanation",
          "suspend",
          "_version",
          "get_location",
          "Argument",
          "path",
          "default_plugins",
          "USAGE_MSG",
          "_get_line_with_reprcrash_message",
          "_ensure_basetemp",
          "capture_fixtures",
          "addError",
          "call_optional",
          "_getglobals",
          "hasinit",
          "_warn_already_imported",
          "pytest_report_from_serializable",
          "SEP",
          "start_global_capturing",
          "_addfinalizer",
          "ReprEntry",
          "funcnamefilter",
          "safeformat",
          "_setup_cli_logging",
          "_makepath",
          "_format_action_invocation",
          "FuncargnamesCompatAttr",
          "_getvaluepath",
          "compile",
          "getfailures",
          "SysPathsSnapshot",
          "_get_global_properties_node",
          "getpathnode",
          "_runtest_for",
          "Instance",
          "warning_record_to_str",
          "pytest_report_teststatus",
          "ApproxBase",
          "skipping",
          "Session",
          "addinivalue_line",
          "Exit",
          "_import_pdbcls",
          "path_matches_patterns",
          "makepyfile",
          "Source",
          "_get_runner",
          "getparam",
          "PY35",
          "PytestPluginManager",
          "pytest_collection",
          "__setitem__",
          "_preparse",
          "_running_on_ci",
          "pop_outerr_to_orig",
          "_teardown_yield_fixture",
          "close",
          "at_level",
          "_prepareconfig",
          "PyCollector",
          "DoctestModule",
          "_init_pdb",
          "_inject_setup_function_fixture",
          "start",
          "patchsysdict",
          "_processopt",
          "raise_on_kwargs",
          "longreprtext",
          "TempdirFactory",
          "getfslineno",
          "wrap_session",
          "maybe_delete_a_numbered_dir",
          "pytest_fixture_setup",
          "visit_UnaryOp",
          "pytest_runtest_logreport",
          "ihook",
          "emit",
          "RAISES_MESSAGE_PARAMETER",
          "_log",
          "pytest_runtest_teardown",
          "add_global_property",
          "prepare",
          "ApproxDecimal",
          "getvalue",
          "pytest_load_initial_conftests",
          "pytest_terminal_summary",
          "spawn",
          "outcomes",
          "addoption",
          "result",
          "_compute_fixture_value",
          "ApproxScalar",
          "from_call",
          "getmodpath",
          "_setup_collect_fakemodule",
          "wasvalid",
          "_importconftest",
          "resume_capturing",
          "_tmppath_factory",
          "module",
          "_warn_if_env_name_is_not_str",
          "_prunetraceback",
          "reorder_items",
          "_ascii_escaped_by_config",
          "start_capturing",
          "freeze_includes",
          "pastebin",
          "_test_pytest_function",
          "PytestArg",
          "xfail",
          "node_reporter",
          "tbfilter",
          "_inject_setup_module_fixture",
          "write_line",
          "__nonzero__",
          "parseconfig",
          "gethookproxy",
          "name",
          "pytest_itemcollected",
          "_add_simple",
          "deprecated_call",
          "repr_unicode",
          "append_collect_skipped",
          "_collectfile",
          "python_keywords_allowed_list",
          "register_cleanup_lock_removal",
          "pytest_plugin_registered",
          "pytest_runtest_call",
          "for_config",
          "rmtree",
          "PseudoFixtureDef",
          "_reprcompare",
          "_getcrashline",
          "pytest_cmdline_parse",
          "handler",
          "_readline_workaround",
          "_teardown_towards",
          "_runtest_for_main",
          "_check_record_param_type",
          "_PLUGGY_DIR",
          "_getentrysource",
          "_py36_windowsconsoleio_workaround",
          "create_new_paste",
          "prune_dependency_tree",
          "from_config",
          "pytest_assertrepr_compare",
          "NoCapture",
          "ExceptionInfo",
          "_truncate_recursive_traceback",
          "_format_args",
          "Config",
          "pytest_runtestloop",
          "yield_fixture",
          "_resolve_arg_ids",
          "_colorama_workaround",
          "RunResult",
          "_log_text",
          "out",
          "pytest_runtest_logfinish",
          "_write_progress_information_filling_space",
          "resolve_from_str",
          "readlines",
          "__getitem__",
          "parse_hookimpl_opts",
          "YIELD_TESTS",
          "_get_allow_unicode_flag",
          "teardown_all",
          "_mk_tmp",
          "_importtestmodule",
          "write_docstring",
          "addFailure",
          "PyobjMixin",
          "RN",
          "combined_with",
          "_makefile",
          "unittest",
          "exists",
          "last_failed_paths",
          "pyobj_property",
          "getstatementrange_ast",
          "pytest_sessionfinish",
          "getfirstlinesource",
          "PytestUnknownMarkWarning",
          "scope",
          "find",
          "repr_traceback",
          "TEST_OUTCOME",
          "parse_known_and_unknown_args",
          "runner",
          "applymarker",
          "_pytest",
          "_istrue",
          "_some_str",
          "PdbInvoke",
          "_diff_text",
          "co_equal",
          "DropShorterLongHelpFormatter",
          "pytest_cmdline_main",
          "RAISES_EXEC",
          "_pluginmanager",
          "pytest_cmdline_preparse",
          "formatrepr",
          "isiterable",
          "deselect_by_mark",
          "pytest_make_parametrize_id",
          "pytest_internalerror",
          "get_open_files",
          "pytest_report_collectionfinish",
          "families",
          "_PYTEST_DIR",
          "main",
          "TracebackEntry",
          "_getnextfixturedef",
          "getfailedcollections",
          "chain",
          "add_attribute",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "set_level",
          "call_and_report",
          "visit_Starred",
          "isfunction",
          "catch_warnings_for_item",
          "DOCTEST_REPORT_CHOICE_NONE",
          "get_dirs_from_args",
          "mktemp",
          "__ne__",
          "copy",
          "__test__",
          "OutcomeException",
          "pytestconfig",
          "capstderr",
          "_ensure_removed_sysmodule",
          "from_current",
          "isset",
          "markname",
          "getlocals",
          "_given_basetemp",
          "popen",
          "load_module",
          "_split_explanation",
          "_assert_start_repr",
          "HelpAction",
          "consider_conftest",
          "execute",
          "nextitem",
          "approx",
          "_addoption_instance",
          "LineMatcher_fixture",
          "_excinfo",
          "derive_importpath",
          "_testcase",
          "_iter_all_modules",
          "category",
          "isatty",
          "_to_json",
          "LsofFdLeakChecker",
          "__eq__",
          "_recurse",
          "getrawcode",
          "__setattr__",
          "args",
          "_teardown_with_finalization",
          "pop_format_context",
          "CFG_PYTEST_SECTION",
          "REGEX_TYPE",
          "listchain",
          "_format_boolop",
          "nofuncargs",
          "_in_venv",
          "AssertionRewriter",
          "TimeoutExpired",
          "_call_reprcompare",
          "_format_lines",
          "__missing__",
          "_finalize",
          "File",
          "_matchfactories",
          "addfinalizer",
          "_getconftestmodules",
          "getfixturemarker",
          "PytestWarning",
          "for_later",
          "_genfunctions",
          "_idval",
          "template",
          "parse_setoption",
          "get_statement_startend2",
          "listnames",
          "getbasetemp",
          "_result",
          "FILE_OR_DIR",
          "_trace",
          "EMPTY_PARAMETERSET_OPTION",
          "readline",
          "cookie_re",
          "ASCII_IS_DEFAULT_ENCODING",
          "getreports",
          "visit_Name",
          "_checkargnotcontained",
          "_setup_fixtures",
          "TerminalReporter",
          "__hash__",
          "consider_env",
          "is_rewrite_disabled",
          "call_fixture_func",
          "gethookrecorder",
          "repr_excinfo",
          "syspath_prepend",
          "set_trace",
          "__iter__",
          "get_actual_log_level",
          "XFailed",
          "mark",
          "pytest_pycollect_makeitem",
          "initialnames",
          "UsageError",
          "_getfailureheadline",
          "fixtures",
          "python",
          "istrue",
          "isclass",
          "PdbTrace",
          "record_tuples",
          "_dump_lines",
          "AssertionRewritingHook",
          "call_runtest_hook",
          "Notset",
          "cached_eval",
          "setitem",
          "LOCK_TIMEOUT",
          "_schedule_finalizers",
          "_getlines",
          "cacheshow",
          "TerminalRepr",
          "attrs",
          "snap",
          "undo",
          "_check_all_skipped",
          "_is_mocked",
          "istestclass",
          "_legal_xml_re",
          "buffer",
          "function",
          "visit_Call_legacy",
          "set_repr_style",
          "_addoption",
          "__getattr__",
          "ReprFuncArgs",
          "MarkMapping",
          "append_skipped",
          "wrap_function_to_error_out_if_called_directly",
          "OptionGroup",
          "runitem",
          "collect_one_node",
          "format_explanation",
          "ReprLocals",
          "get_real_method",
          "rewrite_asserts",
          "runpytest_subprocess",
          "PytestUnhandledCoroutineWarning",
          "append_error",
          "testdir",
          "pytest_keyboard_interrupt",
          "_width_of_current_line",
          "display",
          "_bestrelpath_cache",
          "is_potential_nosetest",
          "_truncate_by_char_count",
          "create_terminal_writer",
          "pytester",
          "cut",
          "pytest_collect_file",
          "set_when",
          "ResultLog",
          "FixtureDef",
          "capture",
          "Package",
          "_write_report_lines_from_hooks",
          "_translate_non_printable",
          "records",
          "node",
          "_disable_output_capturing_for_darwin",
          "truncate_if_required",
          "strip",
          "_getindent",
          "scopemismatch",
          "filter",
          "makefile",
          "get_user",
          "read_global_capture",
          "RUNNER_CLASS",
          "reports",
          "_legal_chars",
          "TestReport",
          "SetupState",
          "pytest_runtest_logstart",
          "matchmark",
          "cleanup_numbered_dir",
          "config",
          "extract_suffixes",
          "_folded_skips",
          "tmp_path",
          "check_xfail_no_run",
          "getfixtureinfo",
          "obj",
          "WarningsRecorder",
          "parse",
          "_should_repr_global_name",
          "NOTSET",
          "inline_genitems",
          "set_location",
          "_compare_eq_dict",
          "with_args",
          "stopTest",
          "MarkEvaluator",
          "compile_",
          "delitem",
          "param",
          "get_scope_node",
          "__repr__",
          "getitem",
          "nose",
          "addhooks",
          "capfd",
          "CwdSnapshot",
          "get_optionflags",
          "_is_doctest",
          "DoctestItem",
          "pytest_leave_pdb",
          "_pyfuncitem",
          "_is_setup_py",
          "hasnew",
          "parts",
          "get_common_ancestor",
          "teardown",
          "cleanup_candidates",
          "nodeid"
        ]
      },
      "response": {
        "keywords": [
          "assertion",
          "assertrepr_compare",
          "assertion",
          "pytest_runtest_makereport",
          "pytest_collectreport",
          "assertion",
          "pytest_assertrepr_compare",
          "pytest_internalerror",
          "pytest_report_teststatus"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-19T13:45:24.378539",
        "usage": "264.73188400268555 ms"
      },
      "request": {
        "tokens": [
          "assertion",
          "assertrepr_compare",
          "assertion",
          "pytest_runtest_makereport",
          "pytest_collectreport",
          "assertion",
          "pytest_assertrepr_compare",
          "pytest_internalerror",
          "pytest_report_teststatus"
        ]
      },
      "response": {
        "results": {
          "pytest_collectreport": [
            "src/_pytest/pytester.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/main.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/cacheprovider.py",
            "src/_pytest/stepwise.py",
            "src/_pytest/junitxml.py"
          ],
          "pytest_report_teststatus": [
            "src/_pytest/skipping.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/runner.py",
            "src/_pytest/reports.py"
          ],
          "pytest_runtest_makereport": [
            "src/_pytest/skipping.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/nose.py",
            "src/_pytest/runner.py",
            "src/_pytest/unittest.py"
          ],
          "pytest_internalerror": [
            "src/_pytest/config/__init__.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/junitxml.py",
            "src/_pytest/capture.py",
            "src/_pytest/debugging.py"
          ],
          "assertion": [
            "src/_pytest/pytester.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/assertion/truncate.py",
            "src/_pytest/logging.py",
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/assertion/__init__.py",
            "src/pytest.py",
            "src/_pytest/_code/source.py",
            "src/_pytest/freeze_support.py",
            "src/_pytest/assertion/util.py"
          ],
          "pytest_assertrepr_compare": [
            "src/_pytest/hookspec.py",
            "src/_pytest/assertion/__init__.py"
          ],
          "assertrepr_compare": [
            "src/_pytest/assertion/util.py",
            "src/_pytest/assertion/__init__.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-19T13:45:24.643279",
        "usage": "5148.614883422852 ms"
      },
      "request": {
        "keyword_search_results": {
          "pytest_collectreport": [
            "src/_pytest/pytester.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/main.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/cacheprovider.py",
            "src/_pytest/stepwise.py",
            "src/_pytest/junitxml.py"
          ],
          "pytest_report_teststatus": [
            "src/_pytest/skipping.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/runner.py",
            "src/_pytest/reports.py"
          ],
          "pytest_runtest_makereport": [
            "src/_pytest/skipping.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/nose.py",
            "src/_pytest/runner.py",
            "src/_pytest/unittest.py"
          ],
          "pytest_internalerror": [
            "src/_pytest/config/__init__.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/resultlog.py",
            "src/_pytest/terminal.py",
            "src/_pytest/junitxml.py",
            "src/_pytest/capture.py",
            "src/_pytest/debugging.py"
          ],
          "assertion": [
            "src/_pytest/pytester.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/assertion/truncate.py",
            "src/_pytest/logging.py",
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/assertion/__init__.py",
            "src/pytest.py",
            "src/_pytest/_code/source.py",
            "src/_pytest/freeze_support.py",
            "src/_pytest/assertion/util.py"
          ],
          "pytest_assertrepr_compare": [
            "src/_pytest/hookspec.py",
            "src/_pytest/assertion/__init__.py"
          ],
          "assertrepr_compare": [
            "src/_pytest/assertion/util.py",
            "src/_pytest/assertion/__init__.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is about improving the failure messages when using `all` and `any` assertions in tests by unrolling the iterators to get more detailed reports. The user's example shows how the built-in `assert` messages with `all`/`any` are not very informative, and they propose that pytest could improve this by transforming the assertions in a way similar to a for loop that gives detailed failure messages.\n\nLooking at the keyword search results:\n\n1. The relevant keyword here is likely `assertion` since the problem involves the transformation and reporting of assertion statements.\n   - `src/_pytest/assertion/rewrite.py` is likely highly relevant because rewriting is mentioned, implying changes to how assertions are processed.\n   - `src/_pytest/assertion/util.py` might provide utility functions that could aid in the transformation or processing of assertions.\n   - `src/_pytest/assertion/__init__.py` is likely to be involved in the setup or management of assertion-related operations.\n   \n2. Only assertion-related files should be considered since they are most likely to contain logic for assertion manipulation. Other keywords like `pytest_collectreport`, `pytest_runtest_makereport`, etc., don't directly deal with assertion improvements for better failure messages as described in the problem.\n\nTherefore, the three most relevant files are likely related to the assertion mechanism and its rewriting or utility.",
        "file_paths": [
          "src/_pytest/assertion/rewrite.py",
          "src/_pytest/assertion/util.py",
          "src/_pytest/assertion/__init__.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:45:29.791924",
        "usage": "6812.678098678589 ms"
      },
      "request": {
        "file_path": "src/_pytest/assertion/rewrite.py"
      },
      "response": {
        "scratch_pad": "1. Analyzing User Instructions:\n   - The issue is related to improving assertion error messages when using Python's `all` or `any` functions in tests. The current assertion errors are not descriptive.\n   - The user wants to have meaningful reports similar to what a loop provides without being verbose.\n   - The expectation is for the testing framework to \"unroll\" the iterable and provide detailed information similar to a direct assert, thereby removing the need for writing explicit loops.\n   \n2. Evaluate the provided file content:\n   - The file `src/_pytest/assertion/rewrite.py` deals with rewriting assertion statements in the AST (Abstract Syntax Tree) to produce nice error messages for `pytest`.\n   - The relevant sections are related to how assertions are transformed, mainly within the `AssertionRewriter` class and its methods.\n\n3. Matching symbols to the issue:\n   - `AssertionRewriter` class: This class is specifically designed for rewriting assertion statements for better debugging output.\n   - `AssertionRewriter.visit_Assert()`: This method is responsible for transforming assert statements. It's relevant as it shows how assertions are currently being transformed and could be extended to handle `all` and `any` conditions more descriptively.\n   - `rewrite_asserts()`: Function that applies assertion transformations, which may need adapting to \"unroll\" iterables.\n   - `AssertionRewriter.visit_Call()` or `visit_Call_35()`: These methods handle function calls, including potentially `all()` and `any()`. Could be relevant for detailed checks on the arguments passed into these functions.\n   \n4. Conclusion:\n   - The file is relevant and may play a role in implementing a solution for the issue stated.\n   - The core logic for transforming and improving assertions is here, and adapting this logic could address the concern with `all`/`any`.\n\n5. Suggestions for further analysis if this isn't the complete root cause:\n   - Look into how `_pytest.assertion.util._reprcompare` might provide custom comparison outputs for certain conditions, potentially aiding in providing improved reports for `all`/`any`.\n   - Understanding whether iteration unrolling is naturally supported by the AST or if this requires a specialized visitor logic.",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [],
        "relevant_symbols": [
          "AssertionRewriter",
          "AssertionRewriter.visit_Assert",
          "rewrite_asserts",
          "AssertionRewriter.visit_Call_35",
          "AssertionRewriter.visit_Call"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:45:36.604615",
        "usage": "11095.70288658142 ms"
      },
      "request": {
        "file_path": "src/_pytest/assertion/util.py"
      },
      "response": {
        "scratch_pad": "1. **Analyze User Instructions:**\n   - The user reports that when using `all` or `any` with assertions in pytest, the failure messages are not descriptive.\n   - The issue is that using generator expressions or list comprehensions with these functions only results in a `False` message without context about which element failed the assertion.\n   - The expectation is that failure messages should indicate which elements caused the failure, similar to a for loop approach.\n   - This occurs because `all`/`any` with generator expressions or lists evaluate to a single boolean, losing the detailed context of each element's evaluation.\n\n2. **Make File Evaluation:**\n   - The file `src/_pytest/assertion/util.py` contains various utility functions for assertions, comparison functions, and formatting explanations.\n   - Key functions like `format_explanation`, `_split_explanation`, `_format_lines`, and `assertrepr_compare` are primarily involved in formatting and comparing what gets displayed when assertions fail.\n   - There is no specific handling or expanding of generator expressions or `all`/`any` calls into more detailed explanations in this file.\n   - This file does not appear to contain functionality for unfolding iterators like the user wants from `all`/`any` calls.\n   \n3. **Evaluate Relevance:**\n   - The issue the user faces seems to require changes in how assertions or expressions involving `all`/`any` are rewritten or expanded before evaluation \u2014 possibly within a rewriter or formatter logic.\n   - Since this file deals extensively with formatting and comparison, it could be related if such a feature would require formatting changed data.\n   \n4. **Determine if Root Cause or Relevant:**\n   - The file handles comparison and formatting, not the direct unrolling or handling of generator expressions or assertions using `all`/`any`.\n   - This file is not the root cause but could be relevant for its role in formatting failure messages.\n   \n5. **Identify Relevant Symbols**\n   - Functions handling iterable/sequence comparison might be seen as related: `_compare_eq_sequence`, `_compare_eq_iterable`. However, they don't handle the exact feature request.\n\n6. **Conclusion**\n   - The file is relevant but not the root cause. The exact root change might occur in a rewriter or assertion evaluator section outside the provided file.\n\n7. **Suggest Relevant Files:**\n   - Suggest evaluating the rewriter module that processes `all` and `any` functions during the assertion handling phase.",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/assertion/rewrite.py",
          "src/_pytest/assertion/interp.py"
        ],
        "relevant_symbols": [
          "assertrepr_compare",
          "format_explanation",
          "_compare_eq_sequence",
          "_compare_eq_iterable"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:45:47.700336",
        "usage": "8475.056886672974 ms"
      },
      "request": {
        "file_path": "src/_pytest/assertion/__init__.py"
      },
      "response": {
        "scratch_pad": "1. Analysis of the Issue:\n1.1 The user is experiencing an issue with the lack of meaningful assertion failure messages when using the `all` and `any` built-in Python functions with iterables. Specifically, using generator expressions or list comprehensions with `all()` and `any()` results in uninformative error messages that do not indicate which values caused the assertion to fail.\n\n1.2 The provided reproduction steps showcase three different methods of using `all` with assertions, each yielding different levels of error verbosity. The only method providing detailed context of the failure is the explicit for-loop method, which the user finds verbose compared to using `all`.\n\n1.3 The issue is caused by `all()` and `any()` functions evaluating lazily and returning a single boolean value, leading to generic error messages that don't specify which specific elements failed the predicate check unless handled by a custom reporting mechanism.\n\n1.4 The user expects more detailed assertion failure messages, similar to those produced by using a for-loop. They propose that pytest's assertion rewriter should \"unroll\" the iterable checking into a more explicit form to get better reports.\n\n1.5 Some possible solutions include modifying pytest's assertion rewriter to provide more detailed explanation or logs during assertion failures involving generator expressions or list comprehensions with `all` or `any`. Such a change would require deep inspection and possibly enumerating the indices or elements failing the condition.\n\n2. File Evaluation:\n2.1 The file appears to be involved in assertion handling and report generation within pytest, as it includes logic for setting up hooks and rewriting assertions.\n2.2 Several symbols in the file are related to assertion rewriting and reporting, including `register_assert_rewrite`, `install_importhook`, and `pytest_addoption`, which suggest the file's role in configuring assertion rewriting behavior.\n2.3 However, the specific logic regarding how `all()` or `any()` assertions are rewritten or customized isn't explicitly covered in the file.\n2.4 The actual work of assertion rewriting occurs in calls like `pytest_runtest_setup` and `register_assert_rewrite`, but \n none is directly handling unrolling of iterable assertions.\n\n2.5 Potential areas to investigate further might be in files related to the `rewrite` module because this file mentions `rewrite.AssertionRewritingHook`.\n\nDecision:\n- The file is likely related but doesn't directly address the root issue described by the user concerning unrolling iterables within assertions for the `all` and `any` functions.",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/assertion/rewrite.py"
        ],
        "relevant_symbols": [
          "register_assert_rewrite",
          "install_importhook",
          "pytest_runtest_setup"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-19T13:45:56.175422",
        "usage": "166.03994369506836 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/assertion/rewrite.py",
            "relevant_symbol_keys": [
              "AssertionRewriter",
              "AssertionRewriter.visit_Assert",
              "rewrite_asserts",
              "AssertionRewriter.visit_Call_35",
              "AssertionRewriter.visit_Call"
            ],
            "root_cause_symbol_keys": []
          },
          {
            "file_path": "src/_pytest/assertion/util.py",
            "relevant_symbol_keys": [
              "assertrepr_compare",
              "format_explanation",
              "_compare_eq_sequence",
              "_compare_eq_iterable"
            ],
            "root_cause_symbol_keys": []
          },
          {
            "file_path": "src/_pytest/assertion/__init__.py",
            "relevant_symbol_keys": [
              "register_assert_rewrite",
              "install_importhook",
              "pytest_runtest_setup"
            ],
            "root_cause_symbol_keys": []
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.rewrite_asserts",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def rewrite_asserts(mod, module_path=None, config=None):\n    \"\"\"Rewrite the assert statements in mod.\"\"\"\n    AssertionRewriter(module_path, config).run(mod)",
            "start_line": 465,
            "start_column": 17515,
            "end_line": 0,
            "end_column": 17671,
            "start_byte": 17515,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :on_failure: The AST statements which will be executed if the\n       assertion test fails.  This is the code which will construct\n       the failure message and raises the AssertionError.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    This state is reset on every new assert statement visited and used\n    by the other visitors.\n\n    \"\"\"\n\n    def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config\n\n    def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])\n\n    def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements\n\n    def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])\n\n    def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    # ast.Call signature changed on 3.5,\n    # conditionally change  which methods is named\n    # visit_Call depending on Python version\n    if sys.version_info >= (3, 5):\n        visit_Call = visit_Call_35\n    else:\n        visit_Call = visit_Call_legacy\n\n    def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 607,
            "start_column": 21534,
            "end_line": 0,
            "end_column": 41271,
            "start_byte": 21534,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config",
            "start_line": 659,
            "start_column": 23944,
            "end_line": 4,
            "end_column": 24102,
            "start_byte": 23944,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 664,
            "start_column": 24108,
            "end_line": 4,
            "end_column": 26514,
            "start_byte": 24108,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 729,
            "start_column": 26520,
            "end_line": 4,
            "end_column": 26623,
            "start_byte": 26520,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 733,
            "start_column": 26629,
            "end_line": 4,
            "end_column": 26876,
            "start_byte": 26629,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 740,
            "start_column": 26882,
            "end_line": 4,
            "end_column": 27092,
            "start_byte": 26882,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 746,
            "start_column": 27098,
            "end_line": 4,
            "end_column": 27215,
            "start_byte": 27098,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])",
            "start_line": 750,
            "start_column": 27221,
            "end_line": 4,
            "end_column": 27450,
            "start_byte": 27221,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 756,
            "start_column": 27456,
            "end_line": 4,
            "end_column": 27649,
            "start_byte": 27456,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 761,
            "start_column": 27655,
            "end_line": 4,
            "end_column": 28188,
            "start_byte": 27655,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 774,
            "start_column": 28194,
            "end_line": 4,
            "end_column": 28732,
            "start_byte": 28194,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 788,
            "start_column": 28738,
            "end_line": 4,
            "end_column": 29612,
            "start_byte": 28738,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 807,
            "start_column": 29618,
            "end_line": 4,
            "end_column": 29848,
            "start_byte": 29618,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements",
            "start_line": 813,
            "start_column": 29854,
            "end_line": 4,
            "end_column": 32649,
            "start_byte": 29854,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.warn_about_none_ast",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])",
            "start_line": 880,
            "start_column": 32655,
            "end_line": 4,
            "end_column": 33624,
            "start_byte": 32655,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 907,
            "start_column": 33630,
            "end_line": 4,
            "end_column": 34144,
            "start_byte": 33630,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 917,
            "start_column": 34150,
            "end_line": 4,
            "end_column": 35744,
            "start_byte": 34150,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 952,
            "start_column": 35750,
            "end_line": 4,
            "end_column": 35999,
            "start_byte": 35750,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 958,
            "start_column": 36005,
            "end_line": 4,
            "end_column": 36363,
            "start_byte": 36005,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_35",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 966,
            "start_column": 36369,
            "end_line": 4,
            "end_column": 37404,
            "start_byte": 36369,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 993,
            "start_column": 37410,
            "end_line": 4,
            "end_column": 37652,
            "start_byte": 37410,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_legacy",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 999,
            "start_column": 37658,
            "end_line": 4,
            "end_column": 38842,
            "start_byte": 37658,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1037,
            "start_column": 39105,
            "end_line": 4,
            "end_column": 39536,
            "start_byte": 39105,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1047,
            "start_column": 39542,
            "end_line": 4,
            "end_column": 41271,
            "start_byte": 39542,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "n is not None:\n                        explanation.",
            "start_line": 154,
            "start_column": 5119,
            "end_line": 0,
            "end_column": 5170,
            "start_byte": 5119,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.format_explanation",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def format_explanation(explanation):\n    \"\"\"This formats an explanation\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    explanation = ecu(explanation)\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return u\"\\n\".join(result)",
            "start_line": 30,
            "start_column": 766,
            "end_line": 0,
            "end_column": 1355,
            "start_byte": 766,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def assertrepr_compare(config, op, left, right):\n    \"\"\"Return specialised explanations for some operators/operands\"\"\"\n    width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n    left_repr = saferepr(left, maxsize=int(width // 2))\n    right_repr = saferepr(right, maxsize=width - len(left_repr))\n\n    summary = u\"%s %s %s\" % (ecu(left_repr), op, ecu(right_repr))\n\n    verbose = config.getoption(\"verbose\")\n    explanation = None\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n                    explanation = _compare_eq_dict(left, right, verbose)\n                elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                    type_fn = (isdatacls, isattrs)\n                    explanation = _compare_eq_cls(left, right, verbose, type_fn)\n                elif verbose > 0:\n                    explanation = _compare_eq_verbose(left, right)\n                if isiterable(left) and isiterable(right):\n                    expl = _compare_eq_iterable(left, right, verbose)\n                    if explanation is not None:\n                        explanation.extend(expl)\n                    else:\n                        explanation = expl\n        elif op == \"not in\":\n            if istext(left) and istext(right):\n                explanation = _notin_text(left, right, verbose)\n    except outcomes.Exit:\n        raise\n    except Exception:\n        explanation = [\n            u\"(pytest_assertion plugin: representation of details failed.  \"\n            u\"Probably an object has a faulty __repr__.)\",\n            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n        ]\n\n    if not explanation:\n        return None\n\n    return [summary] + explanation",
            "start_line": 137,
            "start_column": 3642,
            "end_line": 0,
            "end_column": 5775,
            "start_byte": 3642,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion._compare_eq_iterable",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_iterable(left, right, verbose=0):\n    if not verbose:\n        return [u\"Use -v to get the full diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    try:\n        left_formatting = pprint.pformat(left).splitlines()\n        right_formatting = pprint.pformat(right).splitlines()\n        explanation = [u\"Full diff:\"]\n    except Exception:\n        # hack: PrettyPrinter.pformat() in python 2 fails when formatting items that can't be sorted(), ie, calling\n        # sorted() on a list would raise. See issue #718.\n        # As a workaround, the full diff is generated by using the repr() string of each item of each container.\n        left_formatting = sorted(repr(x) for x in left)\n        right_formatting = sorted(repr(x) for x in right)\n        explanation = [u\"Full diff (fallback to calling repr on each item):\"]\n    explanation.extend(\n        line.strip() for line in difflib.ndiff(left_formatting, right_formatting)\n    )\n    return explanation",
            "start_line": 262,
            "start_column": 8366,
            "end_line": 0,
            "end_column": 9347,
            "start_byte": 8366,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion._compare_eq_sequence",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            explanation += [u\"At index %s diff: %r != %r\" % (i, left[i], right[i])]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [u\"%s contains one more item: %s\" % (dir_with_more, extra)]\n        else:\n            explanation += [\n                u\"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation",
            "start_line": 285,
            "start_column": 9350,
            "end_line": 0,
            "end_column": 10256,
            "start_byte": 9350,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "",
            "start_line": 475,
            "start_column": 15508,
            "end_line": 0,
            "end_column": 16001,
            "start_byte": 15508,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.register_assert_rewrite",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def register_assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the given module names are not strings.\n    \"\"\"\n    for name in names:\n        if not isinstance(name, str):\n            msg = \"expected module names as *args, got {0} instead\"\n            raise TypeError(msg.format(repr(names)))\n    for hook in sys.meta_path:\n        if isinstance(hook, rewrite.AssertionRewritingHook):\n            importhook = hook\n            break\n    else:\n        importhook = DummyRewriteHook()\n    importhook.mark_rewrite(*names)",
            "start_line": 33,
            "start_column": 914,
            "end_line": 0,
            "end_column": 1789,
            "start_byte": 914,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.install_importhook",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def install_importhook(config):\n    \"\"\"Try to install the rewrite hook, raise SystemError if it fails.\"\"\"\n    # Jython has an AST bug that make the assertion rewriting hook malfunction.\n    if sys.platform.startswith(\"java\"):\n        raise SystemError(\"rewrite not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook",
            "start_line": 73,
            "start_column": 2157,
            "end_line": 0,
            "end_column": 2865,
            "start_byte": 2157,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def pytest_runtest_setup(item):\n    \"\"\"Setup the pytest_assertrepr_compare hook\n\n    The newinterpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    \"\"\"\n\n    def callbinrepr(op, left, right):\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = item.ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = six.text_type(\"\\n~\").join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n\n    util._reprcompare = callbinrepr",
            "start_line": 103,
            "start_column": 3247,
            "end_line": 0,
            "end_column": 4764,
            "start_byte": 3247,
            "end_byte": 0
          },
          {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 225,
            "start_column": 7460,
            "end_line": 4,
            "end_column": 7601,
            "start_byte": 7460,
            "end_byte": 4
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 349,
            "start_column": 11341,
            "end_line": 0,
            "end_column": 11429,
            "start_byte": 11341,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 541,
            "start_column": 18316,
            "end_line": 4,
            "end_column": 18457,
            "start_byte": 18316,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "interpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_a",
            "start_line": 112,
            "start_column": 3339,
            "end_line": 0,
            "end_column": 3457,
            "start_byte": 3339,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook\n\n\ndef pytest_collection(session):\n    # this hook is only called when test modules are collected\n    # so for example not in the master process of pytest-xdist\n    # (which does not collect test modules)\n    assertstate = getattr(sessi",
            "start_line": 72,
            "start_column": 2418,
            "end_line": 0,
            "end_column": 3101,
            "start_byte": 2418,
            "end_byte": 0
          },
          {
            "name": "_pytest.nose.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the g",
            "start_line": 34,
            "start_column": 927,
            "end_line": 0,
            "end_column": 1339,
            "start_byte": 927,
            "end_byte": 0
          }
        ],
        "root_caused_symbols": []
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-19T13:45:56.341469",
        "usage": "13636.33418083191 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.rewrite_asserts",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def rewrite_asserts(mod, module_path=None, config=None):\n    \"\"\"Rewrite the assert statements in mod.\"\"\"\n    AssertionRewriter(module_path, config).run(mod)",
            "start_line": 465,
            "start_column": 17515,
            "end_line": 0,
            "end_column": 17671,
            "start_byte": 17515,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :on_failure: The AST statements which will be executed if the\n       assertion test fails.  This is the code which will construct\n       the failure message and raises the AssertionError.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    This state is reset on every new assert statement visited and used\n    by the other visitors.\n\n    \"\"\"\n\n    def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config\n\n    def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])\n\n    def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements\n\n    def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])\n\n    def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    # ast.Call signature changed on 3.5,\n    # conditionally change  which methods is named\n    # visit_Call depending on Python version\n    if sys.version_info >= (3, 5):\n        visit_Call = visit_Call_35\n    else:\n        visit_Call = visit_Call_legacy\n\n    def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 607,
            "start_column": 21534,
            "end_line": 0,
            "end_column": 41271,
            "start_byte": 21534,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config",
            "start_line": 659,
            "start_column": 23944,
            "end_line": 4,
            "end_column": 24102,
            "start_byte": 23944,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 664,
            "start_column": 24108,
            "end_line": 4,
            "end_column": 26514,
            "start_byte": 24108,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 729,
            "start_column": 26520,
            "end_line": 4,
            "end_column": 26623,
            "start_byte": 26520,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 733,
            "start_column": 26629,
            "end_line": 4,
            "end_column": 26876,
            "start_byte": 26629,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 740,
            "start_column": 26882,
            "end_line": 4,
            "end_column": 27092,
            "start_byte": 26882,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 746,
            "start_column": 27098,
            "end_line": 4,
            "end_column": 27215,
            "start_byte": 27098,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])",
            "start_line": 750,
            "start_column": 27221,
            "end_line": 4,
            "end_column": 27450,
            "start_byte": 27221,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 756,
            "start_column": 27456,
            "end_line": 4,
            "end_column": 27649,
            "start_byte": 27456,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 761,
            "start_column": 27655,
            "end_line": 4,
            "end_column": 28188,
            "start_byte": 27655,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 774,
            "start_column": 28194,
            "end_line": 4,
            "end_column": 28732,
            "start_byte": 28194,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 788,
            "start_column": 28738,
            "end_line": 4,
            "end_column": 29612,
            "start_byte": 28738,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 807,
            "start_column": 29618,
            "end_line": 4,
            "end_column": 29848,
            "start_byte": 29618,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements",
            "start_line": 813,
            "start_column": 29854,
            "end_line": 4,
            "end_column": 32649,
            "start_byte": 29854,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.warn_about_none_ast",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])",
            "start_line": 880,
            "start_column": 32655,
            "end_line": 4,
            "end_column": 33624,
            "start_byte": 32655,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 907,
            "start_column": 33630,
            "end_line": 4,
            "end_column": 34144,
            "start_byte": 33630,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 917,
            "start_column": 34150,
            "end_line": 4,
            "end_column": 35744,
            "start_byte": 34150,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 952,
            "start_column": 35750,
            "end_line": 4,
            "end_column": 35999,
            "start_byte": 35750,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 958,
            "start_column": 36005,
            "end_line": 4,
            "end_column": 36363,
            "start_byte": 36005,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_35",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 966,
            "start_column": 36369,
            "end_line": 4,
            "end_column": 37404,
            "start_byte": 36369,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 993,
            "start_column": 37410,
            "end_line": 4,
            "end_column": 37652,
            "start_byte": 37410,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_legacy",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 999,
            "start_column": 37658,
            "end_line": 4,
            "end_column": 38842,
            "start_byte": 37658,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1037,
            "start_column": 39105,
            "end_line": 4,
            "end_column": 39536,
            "start_byte": 39105,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1047,
            "start_column": 39542,
            "end_line": 4,
            "end_column": 41271,
            "start_byte": 39542,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "n is not None:\n                        explanation.",
            "start_line": 154,
            "start_column": 5119,
            "end_line": 0,
            "end_column": 5170,
            "start_byte": 5119,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.format_explanation",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def format_explanation(explanation):\n    \"\"\"This formats an explanation\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    explanation = ecu(explanation)\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return u\"\\n\".join(result)",
            "start_line": 30,
            "start_column": 766,
            "end_line": 0,
            "end_column": 1355,
            "start_byte": 766,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def assertrepr_compare(config, op, left, right):\n    \"\"\"Return specialised explanations for some operators/operands\"\"\"\n    width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n    left_repr = saferepr(left, maxsize=int(width // 2))\n    right_repr = saferepr(right, maxsize=width - len(left_repr))\n\n    summary = u\"%s %s %s\" % (ecu(left_repr), op, ecu(right_repr))\n\n    verbose = config.getoption(\"verbose\")\n    explanation = None\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n                    explanation = _compare_eq_dict(left, right, verbose)\n                elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                    type_fn = (isdatacls, isattrs)\n                    explanation = _compare_eq_cls(left, right, verbose, type_fn)\n                elif verbose > 0:\n                    explanation = _compare_eq_verbose(left, right)\n                if isiterable(left) and isiterable(right):\n                    expl = _compare_eq_iterable(left, right, verbose)\n                    if explanation is not None:\n                        explanation.extend(expl)\n                    else:\n                        explanation = expl\n        elif op == \"not in\":\n            if istext(left) and istext(right):\n                explanation = _notin_text(left, right, verbose)\n    except outcomes.Exit:\n        raise\n    except Exception:\n        explanation = [\n            u\"(pytest_assertion plugin: representation of details failed.  \"\n            u\"Probably an object has a faulty __repr__.)\",\n            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n        ]\n\n    if not explanation:\n        return None\n\n    return [summary] + explanation",
            "start_line": 137,
            "start_column": 3642,
            "end_line": 0,
            "end_column": 5775,
            "start_byte": 3642,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion._compare_eq_iterable",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_iterable(left, right, verbose=0):\n    if not verbose:\n        return [u\"Use -v to get the full diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    try:\n        left_formatting = pprint.pformat(left).splitlines()\n        right_formatting = pprint.pformat(right).splitlines()\n        explanation = [u\"Full diff:\"]\n    except Exception:\n        # hack: PrettyPrinter.pformat() in python 2 fails when formatting items that can't be sorted(), ie, calling\n        # sorted() on a list would raise. See issue #718.\n        # As a workaround, the full diff is generated by using the repr() string of each item of each container.\n        left_formatting = sorted(repr(x) for x in left)\n        right_formatting = sorted(repr(x) for x in right)\n        explanation = [u\"Full diff (fallback to calling repr on each item):\"]\n    explanation.extend(\n        line.strip() for line in difflib.ndiff(left_formatting, right_formatting)\n    )\n    return explanation",
            "start_line": 262,
            "start_column": 8366,
            "end_line": 0,
            "end_column": 9347,
            "start_byte": 8366,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion._compare_eq_sequence",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            explanation += [u\"At index %s diff: %r != %r\" % (i, left[i], right[i])]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [u\"%s contains one more item: %s\" % (dir_with_more, extra)]\n        else:\n            explanation += [\n                u\"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation",
            "start_line": 285,
            "start_column": 9350,
            "end_line": 0,
            "end_column": 10256,
            "start_byte": 9350,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "",
            "start_line": 475,
            "start_column": 15508,
            "end_line": 0,
            "end_column": 16001,
            "start_byte": 15508,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.register_assert_rewrite",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def register_assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the given module names are not strings.\n    \"\"\"\n    for name in names:\n        if not isinstance(name, str):\n            msg = \"expected module names as *args, got {0} instead\"\n            raise TypeError(msg.format(repr(names)))\n    for hook in sys.meta_path:\n        if isinstance(hook, rewrite.AssertionRewritingHook):\n            importhook = hook\n            break\n    else:\n        importhook = DummyRewriteHook()\n    importhook.mark_rewrite(*names)",
            "start_line": 33,
            "start_column": 914,
            "end_line": 0,
            "end_column": 1789,
            "start_byte": 914,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.install_importhook",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def install_importhook(config):\n    \"\"\"Try to install the rewrite hook, raise SystemError if it fails.\"\"\"\n    # Jython has an AST bug that make the assertion rewriting hook malfunction.\n    if sys.platform.startswith(\"java\"):\n        raise SystemError(\"rewrite not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook",
            "start_line": 73,
            "start_column": 2157,
            "end_line": 0,
            "end_column": 2865,
            "start_byte": 2157,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def pytest_runtest_setup(item):\n    \"\"\"Setup the pytest_assertrepr_compare hook\n\n    The newinterpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    \"\"\"\n\n    def callbinrepr(op, left, right):\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = item.ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = six.text_type(\"\\n~\").join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n\n    util._reprcompare = callbinrepr",
            "start_line": 103,
            "start_column": 3247,
            "end_line": 0,
            "end_column": 4764,
            "start_byte": 3247,
            "end_byte": 0
          },
          {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 225,
            "start_column": 7460,
            "end_line": 4,
            "end_column": 7601,
            "start_byte": 7460,
            "end_byte": 4
          },
          {
            "name": "_pytest.hookspec.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 349,
            "start_column": 11341,
            "end_line": 0,
            "end_column": 11429,
            "start_byte": 11341,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 541,
            "start_column": 18316,
            "end_line": 4,
            "end_column": 18457,
            "start_byte": 18316,
            "end_byte": 4
          },
          {
            "name": "_pytest.runner.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "interpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_a",
            "start_line": 112,
            "start_column": 3339,
            "end_line": 0,
            "end_column": 3457,
            "start_byte": 3339,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook\n\n\ndef pytest_collection(session):\n    # this hook is only called when test modules are collected\n    # so for example not in the master process of pytest-xdist\n    # (which does not collect test modules)\n    assertstate = getattr(sessi",
            "start_line": 72,
            "start_column": 2418,
            "end_line": 0,
            "end_column": 3101,
            "start_byte": 2418,
            "end_byte": 0
          },
          {
            "name": "_pytest.nose.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the g",
            "start_line": 34,
            "start_column": 927,
            "end_line": 0,
            "end_column": 1339,
            "start_byte": 927,
            "end_byte": 0
          }
        ],
        "root_caused_symbols": []
      },
      "response": {
        "scratch_pad": "1. **Understanding the Issue**:\n   - The issue is about enhancing the failure messages of `all` and `any` calls in assertions in Python tests using `pytest`. Currently, using `all` or `any` in assertions does not provide detailed failure messages. The user suggests unrolling the iterable to provide more informative messages similar to the ones when using explicit for loops.\n   - The failure messages for `all` or `any` are not informative because they do not specify which specific element failed the condition. This is typical with these constructs since they only return a boolean.\n   - To resolve this issue moving from `all`/`any` to an unrolled `for` loop is proposed, but the user prefers to keep using `all`/`any` with improved failure messages.\n\n2. **Evaluating Existing Symbols**:\n   - `_pytest.assertion.rewrite_asserts`: This function calls `AssertionRewriter.run()`, which is part of the mechanism to rewrite assert statements for better error messages. This suggests `run()` or related methods might be where changes are needed.\n   - `_pytest.assertion.AssertionRewriter`: The class responsible for rewriting assertions. It processes AST nodes, specifically assert statements, and rewrites them for enhanced reporting.\n   - `_pytest.assertion.AssertionRewriter.visit_Assert`: This method rewrites the assert statements and is likely where we could hook into or modify the behavior of `all` or `any`. Enhancing this to iterate elements and provide specific failure messages could solve the issue.\n\n3. **Decision Making**:\n   - To resolve this specific issue, changes would likely need to be made within the `visit_Assert` method of the `AssertionRewriter` class. This method could be modified to recognize `all` or `any` constructs and iterate over their elements to provide detailed failure messages.\n   - Other methods like `generic_visit`, `visit_BoolOp`, and `visit_Compare` might indirectly relate but won't be the primary focus.\n   - Some helper functions or additional methods may need to be implemented to specifically address the unrolling of iterables, but those would depend on the details of the `visit_Assert` modifications.",
        "symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "reason": "This function handles assert statement visiting and rewriting, which is the core of generating a detailed failure message. Enhancing the detection of `all` or `any` constructs and iterating through their elements for detailed explanation can be integrated here."
          }
        ],
        "more_info": [],
        "is_done": true,
        "symbols_scratch_pad": [
          "- **Symbol**: `_pytest.assertion.rewrite_asserts`\n  - This function applies the assertion rewrites by delegating to `AssertionRewriter.run()`. It acts as an entry point to start rewriting assertions and is indirectly relevant as modification will be in `AssertionRewriter` class.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter`\n  - The main class for rewriting assertions using AST nodes. This class is very relevant as it contains all logic for rewriting assertions for better error reporting. Changes needed to unroll iterables and improve reporting for `all`/`any` would likely be integrated here.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.__init__`\n  - The constructor initializes the rewriter instance with configurations needed. Direct changes to this method seem unlikely but may require additional initializations dependent on the rewrite logic changes.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.run`\n  - Manages collecting assert statements in a module for rewriting. It's relevant as this method's operations call and leverage `visit_Assert`, where modifications would take place.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.visit_Assert`\n  - This function is responsible for rewriting assert statements entirely. This is the core method that would need to be modified to handle `all`/`any` constructs with iterable details, making it highly relevant.\n\n- Other helper functions (visit methods, utilities) assist the processing and are indirectly related, ensuring correct processing of other AST nodes, but visit_Assert is the primary focus."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-19T13:46:09.977857",
        "usage": "1.9888877868652344 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest.assertion.rewrite_asserts",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def rewrite_asserts(mod, module_path=None, config=None):\n    \"\"\"Rewrite the assert statements in mod.\"\"\"\n    AssertionRewriter(module_path, config).run(mod)",
              "start_line": 465,
              "start_column": 17515,
              "end_line": 0,
              "end_column": 17671,
              "start_byte": 17515,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.AssertionRewriter",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :on_failure: The AST statements which will be executed if the\n       assertion test fails.  This is the code which will construct\n       the failure message and raises the AssertionError.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    This state is reset on every new assert statement visited and used\n    by the other visitors.\n\n    \"\"\"\n\n    def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config\n\n    def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])\n\n    def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements\n\n    def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])\n\n    def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    # ast.Call signature changed on 3.5,\n    # conditionally change  which methods is named\n    # visit_Call depending on Python version\n    if sys.version_info >= (3, 5):\n        visit_Call = visit_Call_35\n    else:\n        visit_Call = visit_Call_legacy\n\n    def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
              "start_line": 607,
              "start_column": 21534,
              "end_line": 0,
              "end_column": 41271,
              "start_byte": 21534,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.__init__",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config",
              "start_line": 659,
              "start_column": 23944,
              "end_line": 4,
              "end_column": 24102,
              "start_byte": 23944,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.run",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
              "start_line": 664,
              "start_column": 24108,
              "end_line": 4,
              "end_column": 26514,
              "start_byte": 24108,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring",
              "start_line": 729,
              "start_column": 26520,
              "end_line": 4,
              "end_column": 26623,
              "start_byte": 26520,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.variable",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
              "start_line": 733,
              "start_column": 26629,
              "end_line": 4,
              "end_column": 26876,
              "start_byte": 26629,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.assign",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
              "start_line": 740,
              "start_column": 26882,
              "end_line": 4,
              "end_column": 27092,
              "start_byte": 26882,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.display",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
              "start_line": 746,
              "start_column": 27098,
              "end_line": 4,
              "end_column": 27215,
              "start_byte": 27098,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.helper",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])",
              "start_line": 750,
              "start_column": 27221,
              "end_line": 4,
              "end_column": 27450,
              "start_byte": 27221,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.builtin",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
              "start_line": 756,
              "start_column": 27456,
              "end_line": 4,
              "end_column": 27649,
              "start_byte": 27456,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.explanation_param",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
              "start_line": 761,
              "start_column": 27655,
              "end_line": 4,
              "end_column": 28188,
              "start_byte": 27655,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.push_format_context",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)",
              "start_line": 774,
              "start_column": 28194,
              "end_line": 4,
              "end_column": 28732,
              "start_byte": 28194,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
              "start_line": 788,
              "start_column": 28738,
              "end_line": 4,
              "end_column": 29612,
              "start_byte": 28738,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.generic_visit",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
              "start_line": 807,
              "start_column": 29618,
              "end_line": 4,
              "end_column": 29848,
              "start_byte": 29618,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements",
              "start_line": 813,
              "start_column": 29854,
              "end_line": 4,
              "end_column": 32649,
              "start_byte": 29854,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.warn_about_none_ast",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])",
              "start_line": 880,
              "start_column": 32655,
              "end_line": 4,
              "end_column": 33624,
              "start_byte": 32655,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Name",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)",
              "start_line": 907,
              "start_column": 33630,
              "end_line": 4,
              "end_column": 34144,
              "start_byte": 33630,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
              "start_line": 917,
              "start_column": 34150,
              "end_line": 4,
              "end_column": 35744,
              "start_byte": 34150,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
              "start_line": 952,
              "start_column": 35750,
              "end_line": 4,
              "end_column": 35999,
              "start_byte": 35750,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
              "start_line": 958,
              "start_column": 36005,
              "end_line": 4,
              "end_column": 36363,
              "start_byte": 36005,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Call_35",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
              "start_line": 966,
              "start_column": 36369,
              "end_line": 4,
              "end_column": 37404,
              "start_byte": 36369,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
              "start_line": 993,
              "start_column": 37410,
              "end_line": 4,
              "end_column": 37652,
              "start_byte": 37410,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Call_legacy",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
              "start_line": 999,
              "start_column": 37658,
              "end_line": 4,
              "end_column": 38842,
              "start_byte": 37658,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
              "start_line": 1037,
              "start_column": 39105,
              "end_line": 4,
              "end_column": 39536,
              "start_byte": 39105,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
              "start_line": 1047,
              "start_column": 39542,
              "end_line": 4,
              "end_column": 41271,
              "start_byte": 39542,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.pytest_assertrepr_compare",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "n is not None:\n                        explanation.",
              "start_line": 154,
              "start_column": 5119,
              "end_line": 0,
              "end_column": 5170,
              "start_byte": 5119,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.format_explanation",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "def format_explanation(explanation):\n    \"\"\"This formats an explanation\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    explanation = ecu(explanation)\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return u\"\\n\".join(result)",
              "start_line": 30,
              "start_column": 766,
              "end_line": 0,
              "end_column": 1355,
              "start_byte": 766,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.assertrepr_compare",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "def assertrepr_compare(config, op, left, right):\n    \"\"\"Return specialised explanations for some operators/operands\"\"\"\n    width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n    left_repr = saferepr(left, maxsize=int(width // 2))\n    right_repr = saferepr(right, maxsize=width - len(left_repr))\n\n    summary = u\"%s %s %s\" % (ecu(left_repr), op, ecu(right_repr))\n\n    verbose = config.getoption(\"verbose\")\n    explanation = None\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n                    explanation = _compare_eq_dict(left, right, verbose)\n                elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                    type_fn = (isdatacls, isattrs)\n                    explanation = _compare_eq_cls(left, right, verbose, type_fn)\n                elif verbose > 0:\n                    explanation = _compare_eq_verbose(left, right)\n                if isiterable(left) and isiterable(right):\n                    expl = _compare_eq_iterable(left, right, verbose)\n                    if explanation is not None:\n                        explanation.extend(expl)\n                    else:\n                        explanation = expl\n        elif op == \"not in\":\n            if istext(left) and istext(right):\n                explanation = _notin_text(left, right, verbose)\n    except outcomes.Exit:\n        raise\n    except Exception:\n        explanation = [\n            u\"(pytest_assertion plugin: representation of details failed.  \"\n            u\"Probably an object has a faulty __repr__.)\",\n            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n        ]\n\n    if not explanation:\n        return None\n\n    return [summary] + explanation",
              "start_line": 137,
              "start_column": 3642,
              "end_line": 0,
              "end_column": 5775,
              "start_byte": 3642,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion._compare_eq_iterable",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "def _compare_eq_iterable(left, right, verbose=0):\n    if not verbose:\n        return [u\"Use -v to get the full diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    try:\n        left_formatting = pprint.pformat(left).splitlines()\n        right_formatting = pprint.pformat(right).splitlines()\n        explanation = [u\"Full diff:\"]\n    except Exception:\n        # hack: PrettyPrinter.pformat() in python 2 fails when formatting items that can't be sorted(), ie, calling\n        # sorted() on a list would raise. See issue #718.\n        # As a workaround, the full diff is generated by using the repr() string of each item of each container.\n        left_formatting = sorted(repr(x) for x in left)\n        right_formatting = sorted(repr(x) for x in right)\n        explanation = [u\"Full diff (fallback to calling repr on each item):\"]\n    explanation.extend(\n        line.strip() for line in difflib.ndiff(left_formatting, right_formatting)\n    )\n    return explanation",
              "start_line": 262,
              "start_column": 8366,
              "end_line": 0,
              "end_column": 9347,
              "start_byte": 8366,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion._compare_eq_sequence",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "def _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            explanation += [u\"At index %s diff: %r != %r\" % (i, left[i], right[i])]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [u\"%s contains one more item: %s\" % (dir_with_more, extra)]\n        else:\n            explanation += [\n                u\"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation",
              "start_line": 285,
              "start_column": 9350,
              "end_line": 0,
              "end_column": 10256,
              "start_byte": 9350,
              "end_byte": 0
            },
            {
              "name": "_pytest.hookspec.pytest_assertrepr_compare",
              "file_path": "src/_pytest/assertion/util.py",
              "file_content": "",
              "start_line": 475,
              "start_column": 15508,
              "end_line": 0,
              "end_column": 16001,
              "start_byte": 15508,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.register_assert_rewrite",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "def register_assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the given module names are not strings.\n    \"\"\"\n    for name in names:\n        if not isinstance(name, str):\n            msg = \"expected module names as *args, got {0} instead\"\n            raise TypeError(msg.format(repr(names)))\n    for hook in sys.meta_path:\n        if isinstance(hook, rewrite.AssertionRewritingHook):\n            importhook = hook\n            break\n    else:\n        importhook = DummyRewriteHook()\n    importhook.mark_rewrite(*names)",
              "start_line": 33,
              "start_column": 914,
              "end_line": 0,
              "end_column": 1789,
              "start_byte": 914,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.install_importhook",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "def install_importhook(config):\n    \"\"\"Try to install the rewrite hook, raise SystemError if it fails.\"\"\"\n    # Jython has an AST bug that make the assertion rewriting hook malfunction.\n    if sys.platform.startswith(\"java\"):\n        raise SystemError(\"rewrite not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook",
              "start_line": 73,
              "start_column": 2157,
              "end_line": 0,
              "end_column": 2865,
              "start_byte": 2157,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "def pytest_runtest_setup(item):\n    \"\"\"Setup the pytest_assertrepr_compare hook\n\n    The newinterpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    \"\"\"\n\n    def callbinrepr(op, left, right):\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = item.ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = six.text_type(\"\\n~\").join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n\n    util._reprcompare = callbinrepr",
              "start_line": 103,
              "start_column": 3247,
              "end_line": 0,
              "end_column": 4764,
              "start_byte": 3247,
              "end_byte": 0
            },
            {
              "name": "_pytest.capture.CaptureManager.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "",
              "start_line": 225,
              "start_column": 7460,
              "end_line": 4,
              "end_column": 7601,
              "start_byte": 7460,
              "end_byte": 4
            },
            {
              "name": "_pytest.hookspec.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "",
              "start_line": 349,
              "start_column": 11341,
              "end_line": 0,
              "end_column": 11429,
              "start_byte": 11341,
              "end_byte": 0
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "",
              "start_line": 541,
              "start_column": 18316,
              "end_line": 4,
              "end_column": 18457,
              "start_byte": 18316,
              "end_byte": 4
            },
            {
              "name": "_pytest.runner.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "interpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_a",
              "start_line": 112,
              "start_column": 3339,
              "end_line": 0,
              "end_column": 3457,
              "start_byte": 3339,
              "end_byte": 0
            },
            {
              "name": "_pytest.skipping.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook\n\n\ndef pytest_collection(session):\n    # this hook is only called when test modules are collected\n    # so for example not in the master process of pytest-xdist\n    # (which does not collect test modules)\n    assertstate = getattr(sessi",
              "start_line": 72,
              "start_column": 2418,
              "end_line": 0,
              "end_column": 3101,
              "start_byte": 2418,
              "end_byte": 0
            },
            {
              "name": "_pytest.nose.pytest_runtest_setup",
              "file_path": "src/_pytest/assertion/__init__.py",
              "file_content": "assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the g",
              "start_line": 34,
              "start_column": 927,
              "end_line": 0,
              "end_column": 1339,
              "start_byte": 927,
              "end_byte": 0
            }
          ],
          "root_caused_symbols": []
        },
        "symbols_evaluate": {
          "scratch_pad": "1. **Understanding the Issue**:\n   - The issue is about enhancing the failure messages of `all` and `any` calls in assertions in Python tests using `pytest`. Currently, using `all` or `any` in assertions does not provide detailed failure messages. The user suggests unrolling the iterable to provide more informative messages similar to the ones when using explicit for loops.\n   - The failure messages for `all` or `any` are not informative because they do not specify which specific element failed the condition. This is typical with these constructs since they only return a boolean.\n   - To resolve this issue moving from `all`/`any` to an unrolled `for` loop is proposed, but the user prefers to keep using `all`/`any` with improved failure messages.\n\n2. **Evaluating Existing Symbols**:\n   - `_pytest.assertion.rewrite_asserts`: This function calls `AssertionRewriter.run()`, which is part of the mechanism to rewrite assert statements for better error messages. This suggests `run()` or related methods might be where changes are needed.\n   - `_pytest.assertion.AssertionRewriter`: The class responsible for rewriting assertions. It processes AST nodes, specifically assert statements, and rewrites them for enhanced reporting.\n   - `_pytest.assertion.AssertionRewriter.visit_Assert`: This method rewrites the assert statements and is likely where we could hook into or modify the behavior of `all` or `any`. Enhancing this to iterate elements and provide specific failure messages could solve the issue.\n\n3. **Decision Making**:\n   - To resolve this specific issue, changes would likely need to be made within the `visit_Assert` method of the `AssertionRewriter` class. This method could be modified to recognize `all` or `any` constructs and iterate over their elements to provide detailed failure messages.\n   - Other methods like `generic_visit`, `visit_BoolOp`, and `visit_Compare` might indirectly relate but won't be the primary focus.\n   - Some helper functions or additional methods may need to be implemented to specifically address the unrolling of iterables, but those would depend on the details of the `visit_Assert` modifications.",
          "symbols": [
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "reason": "This function handles assert statement visiting and rewriting, which is the core of generating a detailed failure message. Enhancing the detection of `all` or `any` constructs and iterating through their elements for detailed explanation can be integrated here."
            }
          ],
          "more_info": [],
          "is_done": true,
          "symbols_scratch_pad": [
            "- **Symbol**: `_pytest.assertion.rewrite_asserts`\n  - This function applies the assertion rewrites by delegating to `AssertionRewriter.run()`. It acts as an entry point to start rewriting assertions and is indirectly relevant as modification will be in `AssertionRewriter` class.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter`\n  - The main class for rewriting assertions using AST nodes. This class is very relevant as it contains all logic for rewriting assertions for better error reporting. Changes needed to unroll iterables and improve reporting for `all`/`any` would likely be integrated here.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.__init__`\n  - The constructor initializes the rewriter instance with configurations needed. Direct changes to this method seem unlikely but may require additional initializations dependent on the rewrite logic changes.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.run`\n  - Manages collecting assert statements in a module for rewriting. It's relevant as this method's operations call and leverage `visit_Assert`, where modifications would take place.\n\n- **Symbol**: `_pytest.assertion.AssertionRewriter.visit_Assert`\n  - This function is responsible for rewriting assert statements entirely. This is the core method that would need to be modified to handle `all`/`any` constructs with iterable details, making it highly relevant.\n\n- Other helper functions (visit methods, utilities) assist the processing and are indirectly related, ensuring correct processing of other AST nodes, but visit_Assert is the primary focus."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/assertion/rewrite.py"
        ],
        "symbols": [
          "_pytest.assertion.AssertionRewriter.visit_Assert"
        ],
        "code_spans": {
          "_pytest.assertion.rewrite_asserts": {
            "name": "_pytest.assertion.rewrite_asserts",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def rewrite_asserts(mod, module_path=None, config=None):\n    \"\"\"Rewrite the assert statements in mod.\"\"\"\n    AssertionRewriter(module_path, config).run(mod)",
            "start_line": 465,
            "start_column": 17515,
            "end_line": 0,
            "end_column": 17671,
            "start_byte": 17515,
            "end_byte": 0
          },
          "_pytest.assertion.AssertionRewriter": {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :on_failure: The AST statements which will be executed if the\n       assertion test fails.  This is the code which will construct\n       the failure message and raises the AssertionError.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    This state is reset on every new assert statement visited and used\n    by the other visitors.\n\n    \"\"\"\n\n    def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config\n\n    def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])\n\n    def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements\n\n    def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])\n\n    def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl\n\n    # ast.Call signature changed on 3.5,\n    # conditionally change  which methods is named\n    # visit_Call depending on Python version\n    if sys.version_info >= (3, 5):\n        visit_Call = visit_Call_35\n    else:\n        visit_Call = visit_Call_legacy\n\n    def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 607,
            "start_column": 21534,
            "end_line": 0,
            "end_column": 41271,
            "start_byte": 21534,
            "end_byte": 0
          },
          "_pytest.assertion.AssertionRewriter.__init__": {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(self, module_path, config):\n        super(AssertionRewriter, self).__init__()\n        self.module_path = module_path\n        self.config = config",
            "start_line": 659,
            "start_column": 23944,
            "end_line": 4,
            "end_column": 24102,
            "start_byte": 23944,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.run": {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod):\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n        # Insert some special imports at the top of the module but after any\n        # docstrings and __future__ imports.\n        aliases = [\n            ast.alias(six.moves.builtins.__name__, \"@py_builtins\"),\n            ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n        ]\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        lineno = 1\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Str)\n            ):\n                doc = item.value.s\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                not isinstance(item, ast.ImportFrom)\n                or item.level > 0\n                or item.module != \"__future__\"\n            ):\n                lineno = item.lineno\n                break\n            pos += 1\n        else:\n            lineno = item.lineno\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n        # Collect asserts.\n        nodes = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 664,
            "start_column": 24108,
            "end_line": 4,
            "end_column": 26514,
            "start_byte": 24108,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.is_rewrite_disabled": {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring):\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 729,
            "start_column": 26520,
            "end_line": 4,
            "end_column": 26623,
            "start_byte": 26520,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.variable": {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self):\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 733,
            "start_column": 26629,
            "end_line": 4,
            "end_column": 26876,
            "start_byte": 26629,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.assign": {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr):\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 740,
            "start_column": 26882,
            "end_line": 4,
            "end_column": 27092,
            "start_byte": 26882,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.display": {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr):\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 746,
            "start_column": 27098,
            "end_line": 4,
            "end_column": 27215,
            "start_byte": 27098,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.helper": {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name, *args):\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast_Call(attr, list(args), [])",
            "start_line": 750,
            "start_column": 27221,
            "end_line": 4,
            "end_column": 27450,
            "start_byte": 27221,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.builtin": {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name):\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 756,
            "start_column": 27456,
            "end_line": 4,
            "end_column": 27649,
            "start_byte": 27456,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.explanation_param": {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr):\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 761,
            "start_column": 27655,
            "end_line": 4,
            "end_column": 28188,
            "start_byte": 27655,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.push_format_context": {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self):\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n\n        \"\"\"\n        self.explanation_specifiers = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 774,
            "start_column": 28194,
            "end_line": 4,
            "end_column": 28732,
            "start_byte": 28194,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.pop_format_context": {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr):\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an ast.Str instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .on_failure and\n        return the ast.Name instance of the formatted string.\n\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Str(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 788,
            "start_column": 28738,
            "end_line": 4,
            "end_column": 29612,
            "start_byte": 28738,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.generic_visit": {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node):\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 807,
            "start_column": 29618,
            "end_line": 4,
            "end_column": 29848,
            "start_byte": 29618,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Assert": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_):\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=str(self.module_path),\n                lineno=assert_.lineno,\n            )\n\n        self.statements = []\n        self.variables = []\n        self.variable_counter = itertools.count()\n        self.stack = []\n        self.on_failure = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n        if self.module_path is not None:\n            self.statements.append(\n                self.warn_about_none_ast(\n                    top_condition, module_path=self.module_path, lineno=assert_.lineno\n                )\n            )\n        # Create failure message.\n        body = self.on_failure\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n        self.statements.append(ast.If(negation, body, []))\n        if assert_.msg:\n            assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n            explanation = \"\\n>assert \" + explanation\n        else:\n            assertmsg = ast.Str(\"\")\n            explanation = \"assert \" + explanation\n        template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n        msg = self.pop_format_context(template)\n        fmt = self.helper(\"_format_explanation\", msg)\n        err_name = ast.Name(\"AssertionError\", ast.Load())\n        exc = ast_Call(err_name, [fmt], [])\n        if sys.version_info[0] >= 3:\n            raise_ = ast.Raise(exc, None)\n        else:\n            raise_ = ast.Raise(exc, None, None)\n        body.append(raise_)\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, _NameConstant(None))\n            self.statements.append(clear)\n        # Fix line numbers.\n        for stmt in self.statements:\n            set_location(stmt, assert_.lineno, assert_.col_offset)\n        return self.statements",
            "start_line": 813,
            "start_column": 29854,
            "end_line": 4,
            "end_column": 32649,
            "start_byte": 29854,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.warn_about_none_ast": {
            "name": "_pytest.assertion.AssertionRewriter.warn_about_none_ast",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def warn_about_none_ast(self, node, module_path, lineno):\n        \"\"\"\n        Returns an AST issuing a warning if the value of node is `None`.\n        This is used to warn the user when asserting a function that asserts\n        internally already.\n        See issue #3191 for more details.\n        \"\"\"\n\n        # Using parse because it is different between py2 and py3.\n        AST_NONE = ast.parse(\"None\").body[0].value\n        val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n        send_warning = ast.parse(\n            \"\"\"\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom warnings import warn_explicit\nwarn_explicit(\n    PytestAssertRewriteWarning('asserting the value None, please use \"assert is None\"'),\n    category=None,\n    filename={filename!r},\n    lineno={lineno},\n)\n            \"\"\".format(\n                filename=module_path.strpath, lineno=lineno\n            )\n        ).body\n        return ast.If(val_is_none, send_warning, [])",
            "start_line": 880,
            "start_column": 32655,
            "end_line": 4,
            "end_column": 33624,
            "start_byte": 32655,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Name": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name):\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast_Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 907,
            "start_column": 33630,
            "end_line": 4,
            "end_column": 34144,
            "start_byte": 33630,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_BoolOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop):\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.on_failure\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner = []\n                # cond is set in a prior loop iteration below\n                self.on_failure.append(ast.If(cond, fail_inner, []))  # noqa\n                self.on_failure = fail_inner\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Str(expl))\n            call = ast_Call(app, [expl_format], [])\n            self.on_failure.append(ast.Expr(call))\n            if i < levels:\n                cond = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.on_failure = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 917,
            "start_column": 34150,
            "end_line": 4,
            "end_column": 35744,
            "start_byte": 34150,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_UnaryOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary):\n        pattern = unary_map[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 952,
            "start_column": 35750,
            "end_line": 4,
            "end_column": 35999,
            "start_byte": 35750,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_BinOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop):\n        symbol = binop_map[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 958,
            "start_column": 36005,
            "end_line": 4,
            "end_column": 36363,
            "start_byte": 36005,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Call_35": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_35",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_35(self, call):\n        \"\"\"\n        visit `ast.Call` nodes on Python3.5 and after\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 966,
            "start_column": 36369,
            "end_line": 4,
            "end_column": 37404,
            "start_byte": 36369,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Starred": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred):\n        # From Python 3.5, a Starred node can appear in a function call\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 993,
            "start_column": 37410,
            "end_line": 4,
            "end_column": 37652,
            "start_byte": 37410,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Call_legacy": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call_legacy",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call_legacy(self, call):\n        \"\"\"\n        visit `ast.Call nodes on 3.4 and below`\n        \"\"\"\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        new_star = new_kwarg = None\n        for arg in call.args:\n            res, expl = self.visit(arg)\n            new_args.append(res)\n            arg_expls.append(expl)\n        for keyword in call.keywords:\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            arg_expls.append(keyword.arg + \"=\" + expl)\n        if call.starargs:\n            new_star, expl = self.visit(call.starargs)\n            arg_expls.append(\"*\" + expl)\n        if call.kwargs:\n            new_kwarg, expl = self.visit(call.kwargs)\n            arg_expls.append(\"**\" + expl)\n        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n        return res, outer_expl",
            "start_line": 999,
            "start_column": 37658,
            "end_line": 4,
            "end_column": 38842,
            "start_byte": 37658,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Attribute": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr):\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1037,
            "start_column": 39105,
            "end_line": 4,
            "end_column": 39536,
            "start_byte": 39105,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Compare": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp):\n        self.push_format_context()\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = \"({})\".format(left_expl)\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = \"({})\".format(next_expl)\n            results.append(next_res)\n            sym = binop_map[op.__class__]\n            syms.append(ast.Str(sym))\n            expl = \"%s %s %s\" % (left_expl, sym, next_expl)\n            expls.append(ast.Str(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1047,
            "start_column": 39542,
            "end_line": 4,
            "end_column": 41271,
            "start_byte": 39542,
            "end_byte": 4
          },
          "_pytest.assertion.pytest_assertrepr_compare": {
            "name": "_pytest.assertion.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "n is not None:\n                        explanation.",
            "start_line": 154,
            "start_column": 5119,
            "end_line": 0,
            "end_column": 5170,
            "start_byte": 5119,
            "end_byte": 0
          },
          "_pytest.assertion.format_explanation": {
            "name": "_pytest.assertion.format_explanation",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def format_explanation(explanation):\n    \"\"\"This formats an explanation\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    explanation = ecu(explanation)\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return u\"\\n\".join(result)",
            "start_line": 30,
            "start_column": 766,
            "end_line": 0,
            "end_column": 1355,
            "start_byte": 766,
            "end_byte": 0
          },
          "_pytest.assertion.assertrepr_compare": {
            "name": "_pytest.assertion.assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def assertrepr_compare(config, op, left, right):\n    \"\"\"Return specialised explanations for some operators/operands\"\"\"\n    width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n    left_repr = saferepr(left, maxsize=int(width // 2))\n    right_repr = saferepr(right, maxsize=width - len(left_repr))\n\n    summary = u\"%s %s %s\" % (ecu(left_repr), op, ecu(right_repr))\n\n    verbose = config.getoption(\"verbose\")\n    explanation = None\n    try:\n        if op == \"==\":\n            if istext(left) and istext(right):\n                explanation = _diff_text(left, right, verbose)\n            else:\n                if issequence(left) and issequence(right):\n                    explanation = _compare_eq_sequence(left, right, verbose)\n                elif isset(left) and isset(right):\n                    explanation = _compare_eq_set(left, right, verbose)\n                elif isdict(left) and isdict(right):\n                    explanation = _compare_eq_dict(left, right, verbose)\n                elif type(left) == type(right) and (isdatacls(left) or isattrs(left)):\n                    type_fn = (isdatacls, isattrs)\n                    explanation = _compare_eq_cls(left, right, verbose, type_fn)\n                elif verbose > 0:\n                    explanation = _compare_eq_verbose(left, right)\n                if isiterable(left) and isiterable(right):\n                    expl = _compare_eq_iterable(left, right, verbose)\n                    if explanation is not None:\n                        explanation.extend(expl)\n                    else:\n                        explanation = expl\n        elif op == \"not in\":\n            if istext(left) and istext(right):\n                explanation = _notin_text(left, right, verbose)\n    except outcomes.Exit:\n        raise\n    except Exception:\n        explanation = [\n            u\"(pytest_assertion plugin: representation of details failed.  \"\n            u\"Probably an object has a faulty __repr__.)\",\n            six.text_type(_pytest._code.ExceptionInfo.from_current()),\n        ]\n\n    if not explanation:\n        return None\n\n    return [summary] + explanation",
            "start_line": 137,
            "start_column": 3642,
            "end_line": 0,
            "end_column": 5775,
            "start_byte": 3642,
            "end_byte": 0
          },
          "_pytest.assertion._compare_eq_iterable": {
            "name": "_pytest.assertion._compare_eq_iterable",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_iterable(left, right, verbose=0):\n    if not verbose:\n        return [u\"Use -v to get the full diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    try:\n        left_formatting = pprint.pformat(left).splitlines()\n        right_formatting = pprint.pformat(right).splitlines()\n        explanation = [u\"Full diff:\"]\n    except Exception:\n        # hack: PrettyPrinter.pformat() in python 2 fails when formatting items that can't be sorted(), ie, calling\n        # sorted() on a list would raise. See issue #718.\n        # As a workaround, the full diff is generated by using the repr() string of each item of each container.\n        left_formatting = sorted(repr(x) for x in left)\n        right_formatting = sorted(repr(x) for x in right)\n        explanation = [u\"Full diff (fallback to calling repr on each item):\"]\n    explanation.extend(\n        line.strip() for line in difflib.ndiff(left_formatting, right_formatting)\n    )\n    return explanation",
            "start_line": 262,
            "start_column": 8366,
            "end_line": 0,
            "end_column": 9347,
            "start_byte": 8366,
            "end_byte": 0
          },
          "_pytest.assertion._compare_eq_sequence": {
            "name": "_pytest.assertion._compare_eq_sequence",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "def _compare_eq_sequence(left, right, verbose=0):\n    explanation = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            explanation += [u\"At index %s diff: %r != %r\" % (i, left[i], right[i])]\n            break\n    len_diff = len_left - len_right\n\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [u\"%s contains one more item: %s\" % (dir_with_more, extra)]\n        else:\n            explanation += [\n                u\"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation",
            "start_line": 285,
            "start_column": 9350,
            "end_line": 0,
            "end_column": 10256,
            "start_byte": 9350,
            "end_byte": 0
          },
          "_pytest.hookspec.pytest_assertrepr_compare": {
            "name": "_pytest.hookspec.pytest_assertrepr_compare",
            "file_path": "src/_pytest/assertion/util.py",
            "file_content": "",
            "start_line": 475,
            "start_column": 15508,
            "end_line": 0,
            "end_column": 16001,
            "start_byte": 15508,
            "end_byte": 0
          },
          "_pytest.assertion.register_assert_rewrite": {
            "name": "_pytest.assertion.register_assert_rewrite",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def register_assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the given module names are not strings.\n    \"\"\"\n    for name in names:\n        if not isinstance(name, str):\n            msg = \"expected module names as *args, got {0} instead\"\n            raise TypeError(msg.format(repr(names)))\n    for hook in sys.meta_path:\n        if isinstance(hook, rewrite.AssertionRewritingHook):\n            importhook = hook\n            break\n    else:\n        importhook = DummyRewriteHook()\n    importhook.mark_rewrite(*names)",
            "start_line": 33,
            "start_column": 914,
            "end_line": 0,
            "end_column": 1789,
            "start_byte": 914,
            "end_byte": 0
          },
          "_pytest.assertion.install_importhook": {
            "name": "_pytest.assertion.install_importhook",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def install_importhook(config):\n    \"\"\"Try to install the rewrite hook, raise SystemError if it fails.\"\"\"\n    # Jython has an AST bug that make the assertion rewriting hook malfunction.\n    if sys.platform.startswith(\"java\"):\n        raise SystemError(\"rewrite not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook",
            "start_line": 73,
            "start_column": 2157,
            "end_line": 0,
            "end_column": 2865,
            "start_byte": 2157,
            "end_byte": 0
          },
          "_pytest.assertion.pytest_runtest_setup": {
            "name": "_pytest.assertion.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "def pytest_runtest_setup(item):\n    \"\"\"Setup the pytest_assertrepr_compare hook\n\n    The newinterpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    \"\"\"\n\n    def callbinrepr(op, left, right):\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = item.ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = six.text_type(\"\\n~\").join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n\n    util._reprcompare = callbinrepr",
            "start_line": 103,
            "start_column": 3247,
            "end_line": 0,
            "end_column": 4764,
            "start_byte": 3247,
            "end_byte": 0
          },
          "_pytest.capture.CaptureManager.pytest_runtest_setup": {
            "name": "_pytest.capture.CaptureManager.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 225,
            "start_column": 7460,
            "end_line": 4,
            "end_column": 7601,
            "start_byte": 7460,
            "end_byte": 4
          },
          "_pytest.hookspec.pytest_runtest_setup": {
            "name": "_pytest.hookspec.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 349,
            "start_column": 11341,
            "end_line": 0,
            "end_column": 11429,
            "start_byte": 11341,
            "end_byte": 0
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_setup": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "",
            "start_line": 541,
            "start_column": 18316,
            "end_line": 4,
            "end_column": 18457,
            "start_byte": 18316,
            "end_byte": 4
          },
          "_pytest.runner.pytest_runtest_setup": {
            "name": "_pytest.runner.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "interpret and rewrite modules will use util._reprcompare if\n    it exists to use custom reporting via the\n    pytest_a",
            "start_line": 112,
            "start_column": 3339,
            "end_line": 0,
            "end_column": 3457,
            "start_byte": 3339,
            "end_byte": 0
          },
          "_pytest.skipping.pytest_runtest_setup": {
            "name": "_pytest.skipping.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "not supported\")\n\n    config._assertstate = AssertionState(config, \"rewrite\")\n    config._assertstate.hook = hook = rewrite.AssertionRewritingHook(config)\n    sys.meta_path.insert(0, hook)\n    config._assertstate.trace(\"installed rewrite import hook\")\n\n    def undo():\n        hook = config._assertstate.hook\n        if hook is not None and hook in sys.meta_path:\n            sys.meta_path.remove(hook)\n\n    config.add_cleanup(undo)\n    return hook\n\n\ndef pytest_collection(session):\n    # this hook is only called when test modules are collected\n    # so for example not in the master process of pytest-xdist\n    # (which does not collect test modules)\n    assertstate = getattr(sessi",
            "start_line": 72,
            "start_column": 2418,
            "end_line": 0,
            "end_column": 3101,
            "start_byte": 2418,
            "end_byte": 0
          },
          "_pytest.nose.pytest_runtest_setup": {
            "name": "_pytest.nose.pytest_runtest_setup",
            "file_path": "src/_pytest/assertion/__init__.py",
            "file_content": "assert_rewrite(*names):\n    \"\"\"Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :raise TypeError: if the g",
            "start_line": 34,
            "start_column": 927,
            "end_line": 0,
            "end_column": 1339,
            "start_byte": 927,
            "end_byte": 0
          }
        }
      }
    }
  ]
}