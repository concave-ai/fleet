{
    "file_paths": [
        "src/_pytest/config/__init__.py"
    ],
    "symbols": [
        "_pytest.config.PytestPluginManager.import_plugin"
    ],
    "code_spans": {
        "_pytest.config._prepareconfig": {
            "name": "_pytest.config._prepareconfig",
            "file_path": "src/_pytest/config/__init__.py",
            "file_content": "def _prepareconfig(\n    args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n    plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n) -> \"Config\":\n    if args is None:\n        args = sys.argv[1:]\n    elif isinstance(args, os.PathLike):\n        args = [os.fspath(args)]\n    elif not isinstance(args, list):\n        msg = (  # type:ignore[unreachable]\n            \"`args` parameter expected to be a list of strings, got: {!r} (type: {})\"\n        )\n        raise TypeError(msg.format(args, type(args)))\n\n    config = get_config(args, plugins)\n    pluginmanager = config.pluginmanager\n    try:\n        if plugins:\n            for plugin in plugins:\n                if isinstance(plugin, str):\n                    pluginmanager.consider_pluginarg(plugin)\n                else:\n                    pluginmanager.register(plugin)\n        config = pluginmanager.hook.pytest_cmdline_parse(\n            pluginmanager=pluginmanager, args=args\n        )\n        return config\n    except BaseException:\n        config._ensure_unconfigure()\n        raise",
            "start_line": 305,
            "start_column": 8342,
            "end_line": 0,
            "end_column": 9402,
            "start_byte": 8342,
            "end_byte": 0
        },
        "_pytest.config.PytestPluginManager._try_load_conftest": {
            "name": "_pytest.config.PytestPluginManager._try_load_conftest",
            "file_path": "src/_pytest/config/__init__.py",
            "file_content": "def _try_load_conftest(\n        self, anchor: Path, importmode: Union[str, ImportMode], rootpath: Path\n    ) -> None:\n        self._getconftestmodules(anchor, importmode, rootpath)\n        # let's also consider test* subdirs\n        if anchor.is_dir():\n            for x in anchor.glob(\"test*\"):\n                if x.is_dir():\n                    self._getconftestmodules(x, importmode, rootpath)",
            "start_line": 578,
            "start_column": 18588,
            "end_line": 4,
            "end_column": 18984,
            "start_byte": 18588,
            "end_byte": 4
        },
        "_pytest.config.PytestPluginManager._import_plugin_specs": {
            "name": "_pytest.config.PytestPluginManager._import_plugin_specs",
            "file_path": "src/_pytest/config/__init__.py",
            "file_content": "def _import_plugin_specs(\n        self, spec: Union[None, types.ModuleType, str, Sequence[str]]\n    ) -> None:\n        plugins = _get_plugin_specs_as_list(spec)\n        for import_spec in plugins:\n            self.import_plugin(import_spec)",
            "start_line": 750,
            "start_column": 25091,
            "end_line": 4,
            "end_column": 25331,
            "start_byte": 25091,
            "end_byte": 4
        },
        "_pytest.config.PytestPluginManager.import_plugin": {
            "name": "_pytest.config.PytestPluginManager.import_plugin",
            "file_path": "src/_pytest/config/__init__.py",
            "file_content": "def import_plugin(self, modname: str, consider_entry_points: bool = False) -> None:\n        \"\"\"Import a plugin with ``modname``.\n\n        If ``consider_entry_points`` is True, entry point names are also\n        considered to find a plugin.\n        \"\"\"\n        # Most often modname refers to builtin modules, e.g. \"pytester\",\n        # \"terminal\" or \"capture\".  Those plugins are registered under their\n        # basename for historic purposes but must be imported with the\n        # _pytest prefix.\n        assert isinstance(modname, str), (\n            \"module name as text required, got %r\" % modname\n        )\n        if self.is_blocked(modname) or self.get_plugin(modname) is not None:\n            return\n\n        importspec = \"_pytest.\" + modname if modname in builtin_plugins else modname\n        self.rewrite_hook.mark_rewrite(importspec)\n\n        if consider_entry_points:\n            loaded = self.load_setuptools_entrypoints(\"pytest11\", name=modname)\n            if loaded:\n                return\n\n        try:\n            __import__(importspec)\n        except ImportError as e:\n            raise ImportError(\n                f'Error importing plugin \"{modname}\": {e.args[0]}'\n            ).with_traceback(e.__traceback__) from e\n\n        except Skipped as e:\n            self.skipped_plugins.append((modname, e.msg or \"\"))\n        else:\n            mod = sys.modules[importspec]\n            self.register(mod, modname)",
            "start_line": 757,
            "start_column": 25337,
            "end_line": 4,
            "end_column": 26766,
            "start_byte": 25337,
            "end_byte": 4
        }
    }
}