{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-11143",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-19T12:07:14.374775",
        "usage": "1898.9379405975342 ms"
      },
      "request": {
        "repo_tokens": [
          "basename",
          "MARKED_FIXTURE",
          "add_attribute",
          "_recursive_sequence_map",
          "_getobj",
          "TESTPATHS",
          "delattr",
          "_assertion_pass",
          "disabled",
          "_sortlist",
          "compile",
          "fullsource",
          "_ensure_relative_to_basetemp",
          "_teardown_yield_fixture",
          "store_mark",
          "Frame",
          "find_spec",
          "resolve_from_str",
          "_fastjoin",
          "_get_legacy_hook_marks",
          "MarkGenerator",
          "catch_warnings_for_item",
          "_folded_skips",
          "exitstatus",
          "_ignore_error",
          "reprtraceback",
          "_match_lines",
          "run",
          "not_expr",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "_should_truncate_item",
          "toterminal",
          "rename",
          "getfailedcollections",
          "Source",
          "STRING_TYPES",
          "_is_setup_py",
          "_getnextfixturedef",
          "append_skipped",
          "expression",
          "REPORT_COLLECTING_RESOLUTION",
          "runpython",
          "FixtureFunction",
          "ensure_dir",
          "PYC_EXT",
          "_getlines",
          "mkpydir",
          "reset",
          "print_teardown_sections",
          "_inject_setup_function_fixture",
          "Expression",
          "tmp_path",
          "explanation_param",
          "CLOSE_STDIN",
          "get",
          "threadexception",
          "RecordedHookCall",
          "get_closest_marker",
          "FunctionDefinition",
          "PytestArg",
          "pytest",
          "FormattedExcinfo",
          "_is_in_confcutdir",
          "scope",
          "dirpath",
          "main",
          "_fillfixtures",
          "pytestconfig",
          "maketxtfile",
          "_getconftestmodules",
          "_find_spec",
          "cached_result",
          "ApproxDecimal",
          "_parse_parametrize_args",
          "safeformat",
          "fault_handler_originally_enabled_key",
          "check_interactive_exception",
          "recursionindex",
          "cleanup_numbered_dir",
          "append_failure",
          "_with_exception",
          "applymarker",
          "_check_all_skipped",
          "evaluate_skip_marks",
          "ApproxNumpy",
          "bin_xml_escape",
          "_dump_lines",
          "STEPWISE_CACHE_DIR",
          "_yield_comparisons",
          "re_match_lines_random",
          "_recursive_debug",
          "classnamefilter",
          "traverse_node",
          "makepyfile",
          "INTERNAL_ERROR",
          "repr_instance",
          "record_tuples",
          "CollectReport",
          "_get_pdb_wrapper_class",
          "setuponly",
          "_import_plugin_specs",
          "pytest_runtest_teardown",
          "getstatementrange",
          "RunResult",
          "UnitTestCase",
          "DummyRewriteHook",
          "deprecated_call",
          "_write_pyc_fp",
          "get_terminal_writer",
          "_param_ids_from",
          "letter",
          "visit_Call",
          "inline_genitems",
          "writeorg",
          "no_summary",
          "__eq__",
          "update_testcase_duration",
          "USAGE_MSG",
          "_init_checker_class",
          "collect_one_node",
          "_code",
          "_check_non_top_pytest_plugins",
          "append_pass",
          "_iter_rewritable_modules",
          "teardown",
          "_windowsconsoleio_workaround",
          "setattr",
          "_determine_main_color",
          "DontReadFromInput",
          "ARGS",
          "_start",
          "thread_exception_runtest_hook",
          "push_format_context",
          "OR",
          "value",
          "consider_preparse",
          "unittest",
          "_param_ids_generated",
          "_PYTEST_DIR",
          "exconly",
          "add_stats",
          "__fspath__",
          "ReprTraceback",
          "exec_module",
          "InvocationParams",
          "legacypath",
          "_colorama_workaround",
          "get_source",
          "_idlist",
          "set_level",
          "dotfile",
          "_pformat_dispatch",
          "consider_pluginarg",
          "FixtureDef",
          "add_property",
          "source",
          "NFPlugin",
          "pytest_deselected",
          "_format_assertmsg",
          "from_parent",
          "__module__",
          "_set_opt_strings",
          "pytest_fixture_setup",
          "pytest_runtest_call",
          "RaisesContext",
          "_excinfo",
          "get_direct_param_fixture_func",
          "_getcrashline",
          "AssertionRewriter",
          "basestarts",
          "LsofFdLeakChecker",
          "tell",
          "isattrs",
          "xfailed_key",
          "junitxml",
          "_mk_tmp",
          "importlib",
          "PytestUnraisableExceptionWarning",
          "_ascii_escaped_by_config",
          "_pyfuncitem",
          "getcall",
          "write_fspath_result",
          "_matches_prefix_or_glob_option",
          "_trace",
          "HelpAction",
          "getuserid",
          "pytest_assertion_pass",
          "LEVELNAME_FMT_REGEX",
          "_getini_unknown_type",
          "notset",
          "Cache",
          "_stat",
          "stop_capturing",
          "get_location",
          "T",
          "V",
          "_log_cli_enabled",
          "on_rm_rf_error",
          "processoption",
          "_config",
          "LFPluginCollSkipfiles",
          "TestCaseFunction",
          "__contains__",
          "get_timeout_config_value",
          "bestrelpath",
          "DOCTEST_REPORT_CHOICES",
          "ParameterSet",
          "PRIVATE",
          "hasplugin",
          "_depend_on_existence",
          "capstdout",
          "iscoroutinefunction",
          "pytest_pycollect_makeitem",
          "_compare_eq_sequence",
          "location",
          "_report_kwargs_from_json",
          "genitems",
          "Node_fspath",
          "isinitpath",
          "stop",
          "_getfailureheadline",
          "CFG_PYTEST_SECTION",
          "DEFAULT_RELATIVE_TOLERANCE",
          "pytest_runtest_makereport",
          "append_collect_skipped",
          "_FixtureFunc",
          "register",
          "make_unique_parameterset_ids",
          "get_default_arg_names",
          "cleanup_candidates",
          "pytest_plugins",
          "EMPTY_PARAMETERSET_OPTION",
          "_check_record_param_type",
          "format_explanation",
          "FixtureRequest_fspath",
          "pyimport",
          "makeconftest",
          "_finalize",
          "file",
          "getworkerinfoline",
          "pytest_fixture_post_finalizer",
          "_get_flag_lookup",
          "resume_fixture",
          "findsource",
          "doctest",
          "fileno",
          "_validate_usepdb_cls",
          "Class",
          "filter_traceback_for_conftest_import_failure",
          "__truediv__",
          "_non_printable_ascii_translate_table",
          "cut",
          "_evaluate",
          "python_path",
          "helpconfig",
          "getfirstlinesource",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "prepend",
          "reprentries",
          "old_mark_config_key",
          "create_cleanup_lock",
          "ensure_deletable",
          "rewrite",
          "verbosity",
          "get_temproot",
          "derive_importpath",
          "check",
          "_getbyspec",
          "make_numbered_dir",
          "resolve",
          "_inject_setup_module_fixture",
          "entrysep",
          "DoctestTextfile",
          "RPAREN",
          "families",
          "pytest_terminal_summary",
          "tmppath_result_key",
          "_inject_setup_method_fixture",
          "PyobjMixin",
          "as_cwd",
          "__array_priority__",
          "get_scope_node",
          "TerminalRepr",
          "getmodpath",
          "pastebin",
          "_should_repr_global_name",
          "fnmatch_lines_random",
          "repr_args",
          "_node_location_to_relpath",
          "skipping",
          "_get_allow_bytes_flag",
          "section",
          "_ensure_unconfigure",
          "commonpath",
          "warning_types",
          "messages",
          "filter_traceback",
          "getimfunc",
          "getcalls",
          "from_user",
          "isatty",
          "README_CONTENT",
          "name2fixturedefs",
          "SysModulesSnapshot",
          "get_log_level_for_setting",
          "showlocals",
          "match",
          "PytestUnhandledCoroutineWarning",
          "tmpdir",
          "get_empty_parameterset_mark",
          "_resolve_arg_value_types",
          "call_runtest_hook",
          "done",
          "isdir",
          "_get_teardown_reports",
          "add_report_section",
          "PytestPluginManager",
          "getnode",
          "absolutepath",
          "parse_summary_nouns",
          "_build_collect_only_summary_stats_line",
          "Error",
          "try_makedirs",
          "INCOVATION_DIR",
          "update",
          "suspend",
          "_get_increasing_order",
          "getplugin",
          "islink",
          "ensure_extended_length_path",
          "pos",
          "D",
          "at_level",
          "__post_init__",
          "attrs",
          "popen",
          "_importtestmodule",
          "visit_Attribute",
          "_get_unknown_ini_keys",
          "setmtime",
          "PrintHelp",
          "_validate_config_options",
          "timing",
          "reject",
          "MyOptionParser",
          "parseconfig",
          "getbasetemp",
          "PytestUnhandledThreadExceptionWarning",
          "_is_started",
          "_addexcinfo",
          "_width_of_current_line",
          "startTest",
          "_report_keyboardinterrupt",
          "snap",
          "_result",
          "ImportMismatchError",
          "_format",
          "format_session_duration",
          "from_item",
          "parseoutcomes",
          "warn",
          "reorder_items_atscope",
          "_resolve_msg_to_reason",
          "monkeypatch",
          "variable",
          "resolve_fixture_function",
          "default_plugins",
          "_log_text",
          "resume_capturing",
          "_add_simple",
          "raises",
          "_assert_state",
          "wcswidth",
          "execute",
          "approx",
          "_decide_args",
          "matchreport",
          "LineComp",
          "add_global_property",
          "path_matches_patterns",
          "stop_global_capturing",
          "capstderr",
          "_version",
          "hookspec",
          "wrap_pytest_function_for_tracing",
          "short_test_summary",
          "parse_num",
          "LocalPath",
          "f_locals",
          "rootpath",
          "_force_enable_logging",
          "collect_by_name",
          "parsefactories",
          "getmodulecol",
          "getpathnode",
          "result",
          "__div__",
          "__test__",
          "EOF",
          "ColoredLevelFormatter",
          "node_reporter",
          "merge_family",
          "DOCTEST_REPORT_CHOICE_NONE",
          "_rget_with_confmod",
          "pytester",
          "__gt__",
          "_gethomedir",
          "common",
          "fail",
          "TeeCaptureIO",
          "pytest_unconfigure",
          "listoutcomes",
          "_validate_args",
          "mark_rewrite",
          "showversion",
          "iter_markers_with_node",
          "getvalue",
          "reorder_items",
          "_warn_incompatibility_with_xunit2",
          "_is_marked_for_rewrite",
          "_add_stats",
          "repr",
          "evaluate",
          "SEP",
          "SubRequest",
          "_retention_count",
          "getreportopt",
          "ApproxScalar",
          "size",
          "PytestUnknownMarkWarning",
          "_ET",
          "get_exconly",
          "_idval_from_argname",
          "pypkgpath",
          "get_open_files",
          "CACHEDIR_TAG_CONTENT",
          "FNMatcher",
          "hasopt",
          "_get_main_color",
          "check_testcase_implements_trial_reporter",
          "_is_numpy_array",
          "getsource",
          "ids",
          "tmp_path_factory",
          "_disable_output_capturing_for_darwin",
          "is_globally_capturing",
          "LPAREN",
          "display",
          "pytest_collectreport",
          "LOCK_TIMEOUT",
          "samefile",
          "DEFAULT_LOG_FORMAT",
          "global_and_fixture_disabled",
          "fixture",
          "pytest_cmdline_parse",
          "_enter_pdb",
          "add_marker",
          "cache_key",
          "freeze_includes",
          "node",
          "from_item_and_call",
          "makeini",
          "linecomp",
          "_format_action_invocation",
          "generic_visit",
          "_W",
          "extract_from",
          "pytest_collection_modifyitems",
          "create_new_paste",
          "getinicfg",
          "seek",
          "_report_unserialization_failure",
          "setupplan",
          "issequence",
          "isset",
          "makefile",
          "LoggingPlugin",
          "__hash__",
          "HOOK_LEGACY_MARKING",
          "DoctestItem",
          "traceback",
          "_ALLOW_MARKERS",
          "head_line",
          "autouse",
          "_importconftest",
          "PYTEST_TAG",
          "args",
          "_FileHandler",
          "_checkversion",
          "_ALL_SCOPES",
          "copy",
          "FastFilesCompleter",
          "HIGH_SCOPES",
          "PytestDeprecationWarning",
          "with_repr_style",
          "set_fixture",
          "visit_Compare",
          "PathAwareHookProxy",
          "_ensure_removed_sysmodule",
          "showfspath",
          "isnamedtuple",
          "start_capturing",
          "iswin32",
          "ArgumentError",
          "_truncate_by_char_count",
          "_prepareconfig",
          "pytest_pycollect_makemodule",
          "_has_param_ids",
          "__array_ufunc__",
          "summary_errors",
          "AlwaysDispatchingPrettyPrinter",
          "write_binary",
          "_ellipsize",
          "group",
          "pytest_collection",
          "get_data",
          "pytest_report_collectionfinish",
          "from_function",
          "KEYWORD_MSG_ARG",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "conftest_options",
          "find_prefixed",
          "accept",
          "_check_scope",
          "outcomes",
          "_format_boolop",
          "DropShorterLongHelpFormatter",
          "_is_doctest",
          "HookRecorder",
          "getreports",
          "showhelp",
          "legacy_path",
          "pytest_cmdline_main",
          "MARK_GEN",
          "caplog_handler_key",
          "USAGE_ERROR",
          "_opentestcase",
          "fspath",
          "_recurse",
          "create_terminal_writer",
          "write_text",
          "TerminalReporter_startdir",
          "mark",
          "Visitor",
          "register_assert_rewrite",
          "locate_config",
          "syspath_prepend",
          "rm_rf",
          "fixturenames",
          "write_line",
          "MarkDecorator",
          "tb",
          "addUnexpectedSuccess",
          "Scope",
          "pytest_collection_finish",
          "StashKey",
          "getstatementrange_ast",
          "Config_inifile",
          "ReprFuncArgs",
          "firstlineno",
          "_geterrnoclass",
          "syspathinsert",
          "fill_unfilled",
          "find_suffixes",
          "_S",
          "num_mock_patch_args",
          "UsageError",
          "imply_paths_hooks",
          "catch_threading_exception",
          "STRICT_OPTION",
          "resume_global_capture",
          "IGNORE_PAM",
          "indent",
          "istext",
          "showlongtestinfo",
          "Code",
          "terminal",
          "_split_explanation",
          "assert_contains",
          "runpython_c",
          "_io",
          "cwd_relative_nodeid",
          "show_fixtures_per_test",
          "NOT",
          "pytest_warning_recorded",
          "_get_plugin_specs_as_list",
          "_strtobool",
          "addsection",
          "deindent",
          "NotSetType",
          "set_when",
          "delenv",
          "mtime",
          "_format_repr_exception",
          "should_do_markup",
          "fromdictargs",
          "__setitem__",
          "_genfunctions",
          "CaptureBase",
          "raiseerror",
          "IGNORED_ATTRIBUTES",
          "fnmatch_ex",
          "reprfuncargs",
          "_resolve_ids",
          "Traceback",
          "pytest_runtestloop",
          "_setupstate",
          "Session_stardir",
          "item_capture",
          "next_higher",
          "longrepr",
          "TestReport",
          "capfd",
          "_try_repr_or_str",
          "repr_excinfo",
          "gen",
          "__init__",
          "_truncate_recursive_traceback",
          "emit",
          "_resume",
          "getini",
          "_warn_already_imported",
          "chmod",
          "argnames",
          "_hook",
          "repr_failure",
          "parse_warning_filter",
          "_get_multicapture",
          "Config_invocation_dir",
          "cls",
          "getlocation",
          "FixtureValue",
          "parseconfigure",
          "repr_locals",
          "_argcomplete",
          "obj",
          "assert_outcomes",
          "_validate_ids",
          "visit_Name",
          "Stat",
          "finish",
          "report_collect",
          "iter_markers",
          "_patch_unwrap_mock_aware",
          "_get_line_with_reprcrash_message",
          "iterparentnodeids",
          "AssertionState",
          "visit_NamedExpr",
          "ihook",
          "new",
          "_highlight",
          "call_optional",
          "_get_override_ini_value",
          "ExceptionRepr",
          "truncate",
          "deactivate_fixture",
          "set_log_path",
          "wrap_session",
          "filename_arg",
          "get_plugin_manager",
          "function",
          "ReprExceptionInfo",
          "getfuncargnames",
          "ImportMode",
          "addDuration",
          "suspend_fixture",
          "SafeRepr",
          "LOGLEVEL_COLOROPTS",
          "_write_pyc",
          "__len__",
          "_is_last_item",
          "summary_stats",
          "__next__",
          "getrawcode",
          "DatetimeFormatter",
          "_initrequest",
          "test_tmproot",
          "TResult",
          "_CACHE_PREFIX_DIRS",
          "path",
          "inline_run",
          "pytest_make_parametrize_id",
          "name",
          "set_trace",
          "parse_known_and_unknown_args",
          "WARNING_CMDLINE_PREPARSE_HOOK",
          "PseudoFixtureDef",
          "_fail",
          "CollectErrorRepr",
          "_resolve_warning_category",
          "KeywordMatcher",
          "runner",
          "call_fixture_func",
          "errisinstance",
          "_CaptureMethod",
          "hookimpl",
          "capfdbinary",
          "addini",
          "IDENT",
          "runpytest_inprocess",
          "Failed",
          "flow_marker",
          "_AnyPurePath",
          "extract_suffixes",
          "add_color_level",
          "func_name",
          "_color_for_type_default",
          "parametersets",
          "pytest_collectstart",
          "HOOK_LEGACY_PATH_ARG",
          "setenv",
          "_schedule_finalizers",
          "_HandlerType",
          "isiterable",
          "FSCollector",
          "BINOP_MAP",
          "style",
          "_log",
          "pytest_internalerror",
          "pytest_enter_pdb",
          "dirname",
          "copymode",
          "ARGUMENT_TYPE_STR_CHOICE",
          "visit_Starred",
          "from_exception",
          "FixtureLookupError",
          "FixtureManager",
          "FSCOLLECTOR_GETHOOKPROXY_ISINITPATH",
          "doctest_namespace",
          "_getentrysource",
          "_bytes_to_ascii",
          "_IGNORED_ERRORS",
          "ensure_newline",
          "saferepr",
          "evaluate_xfail_marks",
          "_basetemp",
          "chdir",
          "ARGUMENT_TYPE_STR",
          "_matchfactories",
          "activate_fixture",
          "YIELD_FIXTURE",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "gethookproxy",
          "get_user_id",
          "_get_assertion_exprs",
          "Exception",
          "mode",
          "str",
          "OK",
          "get_unpacked_marks",
          "tbfilter",
          "pytest_report_teststatus",
          "pytestPDB",
          "_setup_fixtures",
          "Pytester",
          "has_default_eq",
          "is_generator",
          "_idval",
          "_write_progress_information_filling_space",
          "_compare_approx",
          "getpluginversioninfo",
          "stopTest",
          "realpath",
          "_consider_importhook",
          "PdbInvoke",
          "caplog",
          "OptionGroup",
          "error",
          "load_config_dict_from_file",
          "LFPluginCollWrapper",
          "NodeMeta",
          "_is_capturing",
          "FixtureRequest",
          "_esctable",
          "_cachedir",
          "_get_global_properties_node",
          "_write_report_lines_from_hooks",
          "_iter_all_modules",
          "_bestrelpath_cache",
          "extraline",
          "ext",
          "readable",
          "ReprFileLocation",
          "format",
          "reprlocals",
          "_ANSI_ESCAPE_SEQ",
          "_create",
          "set",
          "pytest_report_from_serializable",
          "essential_plugins",
          "_get_first_non_fixture_func",
          "getitem",
          "_sys_snapshot",
          "_parse_expression",
          "link",
          "names",
          "local",
          "is_capturing",
          "install_importhook",
          "DEFAULT_MAX_LINES",
          "initialnames",
          "LogXML",
          "__getitem__",
          "count_towards_summary",
          "unraisable_exception_runtest_hook",
          "_format_trimmed",
          "for_config",
          "get_config",
          "FuncFixtureInfo",
          "Testdir",
          "exists",
          "parse_hookimpl_opts",
          "tracebackcutdir",
          "addExpectedFailure",
          "get_public_names",
          "cacheshow",
          "TracebackEntry",
          "relline",
          "_get_auto_indent",
          "_getconftest_pathlist",
          "get_scope_package",
          "Package",
          "IDENT_PREFIX",
          "patchsysdict",
          "start_global_capturing",
          "record_testsuite_property",
          "warns",
          "_SCOPE_INDICES",
          "_pytest",
          "pytest_itemcollected",
          "assert_contains_lines",
          "owner",
          "chain",
          "parts",
          "FSHookProxy",
          "_NodeReporter",
          "_locationline",
          "TempdirFactory",
          "helper",
          "and_expr",
          "_write_entry_lines",
          "Skip",
          "_check_path",
          "_pretty_fixture_path",
          "undo",
          "MultipleDoctestFailures",
          "set_session",
          "async_warn_and_skip",
          "lineno",
          "MoreQuietAction",
          "Token",
          "LineMatcher",
          "context",
          "_statcache",
          "get_extended_length_path_str",
          "fixtures",
          "TestShortLogReport",
          "__call__",
          "wcwidth",
          "countoutcomes",
          "nose",
          "reports",
          "TYPE_CHECKING",
          "_compute_fixture_value",
          "_outrep_summary",
          "debugging",
          "assertrepr_compare",
          "_read_pyc",
          "_approx_scalar",
          "get_cache_dir",
          "PytestAssertRewriteWarning",
          "records",
          "Argument",
          "_getvaluepath",
          "_import_pdb_cls",
          "_get_directory",
          "_winerrnomap",
          "listchain",
          "get_dirs_from_args",
          "_early_rewrite_bailout",
          "check_ispytest",
          "_retention_policy",
          "freeze_support",
          "CaptureIO",
          "params",
          "isnosetest",
          "makepyprojecttoml",
          "outcome",
          "get_real_func",
          "get_common_ancestor",
          "warnings",
          "config",
          "list",
          "newinstance",
          "getfixturemarker",
          "fslocation",
          "wrap_function_to_error_out_if_called_directly",
          "delitem",
          "abspath",
          "_getautousenames",
          "_try_load_conftest",
          "warn_explicit_for",
          "_ispytest",
          "for_later",
          "_plugin_nameversions",
          "WARNS_NONE_ARG",
          "repr_traceback",
          "read_binary",
          "_postmortem_traceback",
          "EncodedFile",
          "mkdir",
          "ishidden",
          "getitems",
          "_addoption_instance",
          "validate_basetemp",
          "import_path",
          "PytestWarning",
          "_resolve_parameter_set_ids",
          "_processopt",
          "_force_symlink",
          "join",
          "symlink_or_skip",
          "assign",
          "_getindent",
          "finish_recording",
          "lstat",
          "own_mark_names",
          "_format_lines",
          "plugins",
          "is_fs_root",
          "setdefault",
          "load",
          "reportinfo",
          "fnmatch_lines",
          "LEGACY_PATH",
          "read_text",
          "ensure",
          "gethookrecorder",
          "_params_converter",
          "get_terminal_width",
          "MonkeyPatch",
          "_get_raw_skip_reason",
          "NOTSET",
          "setmulti",
          "_to_json",
          "Mark",
          "_handle_teardown_sections",
          "ExceptionInfo",
          "encoding",
          "apply_warning_filters",
          "annotated_getattr",
          "_remove_ansi_escape_sequences",
          "readlines",
          "console_main",
          "cmdline",
          "inline_runsource",
          "__delitem__",
          "wrap_write",
          "summary_warnings",
          "pytest_exception_interact",
          "marks",
          "typename",
          "FDCaptureBase",
          "CaptureFixture",
          "write_captured_output",
          "open",
          "CHECKER_CLASS",
          "_warn_about_missing_assertion",
          "copychunked",
          "SysCaptureBinary",
          "_make_xunit_fixture",
          "get_option_ini",
          "WarningReport",
          "NO_TESTS_COLLECTED",
          "indices",
          "close",
          "register_cleanup_lock_removal",
          "_inject_setup_teardown_fixtures",
          "deprecated",
          "eval",
          "writable",
          "request",
          "_is_skipped",
          "ExceptionChainRepr",
          "pytest_generate_tests",
          "_testcase",
          "handleError",
          "_show_fixtures_per_test",
          "collect",
          "showfixtures",
          "astcache",
          "_traceback",
          "RUNNER_CLASS",
          "caplog_records_key",
          "LegacyTestdirPlugin",
          "Node_fspath_set",
          "checked_call",
          "_get_runner",
          "pytest_runtest_logstart",
          "get_user",
          "TimeoutExpired",
          "_given_basetemp",
          "skip",
          "SysCapture",
          "addfinalizer",
          "start",
          "pytest_runtest_protocol",
          "hasnew",
          "from_current",
          "text",
          "ConftestImportFailure",
          "_imply_path",
          "append",
          "assertoutcome",
          "pytest_runtest_logfinish",
          "names_closure",
          "readline",
          "fail_marker",
          "pytest_plugin_registered",
          "pytest_pyfunc_call",
          "prune_dependency_tree",
          "make_properties_node",
          "Cache_makedir",
          "__slots__",
          "FixtureFunctionMarker",
          "rex_session_duration",
          "__bool__",
          "_LiveLoggingStreamHandler",
          "popcall",
          "perform_collect",
          "simple",
          "clear",
          "writelines",
          "_get_direct_parametrize_args",
          "_truncate_explanation",
          "Collector",
          "Notset",
          "message",
          "_update_current_test_var",
          "_compare_eq_iterable",
          "listnames",
          "assertstate_key",
          "kwargs",
          "cache",
          "isdatacls",
          "truncate_if_required",
          "_PluggyPlugin",
          "R",
          "no_re_match_line",
          "TokenType",
          "NOSE_SUPPORT_METHOD",
          "restore",
          "remove",
          "__exit__",
          "runpytest",
          "is_async_function",
          "_get_allow_unicode_flag",
          "_from_json",
          "pytest_load_initial_conftests",
          "formatTime",
          "try_cleanup",
          "_no_match_line",
          "_is_mocked",
          "_showfixtures_main",
          "to_xml",
          "instance",
          "repr_traceback_entry",
          "PytestConfigWarning",
          "getrepr",
          "Node",
          "parametrize",
          "strict",
          "is_rewrite_disabled",
          "write_sep",
          "truncate_locals",
          "_names",
          "_write_source",
          "relto",
          "_factorytraceback",
          "WarningsRecorder",
          "statement",
          "pytest_assertrepr_compare",
          "RetentionType",
          "get_sections",
          "_NodeType",
          "_makepath",
          "get_lock_path",
          "__repr__",
          "_warn_about_skipped_plugins",
          "spawn",
          "pop",
          "determine_setup",
          "fix_cache_order",
          "ReprEntry",
          "_reprcompare",
          "pytest_runtest_logreport",
          "_makefile",
          "CallSpec2",
          "_compare_eq_any",
          "PytestRemovedIn8Warning",
          "_fixturemanager",
          "id",
          "_init_runner_class",
          "getfixturevalue",
          "_assert_start_repr",
          "_saferepr",
          "K",
          "get_stderr_fileno",
          "StepwisePlugin",
          "when",
          "make_hook_recorder",
          "summary_failures",
          "pastebinfile_key",
          "_report_to_json",
          "CwdSnapshot",
          "_init_pdb",
          "_pluginmanager",
          "testdir",
          "getfailures",
          "expr",
          "_notin_text",
          "_patternchars",
          "endswith",
          "visit_BinOp",
          "ApproxMapping",
          "fullwidth",
          "ExitCode",
          "FDCapture",
          "_ensure_supporting_files",
          "lines",
          "_CACHE_PREFIX_VALUES",
          "MarkMatcher",
          "_check_item_and_collector_diamond_inheritance",
          "cleanup_dead_symlinks",
          "Interrupted",
          "unset_fixture",
          "assert_never",
          "_repr_failure_py",
          "keywords",
          "TerminalReporter",
          "strip",
          "_ensuresyspath",
          "_validate_plugins",
          "_wrapped_pdb_cls",
          "Markable",
          "pytest_report_header",
          "_saved",
          "ReprFailDoctest",
          "copy_example",
          "_initini",
          "_validate_if_using_arg_names",
          "parse_args",
          "EMPTY_BUFFER",
          "_get_number_flag",
          "recwarn",
          "search_pypath",
          "mktemp",
          "summary_passes",
          "pytest_keyboard_interrupt",
          "addSuccess",
          "File",
          "directory_arg",
          "_T",
          "computehash",
          "notify_exception",
          "__getattr__",
          "template",
          "_idval_from_hook",
          "_determine_show_progress_info",
          "_getreprcrash",
          "_ensure_basetemp",
          "parse_known_args",
          "ErrorMaker",
          "xfail",
          "__ne__",
          "build_summary_stats_line",
          "_check_if_assertion_pass_impl",
          "_arg2scope",
          "ImportPathMismatchError",
          "Exit",
          "NOSE_SUPPORT",
          "stream",
          "code",
          "ArgsSource",
          "getgroupid",
          "setup",
          "nodeid",
          "pytester_assertions",
          "consider_env",
          "normalize_mark_list",
          "exit",
          "mangle_test_address",
          "_disable_loggers",
          "_should_rewrite",
          "ApproxSequenceLike",
          "pytest_cmdline_preparse",
          "visit",
          "LineMatcher_fixture",
          "longreprtext",
          "_parse_parametrize_parameters",
          "buffer",
          "safe_getattr",
          "_get_continue_on_failure",
          "_match_lines_random",
          "from_config",
          "handler",
          "_error_maker",
          "no_header",
          "NoCapture",
          "_rewrite_test",
          "PercentStyleMultiline",
          "_check_initialpaths_for_relpath",
          "__take_sys_modules_snapshot",
          "_split_lines",
          "reprfileloc",
          "suspend_capturing",
          "CollectError",
          "_config_for_test",
          "_compare_eq_set",
          "stash",
          "_surrounding_parens_on_own_lines",
          "purebasename",
          "get_statement_startend2",
          "_addoption",
          "pytest_addoption",
          "Function",
          "_call_assertion_pass",
          "_compare_eq_dict",
          "pytest_runtest_setup",
          "UnformattedWarning",
          "_get_verbose_word",
          "__dir__",
          "IdMaker",
          "token",
          "lex",
          "resolve_collection_argument",
          "pytest_sessionfinish",
          "_getparser",
          "resume",
          "INTERRUPTED",
          "showheader",
          "SysCaptureBase",
          "_call_reprcompare",
          "_IGNORED_WINERRORS",
          "pytest_make_collect_report",
          "getfixtureinfo",
          "map_as_list",
          "failed",
          "__lt__",
          "getfixturedefs",
          "scandir",
          "funcargs",
          "_get_reports_to_display",
          "_ensure_immutable_ids",
          "_get_report_choice",
          "addError",
          "pytest_collect_file",
          "width_of_current_line",
          "_scope",
          "_EmptyClass",
          "_in_venv",
          "matching_platform",
          "BaseReport",
          "ARGUMENT_PERCENT_DEFAULT",
          "DEPRECATED_EXTERNAL_PLUGINS",
          "write_docstring",
          "add_cleanup",
          "frame",
          "mkdtemp",
          "_ensuredirs",
          "inipath",
          "Parser",
          "_getpytestargs",
          "_translate_non_printable",
          "readouterr",
          "__version_tuple__",
          "python_api",
          "param",
          "_for_parametrize",
          "listdir",
          "type",
          "sections",
          "__version__",
          "locals",
          "visit_Assert",
          "stepwise",
          "record_xml_attribute",
          "getfslineno",
          "matches",
          "python",
          "InstanceDummy",
          "version",
          "pytest_leave_pdb",
          "funcnamefilter",
          "_create_formatter",
          "_F",
          "_preparse",
          "AND",
          "_parse_ini_config",
          "FDCaptureBinary",
          "_FixtureCachedResult",
          "cacheprovider",
          "cache_dir_from_config",
          "_non_numeric_type_error",
          "Xfail",
          "with_args",
          "LegacyTmpdirPlugin",
          "next_lower",
          "PytestReturnNotNoneWarning",
          "fnmatch",
          "_get_active_fixturedef",
          "yield_fixture",
          "ascii_escaped",
          "pop_format_context",
          "builtin_plugins",
          "_py",
          "re_match_lines",
          "startpath",
          "resolve_package_path",
          "atime",
          "write_ensure_prefix",
          "setitem",
          "skipped",
          "_eval_scope_callable",
          "listextrakeywords",
          "SysPathsSnapshot",
          "PytestCacheWarning",
          "addSkip",
          "get_parametrized_fixture_keys",
          "duration",
          "ApproxBase",
          "rex_outcome",
          "importorskip",
          "TempPathFactory",
          "pytest_ignore_collect",
          "WarningsChecker",
          "from_exc_info",
          "isdict",
          "teardown_exact",
          "PYC_TAIL",
          "getoption",
          "PdbTrace",
          "add_funcarg_pseudo_fixture_def",
          "RE_IMPORT_ERROR_NAME",
          "SetupState",
          "KNOWN_TYPES",
          "_idval_from_function",
          "markname",
          "append_error",
          "idfn",
          "Session",
          "copystat",
          "read",
          "maybe_wrap_pytest_function_for_tracing",
          "_state",
          "_in_suspended",
          "_PLUGGY_DIR",
          "_tmppath_factory",
          "getparam",
          "maybe_delete_a_numbered_dir",
          "LFPlugin",
          "DoctestModule",
          "from_call",
          "unraisableexception",
          "NodeKeywords",
          "finalize",
          "evaluate_condition",
          "addinivalue_line",
          "dump",
          "markup",
          "faulthandler",
          "PytestCollectionWarning",
          "move",
          "append_collect_error",
          "NeverRaised",
          "name2pseudofixturedef_key",
          "compat",
          "values",
          "parse",
          "Stash",
          "MultiCapture",
          "_get_maxsize_for_saferepr",
          "runpytest_subprocess",
          "pytest_report_to_serializable",
          "runtestprotocol",
          "logging",
          "_suspend",
          "getvalueorskip",
          "pytest_configure",
          "OutcomeException",
          "_inject_setup_class_fixture",
          "excinfo",
          "AssertionRewritingHook",
          "_prepare_content",
          "issue_config_time_warning",
          "_Key",
          "runitem",
          "_R",
          "sysexec",
          "fault_handler_stderr_fd_key",
          "clear_cache",
          "sysfind",
          "PyCollector",
          "record_testreport",
          "_diff_text",
          "_mark_plugins_for_rewrite",
          "consider_module",
          "_REPORTCHARS_DEFAULT",
          "XFailed",
          "LogCaptureFixture",
          "runtest",
          "catch_unraisable_exception",
          "rewrite_asserts",
          "create_module",
          "FILE_OR_DIR",
          "module",
          "_get_fixturestack",
          "pytest_sessionstart",
          "E",
          "_show_fixture_action",
          "dir",
          "copytree",
          "show_test_item",
          "record_property",
          "tmpdir_factory",
          "Config_rootdir",
          "CallInfo",
          "insert_missing_modules",
          "INSTANCE_COLLECTOR",
          "_TracebackStyle",
          "get_optionflags",
          "_check_type",
          "_repr_compare",
          "make_numbered_dir_with_cleanup",
          "call_and_report",
          "nofuncargs",
          "running_on_ci",
          "Config",
          "_traceback_filter",
          "reason",
          "_runtest_for",
          "get_lines_after",
          "version_tuple",
          "DEFAULT_MAX_CHARS",
          "Module",
          "Item",
          "MatcherAdapter",
          "module_name_from_path",
          "pytest_addhooks",
          "no_fnmatch_line",
          "__all__",
          "xml_key",
          "word",
          "saferepr_unlimited",
          "read_global_capture",
          "_color_for_type",
          "Scanner",
          "_getini",
          "Checkers",
          "istestfunction",
          "_LiveLoggingNullHandler",
          "ParseError",
          "warning_record_to_str",
          "DEFAULT_LOG_DATE_FORMAT",
          "_errno2class",
          "_compare_eq_cls",
          "_write_content",
          "assertion",
          "_PytestWrapper",
          "Metafunc",
          "_main",
          "get_real_method",
          "pluralize",
          "prog",
          "nodes",
          "reprcrash",
          "is_started",
          "_assertion_supported",
          "getparent",
          "combined_with",
          "_get_progress_information_message",
          "filter",
          "parse_setoption",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "_do_configure",
          "addoption",
          "_is_main_py",
          "getfixtureclosure",
          "TEST_OUTCOME",
          "ReprEntryNative",
          "_warn_or_fail_if_strict",
          "_striptext",
          "_call_with_optional_argument",
          "get_records",
          "getgroup",
          "_get_checker",
          "deselect_by_keyword",
          "_as_numpy_array",
          "capsysbinary",
          "capsys",
          "_idval_from_value_required",
          "pop_outerr_to_orig",
          "category",
          "_set_initial_conftests",
          "_printcollecteditems",
          "isimportable",
          "ReprTracebackNative",
          "_idval_from_value",
          "__add__",
          "pathlib",
          "nextitem",
          "parse_hookspec_opts",
          "formatrepr",
          "flush",
          "FixtureLookupErrorRepr",
          "fail_fixturefunc",
          "visit_UnaryOp",
          "CaptureManager",
          "PytestExperimentalApiWarning",
          "getargs",
          "__enter__",
          "suspend_global_capture",
          "pytest_markeval_namespace",
          "LogCaptureHandler",
          "__str__",
          "DEFAULT_REPR_MAX_SIZE",
          "consider_conftest",
          "line",
          "write",
          "UNARY_MAP",
          "get_fslocation_from_item",
          "session",
          "Config__getini_unknown_type",
          "deselect_by_mark",
          "TESTS_FAILED",
          "spawn_pytest",
          "_WithException",
          "NODE_CTOR_FSPATH_ARG",
          "import_plugin",
          "TerminalWriter",
          "istestclass",
          "seekable",
          "__missing__",
          "hasinit",
          "_build_normal_summary_stats_line",
          "isfile",
          "visit_BoolOp",
          "post_mortem",
          "__iter__",
          "passed",
          "istestfunc",
          "f_globals",
          "ReprLocals",
          "getstatement",
          "_find_parametrized_scope",
          "PytestRemovedIn9Warning",
          "_set_main_color",
          "builtin",
          "get_last_failed_paths",
          "_collectfile",
          "_get_node_id_with_markup",
          "sep",
          "catching_logs",
          "addFailure",
          "Skipped",
          "stat",
          "capture",
          "safe_isclass",
          "_typ_map",
          "tolerance"
        ]
      },
      "response": {
        "keywords": [
          "rewrite_asserts",
          "AssertionRewriter",
          "exec_module",
          "_rewrite_test",
          "rewrite"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-19T12:07:16.273736",
        "usage": "232.00702667236328 ms"
      },
      "request": {
        "tokens": [
          "rewrite_asserts",
          "AssertionRewriter",
          "exec_module",
          "_rewrite_test",
          "rewrite"
        ]
      },
      "response": {
        "results": {
          "rewrite": [
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/assertion/__init__.py",
            "src/_pytest/warning_types.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/terminal.py"
          ],
          "exec_module": [
            "src/_pytest/pathlib.py",
            "src/_pytest/_py/path.py",
            "src/_pytest/assertion/rewrite.py"
          ],
          "_rewrite_test": [
            "src/_pytest/assertion/rewrite.py"
          ],
          "AssertionRewriter": [
            "src/_pytest/assertion/rewrite.py"
          ],
          "rewrite_asserts": [
            "src/_pytest/assertion/rewrite.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-19T12:07:16.505754",
        "usage": "6014.2529010772705 ms"
      },
      "request": {
        "keyword_search_results": {
          "rewrite": [
            "src/_pytest/assertion/rewrite.py",
            "src/_pytest/assertion/__init__.py",
            "src/_pytest/warning_types.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/terminal.py"
          ],
          "exec_module": [
            "src/_pytest/pathlib.py",
            "src/_pytest/_py/path.py",
            "src/_pytest/assertion/rewrite.py"
          ],
          "_rewrite_test": [
            "src/_pytest/assertion/rewrite.py"
          ],
          "AssertionRewriter": [
            "src/_pytest/assertion/rewrite.py"
          ],
          "rewrite_asserts": [
            "src/_pytest/assertion/rewrite.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is related to the process where a number is being mistaken for a docstring, causing the rewrite mechanism to fail with a `TypeError`. This suggests the bug might be in the code related to assertion rewriting in the pytest framework. The error stack trace heavily references `_pytest/assertion/rewrite.py` as being involved in the phase where tests are collected and rewritten, indicating that this file contains most of the relevant logic for modifying or interpreting the test code during import.\n\n1. The keywords `rewrite`, `_rewrite_test`, `AssertionRewriter`, and `rewrite_asserts` all point towards the file `src/_pytest/assertion/rewrite.py` as potentially relevant, as this file is directly referenced at the point where the `TypeError` is encountered. This means that this file likely contains logic for handling or interpreting the content of test modules, including docstrings.\n2. `exec_module` also matches `src/_pytest/assertion/rewrite.py`, reinforcing its relevance, as `exec_module` could represent code execution at the module level where this issue may arise during rewriting.\n\nSince the other files (`src/_pytest/assertion/__init__.py`, `src/_pytest/warning_types.py`, `src/_pytest/config/__init__.py`, `src/_pytest/terminal.py`) listed for the keyword `rewrite` don\u2019t seem to have direct associations with the rewriting logic for test assertions or the specific error trace, they are less relevant for this specific issue.",
        "file_paths": [
          "src/_pytest/assertion/rewrite.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T12:07:22.520043",
        "usage": "8099.4720458984375 ms"
      },
      "request": {
        "file_path": "src/_pytest/assertion/rewrite.py"
      },
      "response": {
        "scratch_pad": "## Analyzing User Instructions\n1.1 The user describes an issue with pytest's assertion rewriting mechanism, where a file that begins with a number causes the rewriting process to misinterpret the number as a docstring.\n1.2 No specific reproduction steps were given, but it seems to mention running tests using `pytest` which results in TypeError.\n1.3 The issue arises during the handling of assertion rewriting in files where a number as the first statement is mistaken for a docstring leading to inappropriate processing.\n1.4 The user's expectation is that numbers should not be treated as a docstring; the problem occurs because the rewriting process fails to distinguish between legitimate docstrings and non-string initial expressions.\n1.5 The probable cause of the error is in the logic that distinguishes between docstrings and other expressions.\n1.6 Possible solutions include adjusting the logic to correctly identify and skip over non-string prefatory elements or ensuring first statements are properly analyzed for being valid strings (docstring) before processing them further.\n\n## Evaluating File Content\n2.1 The file content contains code related to the pytest's assertion rewriting feature, notably starting around the `AssertionRewriter` class and `exec_module` method.\n2.2 The `_rewrite_test` and `rewrite_asserts` functions, along with the `AssertionRewriter` class are directly relevant since they process the module's AST.\n2.3 The `AssertionRewriter.run()` method and `rewrite_asserts()` are prime places where assertion rewriting occurs and would likely control initial checks on a module's first expression.\n2.4 The `is_rewrite_disabled` function in `AssertionRewriter` class likely checks for presence of \"PYTEST_DONT_REWRITE\" within docstrings, possibly contributing to this defect.\n2.5 Since the issue's symptom is related to parsing, the outline here matches with how the code processes a module's initial elements in `if doc is None` and `expect_docstring = doc is None`.\n2.6 It's possible the handling within `AssertionRewriter.run()` or related functions could lead to assumptions that the first expression being a number could be a non-string mistakenly parsed as docstring.\n\nOverall, the identified key component is likely centered around the logic that begins modular AST and initial expression handling and filtering specifically tied to docstring identification.",
        "relevant": true,
        "root_cause": true,
        "relevant_files": [],
        "relevant_symbols": [
          "AssertionRewriter",
          "AssertionRewriter.run",
          "AssertionRewriter.is_rewrite_disabled"
        ],
        "root_cause_symbols": [
          "AssertionRewriter.run",
          "AssertionRewriter.is_rewrite_disabled"
        ]
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-19T12:07:30.619564",
        "usage": "84.04779434204102 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/assertion/rewrite.py",
            "relevant_symbol_keys": [
              "AssertionRewriter",
              "AssertionRewriter.run",
              "AssertionRewriter.is_rewrite_disabled"
            ],
            "root_cause_symbol_keys": [
              "AssertionRewriter.run",
              "AssertionRewriter.is_rewrite_disabled"
            ]
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    \"\"\"\n\n    def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}\n\n    def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])\n\n    def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements\n\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)\n\n    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl\n\n    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 587,
            "start_column": 20981,
            "end_line": 0,
            "end_column": 45167,
            "start_byte": 20981,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}",
            "start_line": 644,
            "start_column": 23739,
            "end_line": 4,
            "end_column": 24244,
            "start_byte": 23739,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 747,
            "start_column": 27569,
            "end_line": 4,
            "end_column": 27823,
            "start_byte": 27569,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 754,
            "start_column": 27829,
            "end_line": 4,
            "end_column": 28061,
            "start_byte": 27829,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 760,
            "start_column": 28067,
            "end_line": 4,
            "end_column": 28206,
            "start_byte": 28067,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])",
            "start_line": 764,
            "start_column": 28212,
            "end_line": 4,
            "end_column": 28468,
            "start_byte": 28212,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 770,
            "start_column": 28474,
            "end_line": 4,
            "end_column": 28689,
            "start_byte": 28474,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 775,
            "start_column": 28695,
            "end_line": 4,
            "end_column": 29244,
            "start_byte": 28695,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 787,
            "start_column": 29250,
            "end_line": 4,
            "end_column": 29816,
            "start_byte": 29250,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 800,
            "start_column": 29822,
            "end_line": 4,
            "end_column": 30818,
            "start_byte": 29822,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 820,
            "start_column": 30824,
            "end_line": 4,
            "end_column": 31087,
            "start_byte": 30824,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements",
            "start_line": 826,
            "start_column": 31093,
            "end_line": 4,
            "end_column": 35994,
            "start_byte": 31093,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_NamedExpr",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)",
            "start_line": 943,
            "start_column": 36000,
            "end_line": 4,
            "end_column": 36689,
            "start_byte": 36000,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 955,
            "start_column": 36695,
            "end_line": 4,
            "end_column": 37253,
            "start_byte": 36695,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 965,
            "start_column": 37259,
            "end_line": 4,
            "end_column": 39668,
            "start_byte": 37259,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 1016,
            "start_column": 39674,
            "end_line": 4,
            "end_column": 39960,
            "start_byte": 39674,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 1022,
            "start_column": 39966,
            "end_line": 4,
            "end_column": 40351,
            "start_byte": 39966,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl",
            "start_line": 1030,
            "start_column": 40357,
            "end_line": 4,
            "end_column": 41795,
            "start_byte": 40357,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 1063,
            "start_column": 41801,
            "end_line": 4,
            "end_column": 42067,
            "start_byte": 41801,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1069,
            "start_column": 42073,
            "end_line": 4,
            "end_column": 42543,
            "start_byte": 42073,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1079,
            "start_column": 42549,
            "end_line": 4,
            "end_column": 45167,
            "start_byte": 42549,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 659,
            "start_column": 24250,
            "end_line": 4,
            "end_column": 27441,
            "start_byte": 24250,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 743,
            "start_column": 27447,
            "end_line": 4,
            "end_column": 27563,
            "start_byte": 27447,
            "end_byte": 4
          }
        ]
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-19T12:07:30.703621",
        "usage": "14044.452905654907 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    \"\"\"\n\n    def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}\n\n    def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])\n\n    def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements\n\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)\n\n    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl\n\n    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 587,
            "start_column": 20981,
            "end_line": 0,
            "end_column": 45167,
            "start_byte": 20981,
            "end_byte": 0
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}",
            "start_line": 644,
            "start_column": 23739,
            "end_line": 4,
            "end_column": 24244,
            "start_byte": 23739,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 747,
            "start_column": 27569,
            "end_line": 4,
            "end_column": 27823,
            "start_byte": 27569,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 754,
            "start_column": 27829,
            "end_line": 4,
            "end_column": 28061,
            "start_byte": 27829,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 760,
            "start_column": 28067,
            "end_line": 4,
            "end_column": 28206,
            "start_byte": 28067,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])",
            "start_line": 764,
            "start_column": 28212,
            "end_line": 4,
            "end_column": 28468,
            "start_byte": 28212,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 770,
            "start_column": 28474,
            "end_line": 4,
            "end_column": 28689,
            "start_byte": 28474,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 775,
            "start_column": 28695,
            "end_line": 4,
            "end_column": 29244,
            "start_byte": 28695,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 787,
            "start_column": 29250,
            "end_line": 4,
            "end_column": 29816,
            "start_byte": 29250,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 800,
            "start_column": 29822,
            "end_line": 4,
            "end_column": 30818,
            "start_byte": 29822,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 820,
            "start_column": 30824,
            "end_line": 4,
            "end_column": 31087,
            "start_byte": 30824,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements",
            "start_line": 826,
            "start_column": 31093,
            "end_line": 4,
            "end_column": 35994,
            "start_byte": 31093,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_NamedExpr",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)",
            "start_line": 943,
            "start_column": 36000,
            "end_line": 4,
            "end_column": 36689,
            "start_byte": 36000,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 955,
            "start_column": 36695,
            "end_line": 4,
            "end_column": 37253,
            "start_byte": 36695,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 965,
            "start_column": 37259,
            "end_line": 4,
            "end_column": 39668,
            "start_byte": 37259,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 1016,
            "start_column": 39674,
            "end_line": 4,
            "end_column": 39960,
            "start_byte": 39674,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 1022,
            "start_column": 39966,
            "end_line": 4,
            "end_column": 40351,
            "start_byte": 39966,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl",
            "start_line": 1030,
            "start_column": 40357,
            "end_line": 4,
            "end_column": 41795,
            "start_byte": 40357,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 1063,
            "start_column": 41801,
            "end_line": 4,
            "end_column": 42067,
            "start_byte": 41801,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1069,
            "start_column": 42073,
            "end_line": 4,
            "end_column": 42543,
            "start_byte": 42073,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1079,
            "start_column": 42549,
            "end_line": 4,
            "end_column": 45167,
            "start_byte": 42549,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 659,
            "start_column": 24250,
            "end_line": 4,
            "end_column": 27441,
            "start_byte": 24250,
            "end_byte": 4
          },
          {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 743,
            "start_column": 27447,
            "end_line": 4,
            "end_column": 27563,
            "start_byte": 27447,
            "end_byte": 4
          }
        ]
      },
      "response": {
        "scratch_pad": "1. Analyze User Instructions:\n1.1 The issue describes a problem in Pytest when a file's first expression is a number. This number is being mistakenly identified as a docstring, leading to errors during the rewrite process.\n1.2 This issue is caused during the module import and rewrite process, where the first expression is misclassified.\n1.3 The expected result should be that numeric expressions at the start of a file are not treated as docstrings.\n1.4 If the user did not provide an expected result, a reasonable expectation would be that the rewrite process correctly identifies a number as not a docstring and processes it without errors.\n1.5 The issue should be fixed by modifying the logic that identifies docstrings in a module to ensure it distinguishes between actual docstrings and initial numeric expressions.\n\n2. Evaluate Symbols:\n- The main concern is likely with the logic in `AssertionRewriter.run` where the docstring or expectation of it is being determined.\n- `is_rewrite_disabled` could be relevant since it decides based on the 'docstring' which affects processing.\n2.1-6. We will go through the relevant sections of the `run` method to verify how docstrings/expressions are being handled and how we can distinguish between them.",
        "symbols": [
          {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "reason": "This function looks at the AST of a module to prepare it for assertion rewriting. The issue is related to mistaking a numeric expression as a docstring, likely occurring in this logical segment."
          }
        ],
        "more_info": [],
        "is_done": true,
        "symbols_scratch_pad": [
          "The method `run` in `AssertionRewriter` class is responsible for identifying docstrings among the module's content. The part of the code that checks for docstrings (`and isinstance(item.value, ast.Constant)`) could be the root cause of the issue. This logic does not accurately differentiate numerical values from string literals, which can result in an integer being mistakenly treated as a string (docstring).",
          "The `is_rewrite_disabled` method relies on the `docstring` that is processed above to determine actions. While the logic here is correct, the input it gets (misidentified docstring) is flawed. If `run` misidentifies the first numeric expression as a docstring, the logic in `is_rewrite_disabled` will be affected."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-19T12:07:44.748102",
        "usage": "2.9909610748291016 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest.assertion.AssertionRewriter",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    \"\"\"\n\n    def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}\n\n    def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])\n\n    def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements\n\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)\n\n    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl\n\n    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
              "start_line": 587,
              "start_column": 20981,
              "end_line": 0,
              "end_column": 45167,
              "start_byte": 20981,
              "end_byte": 0
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.__init__",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}",
              "start_line": 644,
              "start_column": 23739,
              "end_line": 4,
              "end_column": 24244,
              "start_byte": 23739,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.variable",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
              "start_line": 747,
              "start_column": 27569,
              "end_line": 4,
              "end_column": 27823,
              "start_byte": 27569,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.assign",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
              "start_line": 754,
              "start_column": 27829,
              "end_line": 4,
              "end_column": 28061,
              "start_byte": 27829,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.display",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
              "start_line": 760,
              "start_column": 28067,
              "end_line": 4,
              "end_column": 28206,
              "start_byte": 28067,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.helper",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])",
              "start_line": 764,
              "start_column": 28212,
              "end_line": 4,
              "end_column": 28468,
              "start_byte": 28212,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.builtin",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
              "start_line": 770,
              "start_column": 28474,
              "end_line": 4,
              "end_column": 28689,
              "start_byte": 28474,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.explanation_param",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
              "start_line": 775,
              "start_column": 28695,
              "end_line": 4,
              "end_column": 29244,
              "start_byte": 28695,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.push_format_context",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)",
              "start_line": 787,
              "start_column": 29250,
              "end_line": 4,
              "end_column": 29816,
              "start_byte": 29250,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
              "start_line": 800,
              "start_column": 29822,
              "end_line": 4,
              "end_column": 30818,
              "start_byte": 29822,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.generic_visit",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
              "start_line": 820,
              "start_column": 30824,
              "end_line": 4,
              "end_column": 31087,
              "start_byte": 30824,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements",
              "start_line": 826,
              "start_column": 31093,
              "end_line": 4,
              "end_column": 35994,
              "start_byte": 31093,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_NamedExpr",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)",
              "start_line": 943,
              "start_column": 36000,
              "end_line": 4,
              "end_column": 36689,
              "start_byte": 36000,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Name",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)",
              "start_line": 955,
              "start_column": 36695,
              "end_line": 4,
              "end_column": 37253,
              "start_byte": 36695,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
              "start_line": 965,
              "start_column": 37259,
              "end_line": 4,
              "end_column": 39668,
              "start_byte": 37259,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
              "start_line": 1016,
              "start_column": 39674,
              "end_line": 4,
              "end_column": 39960,
              "start_byte": 39674,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
              "start_line": 1022,
              "start_column": 39966,
              "end_line": 4,
              "end_column": 40351,
              "start_byte": 39966,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Call",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl",
              "start_line": 1030,
              "start_column": 40357,
              "end_line": 4,
              "end_column": 41795,
              "start_byte": 40357,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
              "start_line": 1063,
              "start_column": 41801,
              "end_line": 4,
              "end_column": 42067,
              "start_byte": 41801,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
              "start_line": 1069,
              "start_column": 42073,
              "end_line": 4,
              "end_column": 42543,
              "start_byte": 42073,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
              "start_line": 1079,
              "start_column": 42549,
              "end_line": 4,
              "end_column": 45167,
              "start_byte": 42549,
              "end_byte": 4
            }
          ],
          "root_caused_symbols": [
            {
              "name": "_pytest.assertion.AssertionRewriter.run",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
              "start_line": 659,
              "start_column": 24250,
              "end_line": 4,
              "end_column": 27441,
              "start_byte": 24250,
              "end_byte": 4
            },
            {
              "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring",
              "start_line": 743,
              "start_column": 27447,
              "end_line": 4,
              "end_column": 27563,
              "start_byte": 27447,
              "end_byte": 4
            }
          ]
        },
        "symbols_evaluate": {
          "scratch_pad": "1. Analyze User Instructions:\n1.1 The issue describes a problem in Pytest when a file's first expression is a number. This number is being mistakenly identified as a docstring, leading to errors during the rewrite process.\n1.2 This issue is caused during the module import and rewrite process, where the first expression is misclassified.\n1.3 The expected result should be that numeric expressions at the start of a file are not treated as docstrings.\n1.4 If the user did not provide an expected result, a reasonable expectation would be that the rewrite process correctly identifies a number as not a docstring and processes it without errors.\n1.5 The issue should be fixed by modifying the logic that identifies docstrings in a module to ensure it distinguishes between actual docstrings and initial numeric expressions.\n\n2. Evaluate Symbols:\n- The main concern is likely with the logic in `AssertionRewriter.run` where the docstring or expectation of it is being determined.\n- `is_rewrite_disabled` could be relevant since it decides based on the 'docstring' which affects processing.\n2.1-6. We will go through the relevant sections of the `run` method to verify how docstrings/expressions are being handled and how we can distinguish between them.",
          "symbols": [
            {
              "name": "_pytest.assertion.AssertionRewriter.run",
              "file_path": "src/_pytest/assertion/rewrite.py",
              "reason": "This function looks at the AST of a module to prepare it for assertion rewriting. The issue is related to mistaking a numeric expression as a docstring, likely occurring in this logical segment."
            }
          ],
          "more_info": [],
          "is_done": true,
          "symbols_scratch_pad": [
            "The method `run` in `AssertionRewriter` class is responsible for identifying docstrings among the module's content. The part of the code that checks for docstrings (`and isinstance(item.value, ast.Constant)`) could be the root cause of the issue. This logic does not accurately differentiate numerical values from string literals, which can result in an integer being mistakenly treated as a string (docstring).",
            "The `is_rewrite_disabled` method relies on the `docstring` that is processed above to determine actions. While the logic here is correct, the input it gets (misidentified docstring) is flawed. If `run` misidentifies the first numeric expression as a docstring, the logic in `is_rewrite_disabled` will be affected."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/assertion/rewrite.py"
        ],
        "symbols": [
          "_pytest.assertion.AssertionRewriter.run"
        ],
        "code_spans": {
          "_pytest.assertion.AssertionRewriter": {
            "name": "_pytest.assertion.AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "class AssertionRewriter(ast.NodeVisitor):\n    \"\"\"Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of \"@py_assert0\".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    \"\"\"\n\n    def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}\n\n    def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)\n\n    @staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring\n\n    def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name\n\n    def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())\n\n    def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)\n\n    def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])\n\n    def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())\n\n    def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"\n\n    def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)\n\n    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())\n\n    def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))\n\n    def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements\n\n    def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)\n\n    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)\n\n    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n\n    def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)\n\n    def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation\n\n    def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl\n\n    def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl\n\n    def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl\n\n    def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 587,
            "start_column": 20981,
            "end_line": 0,
            "end_column": 45167,
            "start_byte": 20981,
            "end_byte": 0
          },
          "_pytest.assertion.AssertionRewriter.__init__": {
            "name": "_pytest.assertion.AssertionRewriter.__init__",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def __init__(\n        self, module_path: Optional[str], config: Optional[Config], source: bytes\n    ) -> None:\n        super().__init__()\n        self.module_path = module_path\n        self.config = config\n        if config is not None:\n            self.enable_assertion_pass_hook = config.getini(\n                \"enable_assertion_pass_hook\"\n            )\n        else:\n            self.enable_assertion_pass_hook = False\n        self.source = source\n        self.variables_overwrite: Dict[str, str] = {}",
            "start_line": 644,
            "start_column": 23739,
            "end_line": 4,
            "end_column": 24244,
            "start_byte": 23739,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.variable": {
            "name": "_pytest.assertion.AssertionRewriter.variable",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def variable(self) -> str:\n        \"\"\"Get a new variable.\"\"\"\n        # Use a character invalid in python identifiers to avoid clashing.\n        name = \"@py_assert\" + str(next(self.variable_counter))\n        self.variables.append(name)\n        return name",
            "start_line": 747,
            "start_column": 27569,
            "end_line": 4,
            "end_column": 27823,
            "start_byte": 27569,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.assign": {
            "name": "_pytest.assertion.AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def assign(self, expr: ast.expr) -> ast.Name:\n        \"\"\"Give *expr* a name.\"\"\"\n        name = self.variable()\n        self.statements.append(ast.Assign([ast.Name(name, ast.Store())], expr))\n        return ast.Name(name, ast.Load())",
            "start_line": 754,
            "start_column": 27829,
            "end_line": 4,
            "end_column": 28061,
            "start_byte": 27829,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.display": {
            "name": "_pytest.assertion.AssertionRewriter.display",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def display(self, expr: ast.expr) -> ast.expr:\n        \"\"\"Call saferepr on the expression.\"\"\"\n        return self.helper(\"_saferepr\", expr)",
            "start_line": 760,
            "start_column": 28067,
            "end_line": 4,
            "end_column": 28206,
            "start_byte": 28067,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.helper": {
            "name": "_pytest.assertion.AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def helper(self, name: str, *args: ast.expr) -> ast.expr:\n        \"\"\"Call a helper in this module.\"\"\"\n        py_name = ast.Name(\"@pytest_ar\", ast.Load())\n        attr = ast.Attribute(py_name, name, ast.Load())\n        return ast.Call(attr, list(args), [])",
            "start_line": 764,
            "start_column": 28212,
            "end_line": 4,
            "end_column": 28468,
            "start_byte": 28212,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.builtin": {
            "name": "_pytest.assertion.AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def builtin(self, name: str) -> ast.Attribute:\n        \"\"\"Return the builtin called *name*.\"\"\"\n        builtin_name = ast.Name(\"@py_builtins\", ast.Load())\n        return ast.Attribute(builtin_name, name, ast.Load())",
            "start_line": 770,
            "start_column": 28474,
            "end_line": 4,
            "end_column": 28689,
            "start_byte": 28474,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.explanation_param": {
            "name": "_pytest.assertion.AssertionRewriter.explanation_param",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def explanation_param(self, expr: ast.expr) -> str:\n        \"\"\"Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        \"\"\"\n        specifier = \"py\" + str(next(self.variable_counter))\n        self.explanation_specifiers[specifier] = expr\n        return \"%(\" + specifier + \")s\"",
            "start_line": 775,
            "start_column": 28695,
            "end_line": 4,
            "end_column": 29244,
            "start_byte": 28695,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.push_format_context": {
            "name": "_pytest.assertion.AssertionRewriter.push_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def push_format_context(self) -> None:\n        \"\"\"Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        \"\"\"\n        self.explanation_specifiers: Dict[str, ast.expr] = {}\n        self.stack.append(self.explanation_specifiers)",
            "start_line": 787,
            "start_column": 29250,
            "end_line": 4,
            "end_column": 29816,
            "start_byte": 29250,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.pop_format_context": {
            "name": "_pytest.assertion.AssertionRewriter.pop_format_context",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:\n        \"\"\"Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        \"\"\"\n        current = self.stack.pop()\n        if self.stack:\n            self.explanation_specifiers = self.stack[-1]\n        keys = [ast.Constant(key) for key in current.keys()]\n        format_dict = ast.Dict(keys, list(current.values()))\n        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)\n        name = \"@py_format\" + str(next(self.variable_counter))\n        if self.enable_assertion_pass_hook:\n            self.format_variables.append(name)\n        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))\n        return ast.Name(name, ast.Load())",
            "start_line": 800,
            "start_column": 29822,
            "end_line": 4,
            "end_column": 30818,
            "start_byte": 29822,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.generic_visit": {
            "name": "_pytest.assertion.AssertionRewriter.generic_visit",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:\n        \"\"\"Handle expressions we don't have custom code for.\"\"\"\n        assert isinstance(node, ast.expr)\n        res = self.assign(node)\n        return res, self.explanation_param(self.display(res))",
            "start_line": 820,
            "start_column": 30824,
            "end_line": 4,
            "end_column": 31087,
            "start_byte": 30824,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Assert": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n        \"\"\"Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        \"\"\"\n        if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n            from _pytest.warning_types import PytestAssertRewriteWarning\n            import warnings\n\n            # TODO: This assert should not be needed.\n            assert self.module_path is not None\n            warnings.warn_explicit(\n                PytestAssertRewriteWarning(\n                    \"assertion is always true, perhaps remove parentheses?\"\n                ),\n                category=None,\n                filename=self.module_path,\n                lineno=assert_.lineno,\n            )\n\n        self.statements: List[ast.stmt] = []\n        self.variables: List[str] = []\n        self.variable_counter = itertools.count()\n\n        if self.enable_assertion_pass_hook:\n            self.format_variables: List[str] = []\n\n        self.stack: List[Dict[str, ast.expr]] = []\n        self.expl_stmts: List[ast.stmt] = []\n        self.push_format_context()\n        # Rewrite assert into a bunch of statements.\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Constant(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Constant(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Constant(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Constant(assert_.lineno),\n                    ast.Constant(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n            self.statements.append(main_test)\n            if self.format_variables:\n                variables = [\n                    ast.Name(name, ast.Store()) for name in self.format_variables\n                ]\n                clear_format = ast.Assign(variables, ast.Constant(None))\n                self.statements.append(clear_format)\n\n        else:  # Original assertion rewriting\n            # Create failure message.\n            body = self.expl_stmts\n            self.statements.append(ast.If(negation, body, []))\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                explanation = \"\\n>assert \" + explanation\n            else:\n                assertmsg = ast.Constant(\"\")\n                explanation = \"assert \" + explanation\n            template = ast.BinOp(assertmsg, ast.Add(), ast.Constant(explanation))\n            msg = self.pop_format_context(template)\n            fmt = self.helper(\"_format_explanation\", msg)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n\n            body.append(raise_)\n\n        # Clear temporary variables by setting them to None.\n        if self.variables:\n            variables = [ast.Name(name, ast.Store()) for name in self.variables]\n            clear = ast.Assign(variables, ast.Constant(None))\n            self.statements.append(clear)\n        # Fix locations (line numbers/column offsets).\n        for stmt in self.statements:\n            for node in traverse_node(stmt):\n                ast.copy_location(node, assert_)\n        return self.statements",
            "start_line": 826,
            "start_column": 31093,
            "end_line": 4,
            "end_column": 35994,
            "start_byte": 31093,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_NamedExpr": {
            "name": "_pytest.assertion.AssertionRewriter.visit_NamedExpr",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_NamedExpr(self, name: ast.NamedExpr) -> Tuple[ast.NamedExpr, str]:\n        # This method handles the 'walrus operator' repr of the target\n        # name if it's a local variable or _should_repr_global_name()\n        # thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        target_id = name.target.id  # type: ignore[attr-defined]\n        inlocs = ast.Compare(ast.Constant(target_id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(target_id))\n        return name, self.explanation_param(expr)",
            "start_line": 943,
            "start_column": 36000,
            "end_line": 4,
            "end_column": 36689,
            "start_byte": 36000,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Name": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n        # Display the repr of the name if it's a local variable or\n        # _should_repr_global_name() thinks it's acceptable.\n        locs = ast.Call(self.builtin(\"locals\"), [], [])\n        inlocs = ast.Compare(ast.Constant(name.id), [ast.In()], [locs])\n        dorepr = self.helper(\"_should_repr_global_name\", name)\n        test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n        expr = ast.IfExp(test, self.display(name), ast.Constant(name.id))\n        return name, self.explanation_param(expr)",
            "start_line": 955,
            "start_column": 36695,
            "end_line": 4,
            "end_column": 37253,
            "start_byte": 36695,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_BoolOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n        res_var = self.variable()\n        expl_list = self.assign(ast.List([], ast.Load()))\n        app = ast.Attribute(expl_list, \"append\", ast.Load())\n        is_or = int(isinstance(boolop.op, ast.Or))\n        body = save = self.statements\n        fail_save = self.expl_stmts\n        levels = len(boolop.values) - 1\n        self.push_format_context()\n        # Process each operand, short-circuiting if needed.\n        for i, v in enumerate(boolop.values):\n            if i:\n                fail_inner: List[ast.stmt] = []\n                # cond is set in a prior loop iteration below\n                self.expl_stmts.append(ast.If(cond, fail_inner, []))  # noqa\n                self.expl_stmts = fail_inner\n                # Check if the left operand is a ast.NamedExpr and the value has already been visited\n                if (\n                    isinstance(v, ast.Compare)\n                    and isinstance(v.left, ast.NamedExpr)\n                    and v.left.target.id\n                    in [\n                        ast_expr.id\n                        for ast_expr in boolop.values[:i]\n                        if hasattr(ast_expr, \"id\")\n                    ]\n                ):\n                    pytest_temp = self.variable()\n                    self.variables_overwrite[\n                        v.left.target.id\n                    ] = v.left  # type:ignore[assignment]\n                    v.left.target.id = pytest_temp\n            self.push_format_context()\n            res, expl = self.visit(v)\n            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n            expl_format = self.pop_format_context(ast.Constant(expl))\n            call = ast.Call(app, [expl_format], [])\n            self.expl_stmts.append(ast.Expr(call))\n            if i < levels:\n                cond: ast.expr = res\n                if is_or:\n                    cond = ast.UnaryOp(ast.Not(), cond)\n                inner: List[ast.stmt] = []\n                self.statements.append(ast.If(cond, inner, []))\n                self.statements = body = inner\n        self.statements = save\n        self.expl_stmts = fail_save\n        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Constant(is_or))\n        expl = self.pop_format_context(expl_template)\n        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)",
            "start_line": 965,
            "start_column": 37259,
            "end_line": 4,
            "end_column": 39668,
            "start_byte": 37259,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_UnaryOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_UnaryOp(self, unary: ast.UnaryOp) -> Tuple[ast.Name, str]:\n        pattern = UNARY_MAP[unary.op.__class__]\n        operand_res, operand_expl = self.visit(unary.operand)\n        res = self.assign(ast.UnaryOp(unary.op, operand_res))\n        return res, pattern % (operand_expl,)",
            "start_line": 1016,
            "start_column": 39674,
            "end_line": 4,
            "end_column": 39960,
            "start_byte": 39674,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_BinOp": {
            "name": "_pytest.assertion.AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_BinOp(self, binop: ast.BinOp) -> Tuple[ast.Name, str]:\n        symbol = BINOP_MAP[binop.op.__class__]\n        left_expr, left_expl = self.visit(binop.left)\n        right_expr, right_expl = self.visit(binop.right)\n        explanation = f\"({left_expl} {symbol} {right_expl})\"\n        res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n        return res, explanation",
            "start_line": 1022,
            "start_column": 39966,
            "end_line": 4,
            "end_column": 40351,
            "start_byte": 39966,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Call": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Call",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Call(self, call: ast.Call) -> Tuple[ast.Name, str]:\n        new_func, func_expl = self.visit(call.func)\n        arg_expls = []\n        new_args = []\n        new_kwargs = []\n        for arg in call.args:\n            if isinstance(arg, ast.Name) and arg.id in self.variables_overwrite:\n                arg = self.variables_overwrite[arg.id]  # type:ignore[assignment]\n            res, expl = self.visit(arg)\n            arg_expls.append(expl)\n            new_args.append(res)\n        for keyword in call.keywords:\n            if (\n                isinstance(keyword.value, ast.Name)\n                and keyword.value.id in self.variables_overwrite\n            ):\n                keyword.value = self.variables_overwrite[\n                    keyword.value.id\n                ]  # type:ignore[assignment]\n            res, expl = self.visit(keyword.value)\n            new_kwargs.append(ast.keyword(keyword.arg, res))\n            if keyword.arg:\n                arg_expls.append(keyword.arg + \"=\" + expl)\n            else:  # **args have `arg` keywords with an .arg of None\n                arg_expls.append(\"**\" + expl)\n\n        expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n        new_call = ast.Call(new_func, new_args, new_kwargs)\n        res = self.assign(new_call)\n        res_expl = self.explanation_param(self.display(res))\n        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n        return res, outer_expl",
            "start_line": 1030,
            "start_column": 40357,
            "end_line": 4,
            "end_column": 41795,
            "start_byte": 40357,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Starred": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n        # A Starred node can appear in a function call.\n        res, expl = self.visit(starred.value)\n        new_starred = ast.Starred(res, starred.ctx)\n        return new_starred, \"*\" + expl",
            "start_line": 1063,
            "start_column": 41801,
            "end_line": 4,
            "end_column": 42067,
            "start_byte": 41801,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Attribute": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Attribute(self, attr: ast.Attribute) -> Tuple[ast.Name, str]:\n        if not isinstance(attr.ctx, ast.Load):\n            return self.generic_visit(attr)\n        value, value_expl = self.visit(attr.value)\n        res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))\n        res_expl = self.explanation_param(self.display(res))\n        pat = \"%s\\n{%s = %s.%s\\n}\"\n        expl = pat % (res_expl, res_expl, value_expl, attr.attr)\n        return res, expl",
            "start_line": 1069,
            "start_column": 42073,
            "end_line": 4,
            "end_column": 42543,
            "start_byte": 42073,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.visit_Compare": {
            "name": "_pytest.assertion.AssertionRewriter.visit_Compare",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def visit_Compare(self, comp: ast.Compare) -> Tuple[ast.expr, str]:\n        self.push_format_context()\n        # We first check if we have overwritten a variable in the previous assert\n        if isinstance(comp.left, ast.Name) and comp.left.id in self.variables_overwrite:\n            comp.left = self.variables_overwrite[\n                comp.left.id\n            ]  # type:ignore[assignment]\n        if isinstance(comp.left, ast.NamedExpr):\n            self.variables_overwrite[\n                comp.left.target.id\n            ] = comp.left  # type:ignore[assignment]\n        left_res, left_expl = self.visit(comp.left)\n        if isinstance(comp.left, (ast.Compare, ast.BoolOp)):\n            left_expl = f\"({left_expl})\"\n        res_variables = [self.variable() for i in range(len(comp.ops))]\n        load_names = [ast.Name(v, ast.Load()) for v in res_variables]\n        store_names = [ast.Name(v, ast.Store()) for v in res_variables]\n        it = zip(range(len(comp.ops)), comp.ops, comp.comparators)\n        expls = []\n        syms = []\n        results = [left_res]\n        for i, op, next_operand in it:\n            if (\n                isinstance(next_operand, ast.NamedExpr)\n                and isinstance(left_res, ast.Name)\n                and next_operand.target.id == left_res.id\n            ):\n                next_operand.target.id = self.variable()\n                self.variables_overwrite[\n                    left_res.id\n                ] = next_operand  # type:ignore[assignment]\n            next_res, next_expl = self.visit(next_operand)\n            if isinstance(next_operand, (ast.Compare, ast.BoolOp)):\n                next_expl = f\"({next_expl})\"\n            results.append(next_res)\n            sym = BINOP_MAP[op.__class__]\n            syms.append(ast.Constant(sym))\n            expl = f\"{left_expl} {sym} {next_expl}\"\n            expls.append(ast.Constant(expl))\n            res_expr = ast.Compare(left_res, [op], [next_res])\n            self.statements.append(ast.Assign([store_names[i]], res_expr))\n            left_res, left_expl = next_res, next_expl\n        # Use pytest.assertion.util._reprcompare if that's available.\n        expl_call = self.helper(\n            \"_call_reprcompare\",\n            ast.Tuple(syms, ast.Load()),\n            ast.Tuple(load_names, ast.Load()),\n            ast.Tuple(expls, ast.Load()),\n            ast.Tuple(results, ast.Load()),\n        )\n        if len(comp.ops) > 1:\n            res: ast.expr = ast.BoolOp(ast.And(), load_names)\n        else:\n            res = load_names[0]\n\n        return res, self.explanation_param(self.pop_format_context(expl_call))",
            "start_line": 1079,
            "start_column": 42549,
            "end_line": 4,
            "end_column": 45167,
            "start_byte": 42549,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.run": {
            "name": "_pytest.assertion.AssertionRewriter.run",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "def run(self, mod: ast.Module) -> None:\n        \"\"\"Find all assert statements in *mod* and rewrite them.\"\"\"\n        if not mod.body:\n            # Nothing to do.\n            return\n\n        # We'll insert some special imports at the top of the module, but after any\n        # docstrings and __future__ imports, so first figure out where that is.\n        doc = getattr(mod, \"docstring\", None)\n        expect_docstring = doc is None\n        if doc is not None and self.is_rewrite_disabled(doc):\n            return\n        pos = 0\n        item = None\n        for item in mod.body:\n            if (\n                expect_docstring\n                and isinstance(item, ast.Expr)\n                and isinstance(item.value, ast.Constant)\n            ):\n                doc = item.value.value\n                if self.is_rewrite_disabled(doc):\n                    return\n                expect_docstring = False\n            elif (\n                isinstance(item, ast.ImportFrom)\n                and item.level == 0\n                and item.module == \"__future__\"\n            ):\n                pass\n            else:\n                break\n            pos += 1\n        # Special case: for a decorated function, set the lineno to that of the\n        # first decorator, not the `def`. Issue #4984.\n        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n            lineno = item.decorator_list[0].lineno\n        else:\n            lineno = item.lineno\n        # Now actually insert the special imports.\n        if sys.version_info >= (3, 10):\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\", lineno=lineno, col_offset=0),\n                ast.alias(\n                    \"_pytest.assertion.rewrite\",\n                    \"@pytest_ar\",\n                    lineno=lineno,\n                    col_offset=0,\n                ),\n            ]\n        else:\n            aliases = [\n                ast.alias(\"builtins\", \"@py_builtins\"),\n                ast.alias(\"_pytest.assertion.rewrite\", \"@pytest_ar\"),\n            ]\n        imports = [\n            ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases\n        ]\n        mod.body[pos:pos] = imports\n\n        # Collect asserts.\n        nodes: List[ast.AST] = [mod]\n        while nodes:\n            node = nodes.pop()\n            for name, field in ast.iter_fields(node):\n                if isinstance(field, list):\n                    new: List[ast.AST] = []\n                    for i, child in enumerate(field):\n                        if isinstance(child, ast.Assert):\n                            # Transform assert.\n                            new.extend(self.visit(child))\n                        else:\n                            new.append(child)\n                            if isinstance(child, ast.AST):\n                                nodes.append(child)\n                    setattr(node, name, new)\n                elif (\n                    isinstance(field, ast.AST)\n                    # Don't recurse into expressions as they can't contain\n                    # asserts.\n                    and not isinstance(field, ast.expr)\n                ):\n                    nodes.append(field)",
            "start_line": 659,
            "start_column": 24250,
            "end_line": 4,
            "end_column": 27441,
            "start_byte": 24250,
            "end_byte": 4
          },
          "_pytest.assertion.AssertionRewriter.is_rewrite_disabled": {
            "name": "_pytest.assertion.AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "file_content": "@staticmethod\n    def is_rewrite_disabled(docstring: str) -> bool:\n        return \"PYTEST_DONT_REWRITE\" in docstring",
            "start_line": 743,
            "start_column": 27447,
            "end_line": 4,
            "end_column": 27563,
            "start_byte": 27447,
            "end_byte": 4
          }
        }
      }
    }
  ]
}