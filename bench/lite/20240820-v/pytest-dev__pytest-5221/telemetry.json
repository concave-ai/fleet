{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-5221",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-19T13:33:50.451429",
        "usage": "1474.2138385772705 ms"
      },
      "request": {
        "repo_tokens": [
          "summary_passes",
          "Cache",
          "summary_failures",
          "visit_Name",
          "fixturenames",
          "push_format_context",
          "extract_suffixes",
          "processoption",
          "fnmatch_lines",
          "LogCaptureHandler",
          "append_collect_error",
          "_read_pyc",
          "getpluginversioninfo",
          "typename",
          "cacheprovider",
          "find",
          "summary_errors",
          "_plugin_nameversions",
          "ids",
          "append_collect_skipped",
          "exit",
          "traceback",
          "_consider_importhook",
          "_validate_args",
          "delattr",
          "PYTEST_WARNS_UNKNOWN_KWARGS",
          "CallInfo",
          "write_fspath_result",
          "CLOSE_STDIN",
          "cwd_relative_nodeid",
          "mkdir",
          "getpathnode",
          "obj",
          "pytest_warning_captured",
          "FunctionMixin",
          "_import_plugin_specs",
          "_given_basetemp",
          "YIELD_TESTS",
          "addSkip",
          "last_failed_paths",
          "add_global_property",
          "store_mark",
          "resultlog",
          "OutcomeException",
          "parseconfig",
          "_format_args",
          "_ensure_basetemp",
          "runpytest",
          "builtin_plugins",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "getlocals",
          "_getnextfixturedef",
          "_get_allow_unicode_flag",
          "check_interactive_exception",
          "id",
          "getitems",
          "pastebin",
          "capsys",
          "NFPlugin",
          "approx",
          "RN",
          "deselect_by_keyword",
          "_early_rewrite_bailout",
          "_get_increasing_order",
          "_collect",
          "safeformat",
          "_determine_show_progress_info",
          "__unicode__",
          "pytest_sessionstart",
          "writeorg",
          "_translate_non_printable",
          "cleanup_numbered_dir",
          "is_rewrite_disabled",
          "_get_plugin_specs_as_list",
          "_rewrite_test",
          "_assertion_supported",
          "consider_module",
          "Failed",
          "_ensure_supporting_files",
          "pathlib",
          "terminal",
          "PytestPluginManager",
          "buffer",
          "pytest_runtest_call",
          "TEST_OUTCOME",
          "_compilecounter",
          "suspend_global_capture",
          "SysCaptureBinary",
          "get_lines_after",
          "pytest_internalerror",
          "pytestPDB",
          "runtest",
          "getrawcode",
          "__str__",
          "Exit",
          "getlocation",
          "UsageError",
          "SetupState",
          "_ensure_only_one_capture_fixture",
          "RE_IMPORT_ERROR_NAME",
          "match",
          "write_ensure_prefix",
          "_check_scope",
          "pytester",
          "_inject_setup_method_fixture",
          "EXIT_NOTESTSCOLLECTED",
          "_is_capturing",
          "Session",
          "activate_fixture",
          "setenv",
          "IGNORE_PAM",
          "getexplanation",
          "_call_and_format_exception",
          "pytest_report_collectionfinish",
          "classnamefilter",
          "args",
          "assign",
          "get_plugin_manager",
          "MultipleDoctestFailures",
          "showlongtestinfo",
          "ReprLocals",
          "is_package",
          "_matchnodes",
          "get_location",
          "_bestrelpath_cache",
          "NOTSET",
          "excinfo",
          "UnitTestCase",
          "fnmatch_lines_random",
          "LsofFdLeakChecker",
          "CallSpec2",
          "_iter_rewritable_modules",
          "raises",
          "_write_progress_information_filling_space",
          "addFailure",
          "cut",
          "readlines",
          "records",
          "pytest_assertrepr_compare",
          "getcrashentry",
          "_runtest_for_main",
          "pytest_enter_pdb",
          "collect_one_node",
          "Module",
          "consider_conftest",
          "compile",
          "_config_for_test",
          "notset",
          "runpython_c",
          "pytest_pycollect_makeitem",
          "from_item",
          "frame",
          "getargs",
          "pytest_collectstart",
          "_checkversion",
          "set_when",
          "FDCapture",
          "_force_symlink",
          "countoutcomes",
          "scope",
          "__test__",
          "compile_",
          "_LiveLoggingStreamHandler",
          "_init_runner_class",
          "ApproxBase",
          "_reprcompare",
          "_validate_usepdb_cls",
          "pytest_collection_modifyitems",
          "_fix_spoof_python2",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "getfixturevalue",
          "_make_xunit_fixture",
          "isdatacls",
          "PY36",
          "pytest_collect_directory",
          "ExceptionRepr",
          "_getconftestmodules",
          "nofuncargs",
          "re_match_lines_random",
          "_matches_prefix_or_glob_option",
          "get_common_ancestor",
          "pop_format_context",
          "scope2index",
          "pytest_report_teststatus",
          "ReprFailDoctest",
          "PytestCollectionWarning",
          "NodeMarkers",
          "_collectfile",
          "_dump_lines",
          "fix_cache_order",
          "CollectErrorRepr",
          "_for_parametrize",
          "_try_load_conftest",
          "SysModulesSnapshot",
          "rmtree",
          "_format_final_exc_line",
          "SubRequest",
          "HelpAction",
          "type",
          "pytest_fixture_post_finalizer",
          "python",
          "stop_global_capturing",
          "build_summary_stats_line",
          "visit_Starred",
          "reports",
          "extract_from",
          "mktemp",
          "getreports",
          "initialnames",
          "matchnodes",
          "fileno",
          "families",
          "_format_assertmsg",
          "DEFAULT_RELATIVE_TOLERANCE",
          "isdict",
          "LogCaptureFixture",
          "fail",
          "_warn_already_imported",
          "context",
          "explanation_param",
          "mkpydir",
          "AssertionRewritingHook",
          "getoption",
          "from_call",
          "MoreQuietAction",
          "find_prefixed",
          "out",
          "_PytestWrapper",
          "listextrakeywords",
          "RemovedInPytest4Warning",
          "getstatement",
          "template",
          "N",
          "pytest_logwarning",
          "get_records",
          "maybe_delete_a_numbered_dir",
          "_getscopeitem",
          "popen",
          "pytest_collect_file",
          "conftest_options",
          "EXIT_OK",
          "getfixtureclosure",
          "readline",
          "Interrupted",
          "TracebackEntry",
          "pytest_runtest_protocol",
          "record_tuples",
          "istrue",
          "_teardown_towards",
          "summary_warnings",
          "_seen",
          "write_captured_output",
          "location",
          "_cachedir",
          "_resolve_arg_value_types",
          "done",
          "MarkMapping",
          "post_mortem",
          "pytest_deselected",
          "__version__",
          "_approx_scalar",
          "NodeKeywords",
          "__setitem__",
          "skip",
          "_add_simple",
          "cached_eval",
          "_is_marked_for_rewrite",
          "for_later",
          "_update_current_test_var",
          "record_xml_attribute",
          "SysCapture",
          "resolve_from_str",
          "PytestAssertRewriteWarning",
          "print_teardown_sections",
          "append_error",
          "_truncate_explanation",
          "writelines",
          "funcargnames",
          "_folded_skips",
          "statement",
          "start_capturing",
          "list",
          "pytest_plugin_registered",
          "line",
          "helpconfig",
          "MarkEvaluator",
          "re_match_lines",
          "_ALLOW_MARKERS",
          "close",
          "PytestConfigWarning",
          "format",
          "_do_configure",
          "get_open_files",
          "call_runtest_hook",
          "node_reporter",
          "pytest_generate_tests",
          "_py_ext_re",
          "compat",
          "_getentrysource",
          "doctest",
          "rex_outcome",
          "_tmppath_factory",
          "Function",
          "get_parametrized_fixture_keys",
          "tmpdir_factory",
          "PyobjMixin",
          "_getcrashline",
          "ReprExceptionInfo",
          "determine_setup",
          "caplog",
          "visit_Assert",
          "pytest_make_collect_report",
          "isparseable",
          "pytest_keyboard_interrupt",
          "getfuncargvalue",
          "patchsysdict",
          "syspathinsert",
          "scopes",
          "get_user",
          "parse_setoption",
          "BaseReport",
          "warning_record_to_str",
          "_getvaluepath",
          "_main",
          "simple",
          "File",
          "CwdSnapshot",
          "visit_BinOp",
          "Junit",
          "HookRecorder",
          "LineMatcher",
          "pytest_collection",
          "_setoption",
          "pytest_runtestloop",
          "_show_fixtures_per_test",
          "repr_instance",
          "show_test_item",
          "get_source",
          "getsource",
          "parse_known_and_unknown_args",
          "function",
          "_get_runner",
          "cleanup_candidates",
          "makefile",
          "setitem",
          "ApproxScalar",
          "start",
          "MODULE_NOT_FOUND_ERROR",
          "capture",
          "add_funcarg_pseudo_fixture_def",
          "_get_verbose_word",
          "set_session",
          "get_lock_path",
          "eval",
          "_version",
          "_start",
          "_typ_map",
          "_ensure_unconfigure",
          "__version_tuple__",
          "_import_pdbcls",
          "chdir",
          "_node_location_to_relpath",
          "runner",
          "readouterr",
          "_postmortem_traceback",
          "node",
          "_initini",
          "teardown_exact",
          "get_default_arg_names",
          "junitxml",
          "illegal_xml_re",
          "cls",
          "repr_args",
          "spawn",
          "ReprEntry",
          "_exec_lsof",
          "Instance",
          "ReprEntryNative",
          "keywords",
          "_report_unserialization_failure",
          "_outrep_summary",
          "_recursive_debug",
          "module",
          "ReprTraceback",
          "source",
          "resolve_fixture_function",
          "PyobjContext",
          "winpymap",
          "pytest_report_from_serializable",
          "pop_outerr_to_orig",
          "_log",
          "_showfixtures_main",
          "Class",
          "wrap_function_to_error_out_if_called_directly",
          "visit_Call_legacy",
          "DEFAULT_MAX_LINES",
          "LEVELNAME_FMT_REGEX",
          "consider_preparse",
          "to_xml",
          "_pytest",
          "PytestExperimentalApiWarning",
          "__call__",
          "__nonzero__",
          "handler",
          "_truncate_recursive_traceback",
          "_repr_style",
          "update",
          "_width_of_current_line",
          "ensure_deletable",
          "applymarker",
          "_PLUGGY_DIR",
          "_pyfuncitem",
          "USAGE_MSG",
          "python_api",
          "repr_unicode",
          "_compare_eq_verbose",
          "prepare",
          "TempdirFactory",
          "EXIT_INTERNALERROR",
          "formatrepr",
          "assert_contains",
          "XFailed",
          "summary_stats",
          "_callfinalizers",
          "errors",
          "head_line",
          "idmaker",
          "_inject_setup_class_fixture",
          "set_repr_style",
          "_parsearg",
          "_getindent",
          "iter_markers_with_node",
          "display",
          "_callhelper",
          "Node",
          "_printcollecteditems",
          "pytest_runtest_logstart",
          "add_property",
          "MarkDecorator",
          "NoneType",
          "showlocals",
          "_sys_snapshot",
          "register_assert_rewrite",
          "warning_types",
          "directory_arg",
          "Package",
          "consider_env",
          "WARNS_EXEC",
          "get_fslocation_from_item",
          "_strtobool",
          "rewrite",
          "showheader",
          "_get_override_ini_value",
          "__repr__",
          "getini",
          "_inject_setup_function_fixture",
          "helper",
          "istestfunction",
          "deactivate_fixture",
          "parse",
          "_running_on_ci",
          "_basetemp",
          "FastFilesCompleter",
          "showversion",
          "gethookproxy",
          "indent",
          "__getitem__",
          "visit_Call_35",
          "get_empty_parameterset_mark",
          "log_outcome",
          "EncodedFile",
          "ihook",
          "_PY3",
          "prune_dependency_tree",
          "_importtestmodule",
          "_get_checker",
          "warn_about_none_ast",
          "_match_lines_random",
          "get_optionflags",
          "LogXML",
          "Skipped",
          "_compare_eq_set",
          "_some_str",
          "_should_repr_global_name",
          "pytest_exception_interact",
          "TestReport",
          "_init_pdb",
          "_ConfigDeprecated",
          "MultiCapture",
          "yield_fixture",
          "_resolve_arg_ids",
          "kwargs",
          "nodeid",
          "TestCaseFunction",
          "get_exconly",
          "_preparse",
          "_mark_plugins_for_rewrite",
          "UnformattedWarning",
          "visit_Compare",
          "getfslineno",
          "reorder_items",
          "message",
          "__init__",
          "_issue_warning_captured",
          "visit_UnaryOp",
          "_is_numpy_array",
          "normalize_mark_list",
          "CFG_PYTEST_SECTION",
          "when",
          "_yield_comparisons",
          "_install_capture_fixture_on_item",
          "isatty",
          "catch_warnings_for_item",
          "params",
          "_check_type",
          "ApproxMapping",
          "Source",
          "pytest_addoption",
          "parse_args",
          "listchain",
          "get",
          "NoCapture",
          "PYTEST_PARAM_UNKNOWN_KWARGS",
          "__all__",
          "listnames",
          "_finalize",
          "safe_text_dupfile",
          "cookie_re",
          "PYC_TAIL",
          "append",
          "hasopt",
          "getstatementrange_ast",
          "assert_contains_lines",
          "_set_opt_strings",
          "pytest_pycollect_makemodule",
          "_genfunctions",
          "Config",
          "_readline_workaround",
          "pyobj_property",
          "from_current",
          "bin_xml_escape",
          "tmp_path_factory",
          "_getpytestargs",
          "get_closest_marker",
          "isclass",
          "REPORT_COLLECTING_RESOLUTION",
          "__delitem__",
          "get_real_func",
          "SysPathsSnapshot",
          "_write_pyc",
          "_is_mocked",
          "_get_xunit_setup_teardown",
          "funcargs",
          "RaisesContext",
          "matchreport",
          "set_location",
          "essential_plugins",
          "parsefactories",
          "_should_rewrite",
          "prog",
          "update_testcase_duration",
          "DEFAULT_LOG_DATE_FORMAT",
          "linecomp",
          "pytest_collectreport",
          "mark_rewrite",
          "unittest",
          "FILE_OR_DIR",
          "_getparser",
          "_call_with_optional_argument",
          "generic_visit",
          "_getfailureheadline",
          "skipped",
          "CaptureResult",
          "capfdbinary",
          "abspath",
          "register_cleanup_lock_removal",
          "isfunction",
          "EMPTY_BUFFER",
          "pytest_itemstart",
          "FIXTURE_FUNCTION_CALL",
          "DOCTEST_REPORT_CHOICES",
          "addSuccess",
          "istext",
          "safe_getattr",
          "get_scope_node",
          "addError",
          "AssertionState",
          "raiseerror",
          "assertoutcome",
          "pytest_pyfunc_call",
          "ishidden",
          "_show_fixture_action",
          "NoMatch",
          "getmodulecol",
          "_getglobals",
          "_perform_collect",
          "getreportopt",
          "DummyRewriteHook",
          "_check_all_skipped",
          "cacheshow",
          "format_exception_only",
          "load_module",
          "pytest_configure",
          "copy_example",
          "find_module",
          "_check_initialpaths_for_relpath",
          "_recurse",
          "WarningsRecorder",
          "xfail",
          "_getini",
          "_runtest_for",
          "logging",
          "_pop_and_teardown",
          "warn",
          "_PY2",
          "run",
          "hookspec",
          "Item",
          "report_collect",
          "spawn_pytest",
          "messages",
          "setall",
          "name2fixturedefs",
          "fslocation",
          "_state",
          "astcache",
          "addoption",
          "reportinfo",
          "finish_recording",
          "repr",
          "ReprTracebackNative",
          "inline_runsource",
          "fromdictargs",
          "check_strict_xfail",
          "cmdline",
          "unary_map",
          "annotated_getattr",
          "get_unpacked_marks",
          "runpytest_inprocess",
          "capstdout",
          "_resume",
          "getfixturedefs",
          "__array_ufunc__",
          "setupplan",
          "strip",
          "start_global_capturing",
          "PYTEST_ENSURETEMP",
          "pytest_leave_pdb",
          "_markers",
          "_warn_if_env_name_is_not_str",
          "getparent",
          "_imp_find_module",
          "_idval",
          "PYTESTER_COPY_EXAMPLE",
          "FIXTURE_NAMED_REQUEST",
          "Traceback",
          "issequence",
          "safe_isclass",
          "deselect_by_mark",
          "get_scope_package",
          "GETFUNCARGVALUE",
          "scope2props",
          "_fix_unittest_skip_decorator",
          "ensure_reset_dir",
          "MarkGenerator",
          "ApproxSequencelike",
          "ExceptionChainRepr",
          "exconly",
          "SHOW_PYTEST_WARNINGS_ARG",
          "pytest_terminal_summary",
          "wrap_session",
          "_find_last_non_hidden_frame",
          "LOGLEVEL_COLOROPTS",
          "delenv",
          "finish",
          "_in_venv",
          "collect_by_name",
          "repr_traceback",
          "getplugin",
          "showfixtures",
          "config",
          "getinicfg",
          "binop_map",
          "add_cleanup",
          "assert_outcomes",
          "_colorama_workaround",
          "cached_result",
          "builtin",
          "warns",
          "addExpectedFailure",
          "_truncate_by_char_count",
          "record_property",
          "TimeoutExpired",
          "__enter__",
          "_idvalset",
          "newinstance",
          "_register_with_pkg_resources",
          "getparam",
          "PrintHelp",
          "_makepath",
          "rewrite_asserts",
          "ensuretemp",
          "fillfixtures",
          "DoctestTextfile",
          "showfspath",
          "recursionindex",
          "consider_pluginarg",
          "make_numbered_dir",
          "deprecated_call",
          "filter",
          "_saferepr",
          "_inject_setup_teardown_fixtures",
          "version_tuple",
          "defaultfuncargprefixmarker",
          "toterminal",
          "global_and_fixture_disabled",
          "repr_excinfo",
          "execute",
          "getfirstlinesource",
          "DEFAULT_MAX_CHARS",
          "inline_genitems",
          "DontReadFromInput",
          "write",
          "addsection",
          "pytest_unconfigure",
          "FixtureRequest",
          "findsource",
          "runpytest_subprocess",
          "delitem",
          "param",
          "_getlines",
          "getnode",
          "_PY_DIR",
          "with_args",
          "truncate_locals",
          "make_hook_recorder",
          "_factorytraceback",
          "PdbInvoke",
          "_rget_with_confmod",
          "exprinfo",
          "_test_pytest_function",
          "RunResult",
          "FixtureLookupError",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "visit_Attribute",
          "markname",
          "_getautousenames",
          "getdecoded",
          "_legal_xml_re",
          "skipping",
          "is_globally_capturing",
          "_non_printable_ascii_translate_table",
          "_attempt_to_close_capture_file",
          "isnosetest",
          "find_suffixes",
          "copy",
          "pytest_addhooks",
          "make_properties_node",
          "CaptureFixture",
          "_py36_windowsconsoleio_workaround",
          "_code",
          "create_cleanup_lock",
          "write_line",
          "pytest_cmdline_main",
          "teardown_all",
          "LOCK_TIMEOUT",
          "raise_on_kwargs",
          "_result",
          "_compare_eq_cls",
          "repr_traceback_entry",
          "_write_report_lines_from_hooks",
          "isinitpath",
          "_addfinalizer",
          "fspath",
          "set_level",
          "PytestArg",
          "collect",
          "_validate_if_using_arg_names",
          "is_generator",
          "PyCollector",
          "ReprFileLocation",
          "filename_arg",
          "SEP",
          "getfuncargnames",
          "call_optional",
          "get_statement_startend2",
          "COLLECT_FAKEMODULE_ATTRIBUTES",
          "get_option_ini",
          "is_capturing",
          "from_item_and_call",
          "_striptext",
          "addUnexpectedSuccess",
          "resolve",
          "pytest_report_to_serializable",
          "ResultLog",
          "_pdb_cls",
          "_cmp_raises_type_error",
          "pytest_runtest_setup",
          "isset",
          "getrepr",
          "_is_unittest_unexpected_success_a_failure",
          "PytestUnhandledCoroutineWarning",
          "version",
          "_getobj",
          "FixtureManager",
          "PytestCacheWarning",
          "_compare_eq_sequence",
          "scopename2class",
          "RAISES_EXEC",
          "_NodeReporter",
          "teardown_nose",
          "finalize",
          "runpython",
          "setuponly",
          "deprecated",
          "resume_global_capture",
          "scopeproperty",
          "REGEX_TYPE",
          "ensure_newline",
          "__take_sys_modules_snapshot",
          "import_plugin",
          "getcalls",
          "is_true",
          "makeini",
          "setup",
          "_parse_lsof_output",
          "getfixturemarker",
          "_argcomplete",
          "pytest_runtest_logfinish",
          "tmp_path",
          "addinivalue_line",
          "addfinalizer",
          "_find_parametrized_scope",
          "MARK_GEN",
          "write_log_entry",
          "_disable_output_capturing_for_darwin",
          "encoding",
          "setmulti2",
          "__hash__",
          "create_terminal_writer",
          "_iter_all_modules",
          "getvalueorskip",
          "RESULT_LOG",
          "TYPE_CHECKING",
          "filter_traceback",
          "getfailedcollections",
          "Frame",
          "for_config",
          "resume_fixture",
          "DEFAULT_LOG_FORMAT",
          "parametrize",
          "ReprFuncArgs",
          "_compare_eq_dict",
          "teardown",
          "__ne__",
          "EXIT_TESTSFAILED",
          "listoutcomes",
          "_get_report_choice",
          "ParsedCall",
          "_locationline",
          "passed",
          "MonkeyPatch",
          "register",
          "FuncFixtureInfo",
          "AssertionRewriter",
          "tbfilter",
          "install_importhook",
          "parseconfigure",
          "_addexcinfo",
          "__array_priority__",
          "saferepr",
          "getmodpath",
          "stopTest",
          "read",
          "__next__",
          "showhelp",
          "getcfg",
          "runitem",
          "pytest_ignore_collect",
          "FuncargnamesCompatAttr",
          "gethookrecorder",
          "verbosity",
          "longreprtext",
          "append_pass",
          "is_potential_nosetest",
          "perform_collect",
          "FixtureFunctionMarker",
          "_notin_text",
          "capture_fixtures",
          "_prepareconfig",
          "try_cleanup",
          "mangle_test_address",
          "PYTEST_LOGWARNING",
          "_format_boolop",
          "PytestDeprecationWarning",
          "pytest_cmdline_parse",
          "_assert_start_repr",
          "monkeypatch",
          "_format_action_invocation",
          "set_trace",
          "argnames",
          "_log_text",
          "CollectReport",
          "WarningReport",
          "getimfunc",
          "add_stats",
          "FunctionDefinition",
          "_warn_about_missing_assertion",
          "genitems",
          "stop_capturing",
          "reorder_items_atscope",
          "section",
          "autouse",
          "_excinfo",
          "parseoutcomes",
          "matchmark",
          "_handle_skip",
          "relline",
          "pytest_sessionfinish",
          "Mark",
          "ischildnode",
          "_diff_text",
          "parse_num",
          "exec_",
          "_should_truncate_item",
          "main",
          "matchkeyword",
          "fail_marker",
          "read_global_capture",
          "FDCaptureBinary",
          "get_terminal_writer",
          "get_sections",
          "hasplugin",
          "_processopt",
          "pytest_doctest_prepare_content",
          "names_closure",
          "ApproxNumpy",
          "truncate_if_required",
          "__bool__",
          "_recursive_list_map",
          "style",
          "write_sep",
          "repr_locals",
          "notify_exception",
          "DOCTEST_REPORT_CHOICE_NONE",
          "recwarn",
          "path",
          "_get_continue_on_failure",
          "__eq__",
          "scopemismatch",
          "resume_capturing",
          "nextitem",
          "_traceback",
          "parts",
          "add_report_section",
          "getcall",
          "set_log_path",
          "Entry",
          "README_CONTENT",
          "fail_fixturefunc",
          "pop",
          "item_capture",
          "_teardown_yield_fixture",
          "_makeitem",
          "isiterable",
          "Testdir",
          "names",
          "_get_active_fixturedef",
          "__len__",
          "call_fixture_func",
          "addini",
          "pytest_report_header",
          "_checkargnotcontained",
          "DoctestModule",
          "name",
          "getgroup",
          "_get_allow_bytes_flag",
          "make_numbered_dir_with_cleanup",
          "alias",
          "mark",
          "startTest",
          "CaptureManager",
          "suspend_fixture",
          "dummy_context_manager",
          "suspend_capturing",
          "get_data",
          "add_marker",
          "_format_lines",
          "_addoption",
          "popcall",
          "_warn_incompatibility_with_xunit2",
          "wasvalid",
          "PYC_EXT",
          "tmpdir",
          "nose",
          "_patched_find_module",
          "tb",
          "FixtureDef",
          "write_docstring",
          "istestclass",
          "session",
          "PdbTrace",
          "_makefile",
          "_io",
          "_compute_fixture_value",
          "_pluginmanager",
          "_importconftest",
          "debugging",
          "DropShorterLongHelpFormatter",
          "append_failure",
          "exc_clear",
          "importorskip",
          "testdir",
          "getslaveinfoline",
          "RAISES_MESSAGE_PARAMETER",
          "deindent",
          "_setup_cli_logging",
          "pytest_collection_finish",
          "funcnamefilter",
          "pytest_load_initial_conftests",
          "undo",
          "SafeRepr",
          "pytest_cmdline_preparse",
          "_get_progress_information_message",
          "getstatementrange",
          "repr_failure",
          "default_plugins",
          "_setup_collect_fakemodule",
          "_istrue",
          "from_config",
          "_schedule_finalizers",
          "setattr",
          "hasinit",
          "_getconftest_pathlist",
          "hookimpl",
          "nodes",
          "_initrequest",
          "_legal_chars",
          "FixtureLookupErrorRepr",
          "ASCII_IS_DEFAULT_ENCODING",
          "check_xfail_no_run",
          "parse_hookimpl_opts",
          "flow_marker",
          "tracebackcutdir",
          "OptionGroup",
          "reset",
          "_testcase",
          "FSCollector",
          "LFPlugin",
          "_repr_failure_py",
          "hasnew",
          "own_markers",
          "format_explanation",
          "visit_BoolOp",
          "getitem",
          "cache_dir_from_config",
          "BOM_UTF8",
          "capstderr",
          "get_dirs_from_args",
          "_set_initial_conftests",
          "_split_explanation",
          "_suspend",
          "iter_markers",
          "_get_fixturestack",
          "disabled",
          "addhooks",
          "chain",
          "capsysbinary",
          "syspath_prepend",
          "getfailures",
          "inline_run",
          "_report_keyboardinterrupt",
          "TerminalRepr",
          "path_matches_patterns",
          "snap",
          "_mk_tmp",
          "FormattedExcinfo",
          "record_testreport",
          "warnings",
          "PseudoFixtureDef",
          "EXIT_INTERRUPTED",
          "matching_platform",
          "pytest_itemcollected",
          "stepwise",
          "TerminalReporter",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "ArgumentError",
          "_legal_ranges",
          "call_and_report",
          "_addoption_instance",
          "freeze_support",
          "KeywordMapping",
          "_config",
          "_inject_setup_module_fixture",
          "fnmatch_ex",
          "variable",
          "PY35",
          "get_real_method",
          "CollectError",
          "Code",
          "_to_json",
          "LoggingPlugin",
          "ColoredLevelFormatter",
          "Collector",
          "merge_family",
          "_getcapture",
          "scopenum_function",
          "__setattr__",
          "PYTEST_CONFIG_GLOBAL",
          "suspend",
          "restore",
          "_opentestcase",
          "doctest_namespace",
          "append_skipped",
          "WarningsChecker",
          "StepwisePlugin",
          "get_actual_log_level",
          "_setup_fixtures",
          "pytest_runtest_makereport",
          "get_public_names",
          "get_config",
          "LineMatcher_fixture",
          "ParameterSet",
          "DoctestItem",
          "EXIT_USAGEERROR",
          "locals",
          "_get_non_fixture_func",
          "instance",
          "_tryconvertpyarg",
          "_log_cli_enabled",
          "catching_logs",
          "CACHEDIR_TAG_CONTENT",
          "_get_flag_lookup",
          "resume",
          "tolerance",
          "_get_marks",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "__iter__",
          "__getattr__",
          "_enter_pdb",
          "__exit__",
          "co_equal",
          "Metafunc",
          "PytestUnknownMarkWarning",
          "BASE_TYPE",
          "set",
          "entrysep",
          "errisinstance",
          "_patch_unwrap_mock_aware",
          "invalidraise",
          "setns",
          "_getreprcrash",
          "_splitnode",
          "result",
          "pytest_runtest_logreport",
          "Parser",
          "istestfunc",
          "outcomes",
          "iscoroutinefunction",
          "combined_with",
          "fixtures",
          "fullsource",
          "_from_json",
          "get_skip_exceptions",
          "LineComp",
          "at_level",
          "assertrepr_compare",
          "show_fixtures_per_test",
          "failed",
          "EMPTY_PARAMETERSET_OPTION",
          "_call_reprcompare",
          "MyOptionParser",
          "TempPathFactory",
          "getbasetemp",
          "clear",
          "__module__",
          "_teardown_with_finalization",
          "value",
          "error",
          "pytest_make_parametrize_id",
          "ApproxDecimal",
          "putaround",
          "PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST",
          "_ascii_escaped_by_config",
          "_prunetraceback",
          "ExceptionInfo",
          "emit",
          "RUNNER_CLASS",
          "pytest_fixture_setup",
          "_match_lines",
          "count_towards_summary",
          "isattrs",
          "Notset",
          "maketxtfile",
          "parse_known_args",
          "makeconftest",
          "derive_importpath",
          "str",
          "_PYTEST_DIR",
          "num_mock_patch_args",
          "stop",
          "exists",
          "runtestprotocol",
          "category",
          "pytestconfig",
          "_fillfixtures",
          "fixture",
          "check_testcase_implements_trial_reporter",
          "add_attribute",
          "getvalue",
          "_get_global_properties_node",
          "ecu",
          "FSHookProxy",
          "_is_setup_py",
          "_matchfactories",
          "freeze_includes",
          "own_mark_names",
          "create_new_paste",
          "text",
          "pytest_runtest_teardown",
          "parse_hookspec_opts",
          "PytestWarning",
          "_trace",
          "__missing__",
          "short_test_summary",
          "_ensure_immutable_ids",
          "ConftestImportFailure",
          "get_direct_param_fixture_func",
          "_saved",
          "Argument",
          "capfd",
          "makedir",
          "_non_numeric_type_error",
          "cache",
          "_ensure_removed_sysmodule",
          "getfixtureinfo",
          "assertion",
          "attrs",
          "_is_doctest",
          "_compare_eq_iterable",
          "python_keywords_allowed_list",
          "makepyfile"
        ]
      },
      "response": {
        "keywords": [
          "fixtures",
          "fixture",
          "mark",
          "getfixtureinfo",
          "FixtureManager",
          "scopes",
          "scope2index",
          "getfixtureclosure",
          "resolve_fixture_function"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-19T13:33:51.925660",
        "usage": "323.55809211730957 ms"
      },
      "request": {
        "tokens": [
          "fixtures",
          "fixture",
          "mark",
          "getfixtureinfo",
          "FixtureManager",
          "scopes",
          "scope2index",
          "getfixtureclosure",
          "resolve_fixture_function"
        ]
      },
      "response": {
        "results": {
          "mark": [
            "src/_pytest/mark/structures.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/python_api.py",
            "src/pytest.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/nodes.py",
            "src/_pytest/warnings.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/python.py",
            "src/_pytest/outcomes.py",
            "src/_pytest/skipping.py",
            "src/_pytest/warning_types.py",
            "src/_pytest/mark/legacy.py",
            "src/_pytest/mark/evaluate.py"
          ],
          "fixture": [
            "src/_pytest/junitxml.py",
            "src/_pytest/logging.py",
            "src/_pytest/python.py",
            "src/_pytest/capture.py",
            "src/_pytest/terminal.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/monkeypatch.py",
            "src/_pytest/cacheprovider.py",
            "src/_pytest/pytester.py",
            "src/_pytest/unittest.py",
            "src/pytest.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/doctest.py",
            "src/_pytest/setupplan.py",
            "src/_pytest/tmpdir.py",
            "src/_pytest/deprecated.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/debugging.py",
            "src/_pytest/setuponly.py",
            "src/_pytest/compat.py"
          ],
          "fixtures": [
            "src/_pytest/main.py",
            "src/_pytest/deprecated.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/recwarn.py",
            "src/_pytest/capture.py",
            "src/pytest.py",
            "src/_pytest/helpconfig.py",
            "src/_pytest/monkeypatch.py",
            "src/_pytest/runner.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/python.py",
            "src/_pytest/setuponly.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/doctest.py",
            "src/_pytest/compat.py",
            "src/_pytest/setupplan.py"
          ],
          "scopes": [
            "src/_pytest/fixtures.py",
            "src/_pytest/nodes.py",
            "src/_pytest/python.py"
          ],
          "getfixtureinfo": [
            "src/_pytest/doctest.py",
            "src/_pytest/python.py",
            "src/_pytest/unittest.py",
            "src/_pytest/fixtures.py"
          ],
          "scope2index": [
            "src/_pytest/fixtures.py",
            "src/_pytest/python.py"
          ],
          "FixtureManager": [
            "src/_pytest/fixtures.py"
          ],
          "resolve_fixture_function": [
            "src/_pytest/fixtures.py"
          ],
          "getfixtureclosure": [
            "src/_pytest/fixtures.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-19T13:33:52.249229",
        "usage": "5003.722190856934 ms"
      },
      "request": {
        "keyword_search_results": {
          "mark": [
            "src/_pytest/mark/structures.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/python_api.py",
            "src/pytest.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/nodes.py",
            "src/_pytest/warnings.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/python.py",
            "src/_pytest/outcomes.py",
            "src/_pytest/skipping.py",
            "src/_pytest/warning_types.py",
            "src/_pytest/mark/legacy.py",
            "src/_pytest/mark/evaluate.py"
          ],
          "fixture": [
            "src/_pytest/junitxml.py",
            "src/_pytest/logging.py",
            "src/_pytest/python.py",
            "src/_pytest/capture.py",
            "src/_pytest/terminal.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/monkeypatch.py",
            "src/_pytest/cacheprovider.py",
            "src/_pytest/pytester.py",
            "src/_pytest/unittest.py",
            "src/pytest.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/doctest.py",
            "src/_pytest/setupplan.py",
            "src/_pytest/tmpdir.py",
            "src/_pytest/deprecated.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/debugging.py",
            "src/_pytest/setuponly.py",
            "src/_pytest/compat.py"
          ],
          "fixtures": [
            "src/_pytest/main.py",
            "src/_pytest/deprecated.py",
            "src/_pytest/fixtures.py",
            "src/_pytest/recwarn.py",
            "src/_pytest/capture.py",
            "src/pytest.py",
            "src/_pytest/helpconfig.py",
            "src/_pytest/monkeypatch.py",
            "src/_pytest/runner.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/_code/code.py",
            "src/_pytest/python.py",
            "src/_pytest/setuponly.py",
            "src/_pytest/mark/__init__.py",
            "src/_pytest/doctest.py",
            "src/_pytest/compat.py",
            "src/_pytest/setupplan.py"
          ],
          "scopes": [
            "src/_pytest/fixtures.py",
            "src/_pytest/nodes.py",
            "src/_pytest/python.py"
          ],
          "getfixtureinfo": [
            "src/_pytest/doctest.py",
            "src/_pytest/python.py",
            "src/_pytest/unittest.py",
            "src/_pytest/fixtures.py"
          ],
          "scope2index": [
            "src/_pytest/fixtures.py",
            "src/_pytest/python.py"
          ],
          "FixtureManager": [
            "src/_pytest/fixtures.py"
          ],
          "resolve_fixture_function": [
            "src/_pytest/fixtures.py"
          ],
          "getfixtureclosure": [
            "src/_pytest/fixtures.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is about enhancing the `pytest --fixtures` command to display fixture scopes. To address this issue, we need to identify files related to fixtures and scopes within `pytest`. These keywords correspond closely to the functionality in question.\n\n1. **Keyword 'scopes' and 'fixture(s)'**: The keyword directly relates to the scope concept that needs to be presented to the user in the pytest output, which is the crux of the issue.\n - Relevant files include `src/_pytest/fixtures.py` because it pops up multiple times across various searches relevant to both 'scopes' and 'fixtures'.\n - `src/_pytest/python.py` is also mentioned in the 'scopes' keyword; while not top priority, it might have related code logic.\n\n2. **Fixtures-related logic**:\n   - `src/_pytest/fixtures.py` appears often in searches related to 'fixture', 'fixtures', 'getfixtureinfo', 'scope2index', 'FixtureManager', 'resolve_fixture_function', and 'getfixtureclosure'. This file is likely central to handling fixtures, and scopes might be managed within this functionalities.\n\n3. **The 'FixtureManager' and 'resolve_fixture_function' aspects** might also be crucial as managing fixtures would involve understanding their scope to correctly resolve and manage them.\n\nBased on these considerations, the most closely relevant file identified is `src/_pytest/fixtures.py` for its repeated appearance and likely central role in the handling of fixture details and the scope determination.",
        "file_paths": [
          "src/_pytest/fixtures.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:33:57.252984",
        "usage": "11453.448057174683 ms"
      },
      "request": {
        "file_path": "src/_pytest/fixtures.py"
      },
      "response": {
        "scratch_pad": "The reported issue is about displaying the scope of fixtures when using the `pytest --fixtures` command. Currently, users have to either refer to documentation or dig into the source code to find out the scope of a fixture. The expectation is to have this information readily available when listing fixtures in pytest. This feature request suggests enhancing the `--fixtures` command to include fixture scopes.\n\nTo solve this, there needs to be integration within the pytest implementation to display fixture scopes when listing them. The solutions could involve:\n1. Modifying the `pytest --fixtures` command output to include the scope of each fixture.\n2. Ensure the internal data structures handling fixtures store and can compute or expose their scopes easily.\n\nRelevancy Analysis:\n- The `FixtureDef` class holds information about fixture definitions, including their scope (attribute: `scope`). This is crucial to the enhancement request, as fixture scope needs to be retrieved and displayed.\n- `FixtureManager` is responsible for handling fixture definitions and might have the mechanism to list them, potentially with scope information.\n- The method `pytest_fixture_setup` mentions fixture setup execution and might indirectly relate to the handling of fixture listings but is less likely connected to the `--fixtures` command directly.\n\nRoot Cause:\nThe current code has no mechanisms to append fixture scope information to the list output by `pytest --fixtures`. The essential symbol, `FixtureDef`, already has scope information; hence, the enhancement revolves around extracting and displaying this data.\n\nRelevancy Conclusion:\nThe file is relevant to the issue as it manages and defines fixtures, including their scopes. However, the actual implementation to display this scope in `--fixtures` output must connect to these parts, perhaps via pytest's command parsing and output handling infrastructure (not present in this file).",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/main.py",
          "src/_pytest/config.py"
        ],
        "relevant_symbols": [
          "FixtureDef",
          "FixtureManager"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-19T13:34:08.706451",
        "usage": "78.68599891662598 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/fixtures.py",
            "relevant_symbol_keys": [
              "FixtureDef",
              "FixtureManager"
            ],
            "root_cause_symbol_keys": []
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest.fixtures.PseudoFixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "@attr.s(frozen=True)\nclass PseudoFixtureDef(object):\n    cached_result = attr.ib()\n    scope = attr.ib()",
            "start_line": 41,
            "start_column": 1200,
            "end_line": 0,
            "end_column": 1304,
            "start_byte": 1200,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.PseudoFixtureDef.cached_result",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "cached_result = attr.ib()",
            "start_line": 43,
            "start_column": 1257,
            "end_line": 4,
            "end_column": 1282,
            "start_byte": 1257,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.PseudoFixtureDef.scope",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "scope = attr.ib()",
            "start_line": 44,
            "start_column": 1287,
            "end_line": 4,
            "end_column": 1304,
            "start_byte": 1287,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureDef(object):\n    \"\"\" A container for a factory definition. \"\"\"\n\n    def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []\n\n    def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)\n\n    def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []\n\n    def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)\n\n    def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 810,
            "start_column": 30838,
            "end_line": 0,
            "end_column": 34055,
            "start_byte": 30838,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.FixtureDef.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []",
            "start_line": 813,
            "start_column": 30919,
            "end_line": 4,
            "end_column": 31651,
            "start_byte": 30919,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.addfinalizer",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)",
            "start_line": 841,
            "start_column": 31657,
            "end_line": 4,
            "end_column": 31734,
            "start_byte": 31657,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.finish",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []",
            "start_line": 844,
            "start_column": 31740,
            "end_line": 4,
            "end_column": 32769,
            "start_byte": 31740,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.execute",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)",
            "start_line": 871,
            "start_column": 32775,
            "end_line": 4,
            "end_column": 33881,
            "start_byte": 32775,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.__repr__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 896,
            "start_column": 33887,
            "end_line": 4,
            "end_column": 34055,
            "start_byte": 33887,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureManager(object):\n    \"\"\"\n    pytest fixtures definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function.  An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i. e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    \"\"\"\n\n    FixtureLookupError = FixtureLookupError\n    FixtureLookupErrorRepr = FixtureLookupErrorRepr\n\n    def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")\n\n    def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)\n\n    def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)\n\n    def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames\n\n    def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs\n\n    def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time\n\n    def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)\n\n    def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))\n\n    def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))\n\n    def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1077,
            "start_column": 40663,
            "end_line": 0,
            "end_column": 50680,
            "start_byte": 40663,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupError",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupError = FixtureLookupError",
            "start_line": 1109,
            "start_column": 41972,
            "end_line": 4,
            "end_column": 42011,
            "start_byte": 41972,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupErrorRepr = FixtureLookupErrorRepr",
            "start_line": 1110,
            "start_column": 42016,
            "end_line": 4,
            "end_column": 42063,
            "start_byte": 42016,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")",
            "start_line": 1112,
            "start_column": 42069,
            "end_line": 4,
            "end_column": 42414,
            "start_byte": 42069,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixtureinfo",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)",
            "start_line": 1121,
            "start_column": 42420,
            "end_line": 4,
            "end_column": 43070,
            "start_byte": 42420,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_plugin_registered",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)",
            "start_line": 1136,
            "start_column": 43076,
            "end_line": 4,
            "end_column": 43711,
            "start_byte": 43076,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager._getautousenames",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames",
            "start_line": 1153,
            "start_column": 43717,
            "end_line": 4,
            "end_column": 44222,
            "start_byte": 43717,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixtureclosure",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs",
            "start_line": 1166,
            "start_column": 44228,
            "end_line": 4,
            "end_column": 46132,
            "start_byte": 44228,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_generate_tests",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time",
            "start_line": 1212,
            "start_column": 46138,
            "end_line": 4,
            "end_column": 47495,
            "start_byte": 46138,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_collection_modifyitems",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)",
            "start_line": 1242,
            "start_column": 47501,
            "end_line": 4,
            "end_column": 47627,
            "start_byte": 47501,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.parsefactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))",
            "start_line": 1246,
            "start_column": 47633,
            "end_line": 4,
            "end_column": 50003,
            "start_byte": 47633,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixturedefs",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))",
            "start_line": 1306,
            "start_column": 50009,
            "end_line": 4,
            "end_column": 50494,
            "start_byte": 50009,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager._matchfactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1320,
            "start_column": 50500,
            "end_line": 4,
            "end_column": 50680,
            "start_byte": 50500,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": []
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-19T13:34:08.785143",
        "usage": "12255.733013153076 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest.fixtures.PseudoFixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "@attr.s(frozen=True)\nclass PseudoFixtureDef(object):\n    cached_result = attr.ib()\n    scope = attr.ib()",
            "start_line": 41,
            "start_column": 1200,
            "end_line": 0,
            "end_column": 1304,
            "start_byte": 1200,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.PseudoFixtureDef.cached_result",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "cached_result = attr.ib()",
            "start_line": 43,
            "start_column": 1257,
            "end_line": 4,
            "end_column": 1282,
            "start_byte": 1257,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.PseudoFixtureDef.scope",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "scope = attr.ib()",
            "start_line": 44,
            "start_column": 1287,
            "end_line": 4,
            "end_column": 1304,
            "start_byte": 1287,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureDef(object):\n    \"\"\" A container for a factory definition. \"\"\"\n\n    def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []\n\n    def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)\n\n    def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []\n\n    def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)\n\n    def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 810,
            "start_column": 30838,
            "end_line": 0,
            "end_column": 34055,
            "start_byte": 30838,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.FixtureDef.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []",
            "start_line": 813,
            "start_column": 30919,
            "end_line": 4,
            "end_column": 31651,
            "start_byte": 30919,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.addfinalizer",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)",
            "start_line": 841,
            "start_column": 31657,
            "end_line": 4,
            "end_column": 31734,
            "start_byte": 31657,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.finish",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []",
            "start_line": 844,
            "start_column": 31740,
            "end_line": 4,
            "end_column": 32769,
            "start_byte": 31740,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.execute",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)",
            "start_line": 871,
            "start_column": 32775,
            "end_line": 4,
            "end_column": 33881,
            "start_byte": 32775,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureDef.__repr__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 896,
            "start_column": 33887,
            "end_line": 4,
            "end_column": 34055,
            "start_byte": 33887,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureManager(object):\n    \"\"\"\n    pytest fixtures definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function.  An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i. e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    \"\"\"\n\n    FixtureLookupError = FixtureLookupError\n    FixtureLookupErrorRepr = FixtureLookupErrorRepr\n\n    def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")\n\n    def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)\n\n    def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)\n\n    def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames\n\n    def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs\n\n    def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time\n\n    def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)\n\n    def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))\n\n    def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))\n\n    def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1077,
            "start_column": 40663,
            "end_line": 0,
            "end_column": 50680,
            "start_byte": 40663,
            "end_byte": 0
          },
          {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupError",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupError = FixtureLookupError",
            "start_line": 1109,
            "start_column": 41972,
            "end_line": 4,
            "end_column": 42011,
            "start_byte": 41972,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupErrorRepr = FixtureLookupErrorRepr",
            "start_line": 1110,
            "start_column": 42016,
            "end_line": 4,
            "end_column": 42063,
            "start_byte": 42016,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")",
            "start_line": 1112,
            "start_column": 42069,
            "end_line": 4,
            "end_column": 42414,
            "start_byte": 42069,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixtureinfo",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)",
            "start_line": 1121,
            "start_column": 42420,
            "end_line": 4,
            "end_column": 43070,
            "start_byte": 42420,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_plugin_registered",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)",
            "start_line": 1136,
            "start_column": 43076,
            "end_line": 4,
            "end_column": 43711,
            "start_byte": 43076,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager._getautousenames",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames",
            "start_line": 1153,
            "start_column": 43717,
            "end_line": 4,
            "end_column": 44222,
            "start_byte": 43717,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixtureclosure",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs",
            "start_line": 1166,
            "start_column": 44228,
            "end_line": 4,
            "end_column": 46132,
            "start_byte": 44228,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_generate_tests",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time",
            "start_line": 1212,
            "start_column": 46138,
            "end_line": 4,
            "end_column": 47495,
            "start_byte": 46138,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.pytest_collection_modifyitems",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)",
            "start_line": 1242,
            "start_column": 47501,
            "end_line": 4,
            "end_column": 47627,
            "start_byte": 47501,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.parsefactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))",
            "start_line": 1246,
            "start_column": 47633,
            "end_line": 4,
            "end_column": 50003,
            "start_byte": 47633,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager.getfixturedefs",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))",
            "start_line": 1306,
            "start_column": 50009,
            "end_line": 4,
            "end_column": 50494,
            "start_byte": 50009,
            "end_byte": 4
          },
          {
            "name": "_pytest.fixtures.FixtureManager._matchfactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1320,
            "start_column": 50500,
            "end_line": 4,
            "end_column": 50680,
            "start_byte": 50500,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": []
      },
      "response": {
        "scratch_pad": "The user wants fixture scopes to be displayed when running `pytest --fixtures`, rather than having to look them up in the documentation or source code.\n\n1. Analyze User Instructions:\n\n1.1 The issue described is the absence of fixture scope information when using the `pytest --fixtures` directive.\n1.2 This issue is caused by the current implementation not including scope information in the `pytest --fixtures` output.\n1.3 The expected result would be that `pytest --fixtures` also displays the scope of each fixture, making it easier for users to understand the fixture's behavior without digging into the docs or source code.\n1.4 If not explicitly stated by the user, the expectation would be for a clear display of the fixture scope related to each fixture when the `pytest --fixtures` command is executed.\n1.5 To resolve this issue, functionality should be added to include fixture scope details in the output of `pytest --fixtures`.\n\n2. Make the evaluate:\n\n2.1 Thoroughly analyze each line in the code symbols provided.\n2.2 Identify parts of the code dealing with fixture definitions and their relevant details (name, scope, etc.).\n2.3 Look for places where the fixture information is collected and formatted for display (e.g., in a command response or output).\n2.4 Pinpoint how many and which symbols (attributes, classes, functions) will require modifications to incorporate fixture scope information into `pytest --fixtures`.\n2.5 If critical information is missing, request more details about that particular part of the project or code structure.",
        "symbols": [
          {
            "name": "_pytest.fixtures.FixtureDef.__repr__",
            "file_path": "src/_pytest/fixtures.py",
            "reason": "Currently includes the scope representation. However, we need to ensure that this information is displayed by `pytest --fixtures`. The implementation needs to be inspected or modified where this __repr__ method might be utilized for output formatting related to fixtures."
          },
          {
            "name": "_pytest.fixtures.FixtureManager.parsefactories",
            "file_path": "src/_pytest/fixtures.py",
            "reason": "This function handles fixture definitions. It should be examined to ensure fixture scope is included during parsing and storage so that later it can be easily accessed or output when required by `pytest --fixtures`."
          }
        ],
        "more_info": [
          {
            "type": "file",
            "path": "src/_pytest/main.py",
            "name": "",
            "reason": "The main.py or similar might have a command related to `pytest --fixtures`. I need to check where the fixtures' information is aggregated and output is formatted."
          }
        ],
        "is_done": false,
        "symbols_scratch_pad": [
          "It is a simple data class representing a pseudo fixture definition, with a cached result and a scope. This class alone is not sufficient to make changes to fix the issue.",
          "It is representing a cached result attribute, this alone isn't needed to resolve the issue.",
          "This is representing a scope attribute, it is needed to represent the scope in the --fixtures output but alone isn't sufficient to identify all changes.",
          "FixtureDef is a major class for fixture definitions. Inspecting its methods or attributes relevant to output might be useful in addressing the issue.",
          "The constructor here initializes scope and many other properties, potentially useful for internal fixture representation.",
          "Just adds a finalizer, unrelated to the problem.",
          "Handles finish execution logic for fixtures, doesn't exactly deal with representation or information display.",
          "Executes fixture, and its caching, which might be useful for specifying scope, but not directly related to displaying it via pytest command options.",
          "This __repr__ method mentions scope, it could be leveraged when displaying fixture information in pytest outputs.",
          "The FixtureManager class manages fixtures including their parsing, object creation, etc. Key part of first step parsing which might be utilized later for reproducing the problem or fixing it.",
          "Represents an error class for fixture lookup, unrelated to representation or display scope.",
          "Represents another error descriptor, not directly related to scope display within output.",
          "Setups initial session and pluginmanager interactions, might relate to fixture or hook registrations, not directly responsible for display.",
          "Makes interaction with node objects and fixture determination, preliminary to any display logic implementation.",
          "Handles plugins which might provide additional or changed fixture definitions, not focused on command display output.",
          "Helper function for determining autouse fixture names, not directly relating to display output.",
          "Manages fixture closure (dependencies) and scoping, most likely relevant when determining display order or detail for fixtures.",
          "Handles parameterized tests, utilizes fixture scope but needs to examine further for output relevance.",
          "Deals with module-level fixture test collection modifications, unrelated to specific fixture representation in output.",
          "Handles creation and parsing of factories/fixtures and gets details, needs to ensure scope management is effective for display.",
          "Gets fixtures applicable but lacks direct manipulation of scopes for representation."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-19T13:34:21.040903",
        "usage": "12.09115982055664 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest.fixtures.PseudoFixtureDef",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "@attr.s(frozen=True)\nclass PseudoFixtureDef(object):\n    cached_result = attr.ib()\n    scope = attr.ib()",
              "start_line": 41,
              "start_column": 1200,
              "end_line": 0,
              "end_column": 1304,
              "start_byte": 1200,
              "end_byte": 0
            },
            {
              "name": "_pytest.fixtures.PseudoFixtureDef.cached_result",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "cached_result = attr.ib()",
              "start_line": 43,
              "start_column": 1257,
              "end_line": 4,
              "end_column": 1282,
              "start_byte": 1257,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.PseudoFixtureDef.scope",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "scope = attr.ib()",
              "start_line": 44,
              "start_column": 1287,
              "end_line": 4,
              "end_column": 1304,
              "start_byte": 1287,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureDef",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "class FixtureDef(object):\n    \"\"\" A container for a factory definition. \"\"\"\n\n    def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []\n\n    def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)\n\n    def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []\n\n    def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)\n\n    def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
              "start_line": 810,
              "start_column": 30838,
              "end_line": 0,
              "end_column": 34055,
              "start_byte": 30838,
              "end_byte": 0
            },
            {
              "name": "_pytest.fixtures.FixtureDef.__init__",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []",
              "start_line": 813,
              "start_column": 30919,
              "end_line": 4,
              "end_column": 31651,
              "start_byte": 30919,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureDef.addfinalizer",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)",
              "start_line": 841,
              "start_column": 31657,
              "end_line": 4,
              "end_column": 31734,
              "start_byte": 31657,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureDef.finish",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []",
              "start_line": 844,
              "start_column": 31740,
              "end_line": 4,
              "end_column": 32769,
              "start_byte": 31740,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureDef.execute",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)",
              "start_line": 871,
              "start_column": 32775,
              "end_line": 4,
              "end_column": 33881,
              "start_byte": 32775,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureDef.__repr__",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
              "start_line": 896,
              "start_column": 33887,
              "end_line": 4,
              "end_column": 34055,
              "start_byte": 33887,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "class FixtureManager(object):\n    \"\"\"\n    pytest fixtures definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function.  An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i. e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    \"\"\"\n\n    FixtureLookupError = FixtureLookupError\n    FixtureLookupErrorRepr = FixtureLookupErrorRepr\n\n    def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")\n\n    def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)\n\n    def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)\n\n    def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames\n\n    def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs\n\n    def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time\n\n    def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)\n\n    def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))\n\n    def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))\n\n    def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
              "start_line": 1077,
              "start_column": 40663,
              "end_line": 0,
              "end_column": 50680,
              "start_byte": 40663,
              "end_byte": 0
            },
            {
              "name": "_pytest.fixtures.FixtureManager.FixtureLookupError",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "FixtureLookupError = FixtureLookupError",
              "start_line": 1109,
              "start_column": 41972,
              "end_line": 4,
              "end_column": 42011,
              "start_byte": 41972,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "FixtureLookupErrorRepr = FixtureLookupErrorRepr",
              "start_line": 1110,
              "start_column": 42016,
              "end_line": 4,
              "end_column": 42063,
              "start_byte": 42016,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.__init__",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")",
              "start_line": 1112,
              "start_column": 42069,
              "end_line": 4,
              "end_column": 42414,
              "start_byte": 42069,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.getfixtureinfo",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)",
              "start_line": 1121,
              "start_column": 42420,
              "end_line": 4,
              "end_column": 43070,
              "start_byte": 42420,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.pytest_plugin_registered",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)",
              "start_line": 1136,
              "start_column": 43076,
              "end_line": 4,
              "end_column": 43711,
              "start_byte": 43076,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager._getautousenames",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames",
              "start_line": 1153,
              "start_column": 43717,
              "end_line": 4,
              "end_column": 44222,
              "start_byte": 43717,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.getfixtureclosure",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs",
              "start_line": 1166,
              "start_column": 44228,
              "end_line": 4,
              "end_column": 46132,
              "start_byte": 44228,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.pytest_generate_tests",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time",
              "start_line": 1212,
              "start_column": 46138,
              "end_line": 4,
              "end_column": 47495,
              "start_byte": 46138,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.pytest_collection_modifyitems",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)",
              "start_line": 1242,
              "start_column": 47501,
              "end_line": 4,
              "end_column": 47627,
              "start_byte": 47501,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.parsefactories",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))",
              "start_line": 1246,
              "start_column": 47633,
              "end_line": 4,
              "end_column": 50003,
              "start_byte": 47633,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager.getfixturedefs",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))",
              "start_line": 1306,
              "start_column": 50009,
              "end_line": 4,
              "end_column": 50494,
              "start_byte": 50009,
              "end_byte": 4
            },
            {
              "name": "_pytest.fixtures.FixtureManager._matchfactories",
              "file_path": "src/_pytest/fixtures.py",
              "file_content": "def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
              "start_line": 1320,
              "start_column": 50500,
              "end_line": 4,
              "end_column": 50680,
              "start_byte": 50500,
              "end_byte": 4
            }
          ],
          "root_caused_symbols": []
        },
        "symbols_evaluate": {
          "scratch_pad": "The user wants fixture scopes to be displayed when running `pytest --fixtures`, rather than having to look them up in the documentation or source code.\n\n1. Analyze User Instructions:\n\n1.1 The issue described is the absence of fixture scope information when using the `pytest --fixtures` directive.\n1.2 This issue is caused by the current implementation not including scope information in the `pytest --fixtures` output.\n1.3 The expected result would be that `pytest --fixtures` also displays the scope of each fixture, making it easier for users to understand the fixture's behavior without digging into the docs or source code.\n1.4 If not explicitly stated by the user, the expectation would be for a clear display of the fixture scope related to each fixture when the `pytest --fixtures` command is executed.\n1.5 To resolve this issue, functionality should be added to include fixture scope details in the output of `pytest --fixtures`.\n\n2. Make the evaluate:\n\n2.1 Thoroughly analyze each line in the code symbols provided.\n2.2 Identify parts of the code dealing with fixture definitions and their relevant details (name, scope, etc.).\n2.3 Look for places where the fixture information is collected and formatted for display (e.g., in a command response or output).\n2.4 Pinpoint how many and which symbols (attributes, classes, functions) will require modifications to incorporate fixture scope information into `pytest --fixtures`.\n2.5 If critical information is missing, request more details about that particular part of the project or code structure.",
          "symbols": [
            {
              "name": "_pytest.fixtures.FixtureDef.__repr__",
              "file_path": "src/_pytest/fixtures.py",
              "reason": "Currently includes the scope representation. However, we need to ensure that this information is displayed by `pytest --fixtures`. The implementation needs to be inspected or modified where this __repr__ method might be utilized for output formatting related to fixtures."
            },
            {
              "name": "_pytest.fixtures.FixtureManager.parsefactories",
              "file_path": "src/_pytest/fixtures.py",
              "reason": "This function handles fixture definitions. It should be examined to ensure fixture scope is included during parsing and storage so that later it can be easily accessed or output when required by `pytest --fixtures`."
            }
          ],
          "more_info": [
            {
              "type": "file",
              "path": "src/_pytest/main.py",
              "name": "",
              "reason": "The main.py or similar might have a command related to `pytest --fixtures`. I need to check where the fixtures' information is aggregated and output is formatted."
            }
          ],
          "is_done": false,
          "symbols_scratch_pad": [
            "It is a simple data class representing a pseudo fixture definition, with a cached result and a scope. This class alone is not sufficient to make changes to fix the issue.",
            "It is representing a cached result attribute, this alone isn't needed to resolve the issue.",
            "This is representing a scope attribute, it is needed to represent the scope in the --fixtures output but alone isn't sufficient to identify all changes.",
            "FixtureDef is a major class for fixture definitions. Inspecting its methods or attributes relevant to output might be useful in addressing the issue.",
            "The constructor here initializes scope and many other properties, potentially useful for internal fixture representation.",
            "Just adds a finalizer, unrelated to the problem.",
            "Handles finish execution logic for fixtures, doesn't exactly deal with representation or information display.",
            "Executes fixture, and its caching, which might be useful for specifying scope, but not directly related to displaying it via pytest command options.",
            "This __repr__ method mentions scope, it could be leveraged when displaying fixture information in pytest outputs.",
            "The FixtureManager class manages fixtures including their parsing, object creation, etc. Key part of first step parsing which might be utilized later for reproducing the problem or fixing it.",
            "Represents an error class for fixture lookup, unrelated to representation or display scope.",
            "Represents another error descriptor, not directly related to scope display within output.",
            "Setups initial session and pluginmanager interactions, might relate to fixture or hook registrations, not directly responsible for display.",
            "Makes interaction with node objects and fixture determination, preliminary to any display logic implementation.",
            "Handles plugins which might provide additional or changed fixture definitions, not focused on command display output.",
            "Helper function for determining autouse fixture names, not directly relating to display output.",
            "Manages fixture closure (dependencies) and scoping, most likely relevant when determining display order or detail for fixtures.",
            "Handles parameterized tests, utilizes fixture scope but needs to examine further for output relevance.",
            "Deals with module-level fixture test collection modifications, unrelated to specific fixture representation in output.",
            "Handles creation and parsing of factories/fixtures and gets details, needs to ensure scope management is effective for display.",
            "Gets fixtures applicable but lacks direct manipulation of scopes for representation."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/fixtures.py"
        ],
        "symbols": [
          "_pytest.fixtures.FixtureDef.__repr__",
          "_pytest.fixtures.FixtureManager.parsefactories"
        ],
        "code_spans": {
          "_pytest.fixtures.PseudoFixtureDef": {
            "name": "_pytest.fixtures.PseudoFixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "@attr.s(frozen=True)\nclass PseudoFixtureDef(object):\n    cached_result = attr.ib()\n    scope = attr.ib()",
            "start_line": 41,
            "start_column": 1200,
            "end_line": 0,
            "end_column": 1304,
            "start_byte": 1200,
            "end_byte": 0
          },
          "_pytest.fixtures.PseudoFixtureDef.cached_result": {
            "name": "_pytest.fixtures.PseudoFixtureDef.cached_result",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "cached_result = attr.ib()",
            "start_line": 43,
            "start_column": 1257,
            "end_line": 4,
            "end_column": 1282,
            "start_byte": 1257,
            "end_byte": 4
          },
          "_pytest.fixtures.PseudoFixtureDef.scope": {
            "name": "_pytest.fixtures.PseudoFixtureDef.scope",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "scope = attr.ib()",
            "start_line": 44,
            "start_column": 1287,
            "end_line": 4,
            "end_column": 1304,
            "start_byte": 1287,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureDef": {
            "name": "_pytest.fixtures.FixtureDef",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureDef(object):\n    \"\"\" A container for a factory definition. \"\"\"\n\n    def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []\n\n    def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)\n\n    def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []\n\n    def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)\n\n    def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 810,
            "start_column": 30838,
            "end_line": 0,
            "end_column": 34055,
            "start_byte": 30838,
            "end_byte": 0
          },
          "_pytest.fixtures.FixtureDef.__init__": {
            "name": "_pytest.fixtures.FixtureDef.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(\n        self,\n        fixturemanager,\n        baseid,\n        argname,\n        func,\n        scope,\n        params,\n        unittest=False,\n        ids=None,\n    ):\n        self._fixturemanager = fixturemanager\n        self.baseid = baseid or \"\"\n        self.has_location = baseid is not None\n        self.func = func\n        self.argname = argname\n        self.scope = scope\n        self.scopenum = scope2index(\n            scope or \"function\",\n            descr=\"Fixture '{}'\".format(func.__name__),\n            where=baseid,\n        )\n        self.params = params\n        self.argnames = getfuncargnames(func, is_method=unittest)\n        self.unittest = unittest\n        self.ids = ids\n        self._finalizers = []",
            "start_line": 813,
            "start_column": 30919,
            "end_line": 4,
            "end_column": 31651,
            "start_byte": 30919,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureDef.addfinalizer": {
            "name": "_pytest.fixtures.FixtureDef.addfinalizer",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def addfinalizer(self, finalizer):\n        self._finalizers.append(finalizer)",
            "start_line": 841,
            "start_column": 31657,
            "end_line": 4,
            "end_column": 31734,
            "start_byte": 31657,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureDef.finish": {
            "name": "_pytest.fixtures.FixtureDef.finish",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def finish(self, request):\n        exceptions = []\n        try:\n            while self._finalizers:\n                try:\n                    func = self._finalizers.pop()\n                    func()\n                except:  # noqa\n                    exceptions.append(sys.exc_info())\n            if exceptions:\n                e = exceptions[0]\n                del (\n                    exceptions\n                )  # ensure we don't keep all frames alive because of the traceback\n                six.reraise(*e)\n\n        finally:\n            hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n            hook.pytest_fixture_post_finalizer(fixturedef=self, request=request)\n            # even if finalization fails, we invalidate\n            # the cached fixture value and remove\n            # all finalizers because they may be bound methods which will\n            # keep instances alive\n            if hasattr(self, \"cached_result\"):\n                del self.cached_result\n            self._finalizers = []",
            "start_line": 844,
            "start_column": 31740,
            "end_line": 4,
            "end_column": 32769,
            "start_byte": 31740,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureDef.execute": {
            "name": "_pytest.fixtures.FixtureDef.execute",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def execute(self, request):\n        # get required arguments and register our own finish()\n        # with their finalization\n        for argname in self.argnames:\n            fixturedef = request._get_active_fixturedef(argname)\n            if argname != \"request\":\n                fixturedef.addfinalizer(functools.partial(self.finish, request=request))\n\n        my_cache_key = request.param_index\n        cached_result = getattr(self, \"cached_result\", None)\n        if cached_result is not None:\n            result, cache_key, err = cached_result\n            if my_cache_key == cache_key:\n                if err is not None:\n                    six.reraise(*err)\n                else:\n                    return result\n            # we have a previous but differently parametrized fixture instance\n            # so we need to tear it down before creating a new one\n            self.finish(request)\n            assert not hasattr(self, \"cached_result\")\n\n        hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n        return hook.pytest_fixture_setup(fixturedef=self, request=request)",
            "start_line": 871,
            "start_column": 32775,
            "end_line": 4,
            "end_column": 33881,
            "start_byte": 32775,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureDef.__repr__": {
            "name": "_pytest.fixtures.FixtureDef.__repr__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __repr__(self):\n        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n            self.argname,\n            self.scope,\n            self.baseid,\n        )",
            "start_line": 896,
            "start_column": 33887,
            "end_line": 4,
            "end_column": 34055,
            "start_byte": 33887,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager": {
            "name": "_pytest.fixtures.FixtureManager",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "class FixtureManager(object):\n    \"\"\"\n    pytest fixtures definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function.  An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i. e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    \"\"\"\n\n    FixtureLookupError = FixtureLookupError\n    FixtureLookupErrorRepr = FixtureLookupErrorRepr\n\n    def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")\n\n    def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)\n\n    def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)\n\n    def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames\n\n    def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs\n\n    def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time\n\n    def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)\n\n    def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))\n\n    def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))\n\n    def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1077,
            "start_column": 40663,
            "end_line": 0,
            "end_column": 50680,
            "start_byte": 40663,
            "end_byte": 0
          },
          "_pytest.fixtures.FixtureManager.FixtureLookupError": {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupError",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupError = FixtureLookupError",
            "start_line": 1109,
            "start_column": 41972,
            "end_line": 4,
            "end_column": 42011,
            "start_byte": 41972,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr": {
            "name": "_pytest.fixtures.FixtureManager.FixtureLookupErrorRepr",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "FixtureLookupErrorRepr = FixtureLookupErrorRepr",
            "start_line": 1110,
            "start_column": 42016,
            "end_line": 4,
            "end_column": 42063,
            "start_byte": 42016,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.__init__": {
            "name": "_pytest.fixtures.FixtureManager.__init__",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def __init__(self, session):\n        self.session = session\n        self.config = session.config\n        self._arg2fixturedefs = {}\n        self._holderobjseen = set()\n        self._arg2finish = {}\n        self._nodeid_and_autousenames = [(\"\", self.config.getini(\"usefixtures\"))]\n        session.config.pluginmanager.register(self, \"funcmanage\")",
            "start_line": 1112,
            "start_column": 42069,
            "end_line": 4,
            "end_column": 42414,
            "start_byte": 42069,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.getfixtureinfo": {
            "name": "_pytest.fixtures.FixtureManager.getfixtureinfo",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureinfo(self, node, func, cls, funcargs=True):\n        if funcargs and not getattr(node, \"nofuncargs\", False):\n            argnames = getfuncargnames(func, cls=cls)\n        else:\n            argnames = ()\n        usefixtures = itertools.chain.from_iterable(\n            mark.args for mark in node.iter_markers(name=\"usefixtures\")\n        )\n        initialnames = tuple(usefixtures) + argnames\n        fm = node.session._fixturemanager\n        initialnames, names_closure, arg2fixturedefs = fm.getfixtureclosure(\n            initialnames, node\n        )\n        return FuncFixtureInfo(argnames, initialnames, names_closure, arg2fixturedefs)",
            "start_line": 1121,
            "start_column": 42420,
            "end_line": 4,
            "end_column": 43070,
            "start_byte": 42420,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.pytest_plugin_registered": {
            "name": "_pytest.fixtures.FixtureManager.pytest_plugin_registered",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_plugin_registered(self, plugin):\n        nodeid = None\n        try:\n            p = py.path.local(plugin.__file__).realpath()\n        except AttributeError:\n            pass\n        else:\n            # construct the base nodeid which is later used to check\n            # what fixtures are visible for particular tests (as denoted\n            # by their test id)\n            if p.basename.startswith(\"conftest.py\"):\n                nodeid = p.dirpath().relto(self.config.rootdir)\n                if p.sep != nodes.SEP:\n                    nodeid = nodeid.replace(p.sep, nodes.SEP)\n\n        self.parsefactories(plugin, nodeid)",
            "start_line": 1136,
            "start_column": 43076,
            "end_line": 4,
            "end_column": 43711,
            "start_byte": 43076,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager._getautousenames": {
            "name": "_pytest.fixtures.FixtureManager._getautousenames",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _getautousenames(self, nodeid):\n        \"\"\" return a tuple of fixture names to be used. \"\"\"\n        autousenames = []\n        for baseid, basenames in self._nodeid_and_autousenames:\n            if nodeid.startswith(baseid):\n                if baseid:\n                    i = len(baseid)\n                    nextchar = nodeid[i : i + 1]\n                    if nextchar and nextchar not in \":/\":\n                        continue\n                autousenames.extend(basenames)\n        return autousenames",
            "start_line": 1153,
            "start_column": 43717,
            "end_line": 4,
            "end_column": 44222,
            "start_byte": 43717,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.getfixtureclosure": {
            "name": "_pytest.fixtures.FixtureManager.getfixtureclosure",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixtureclosure(self, fixturenames, parentnode):\n        # collect the closure of all fixtures , starting with the given\n        # fixturenames as the initial set.  As we have to visit all\n        # factory definitions anyway, we also return an arg2fixturedefs\n        # mapping so that the caller can reuse it and does not have\n        # to re-discover fixturedefs again for each fixturename\n        # (discovering matching fixtures for a given name/node is expensive)\n\n        parentid = parentnode.nodeid\n        fixturenames_closure = self._getautousenames(parentid)\n\n        def merge(otherlist):\n            for arg in otherlist:\n                if arg not in fixturenames_closure:\n                    fixturenames_closure.append(arg)\n\n        merge(fixturenames)\n\n        # at this point, fixturenames_closure contains what we call \"initialnames\",\n        # which is a set of fixturenames the function immediately requests. We\n        # need to return it as well, so save this.\n        initialnames = tuple(fixturenames_closure)\n\n        arg2fixturedefs = {}\n        lastlen = -1\n        while lastlen != len(fixturenames_closure):\n            lastlen = len(fixturenames_closure)\n            for argname in fixturenames_closure:\n                if argname in arg2fixturedefs:\n                    continue\n                fixturedefs = self.getfixturedefs(argname, parentid)\n                if fixturedefs:\n                    arg2fixturedefs[argname] = fixturedefs\n                    merge(fixturedefs[-1].argnames)\n\n        def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum\n\n        fixturenames_closure.sort(key=sort_by_scope)\n        return initialnames, fixturenames_closure, arg2fixturedefs",
            "start_line": 1166,
            "start_column": 44228,
            "end_line": 4,
            "end_column": 46132,
            "start_byte": 44228,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.pytest_generate_tests": {
            "name": "_pytest.fixtures.FixtureManager.pytest_generate_tests",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_generate_tests(self, metafunc):\n        for argname in metafunc.fixturenames:\n            faclist = metafunc._arg2fixturedefs.get(argname)\n            if faclist:\n                fixturedef = faclist[-1]\n                if fixturedef.params is not None:\n                    markers = list(metafunc.definition.iter_markers(\"parametrize\"))\n                    for parametrize_mark in markers:\n                        if \"argnames\" in parametrize_mark.kwargs:\n                            argnames = parametrize_mark.kwargs[\"argnames\"]\n                        else:\n                            argnames = parametrize_mark.args[0]\n\n                        if not isinstance(argnames, (tuple, list)):\n                            argnames = [\n                                x.strip() for x in argnames.split(\",\") if x.strip()\n                            ]\n                        if argname in argnames:\n                            break\n                    else:\n                        metafunc.parametrize(\n                            argname,\n                            fixturedef.params,\n                            indirect=True,\n                            scope=fixturedef.scope,\n                            ids=fixturedef.ids,\n                        )\n            else:\n                continue  # will raise FixtureLookupError at setup time",
            "start_line": 1212,
            "start_column": 46138,
            "end_line": 4,
            "end_column": 47495,
            "start_byte": 46138,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.pytest_collection_modifyitems": {
            "name": "_pytest.fixtures.FixtureManager.pytest_collection_modifyitems",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def pytest_collection_modifyitems(self, items):\n        # separate parametrized setups\n        items[:] = reorder_items(items)",
            "start_line": 1242,
            "start_column": 47501,
            "end_line": 4,
            "end_column": 47627,
            "start_byte": 47501,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.parsefactories": {
            "name": "_pytest.fixtures.FixtureManager.parsefactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def parsefactories(self, node_or_obj, nodeid=NOTSET, unittest=False):\n        if nodeid is not NOTSET:\n            holderobj = node_or_obj\n        else:\n            holderobj = node_or_obj.obj\n            nodeid = node_or_obj.nodeid\n        if holderobj in self._holderobjseen:\n            return\n\n        self._holderobjseen.add(holderobj)\n        autousenames = []\n        for name in dir(holderobj):\n            # The attribute can be an arbitrary descriptor, so the attribute\n            # access below can raise. safe_getatt() ignores such exceptions.\n            obj = safe_getattr(holderobj, name, None)\n            marker = getfixturemarker(obj)\n            if not isinstance(marker, FixtureFunctionMarker):\n                # magic globals  with __getattr__ might have got us a wrong\n                # fixture attribute\n                continue\n\n            if marker.name:\n                name = marker.name\n\n            # during fixture definition we wrap the original fixture function\n            # to issue a warning if called directly, so here we unwrap it in order to not emit the warning\n            # when pytest itself calls the fixture function\n            if six.PY2 and unittest:\n                # hack on Python 2 because of the unbound methods\n                obj = get_real_func(obj)\n            else:\n                obj = get_real_method(obj, holderobj)\n\n            fixture_def = FixtureDef(\n                self,\n                nodeid,\n                name,\n                obj,\n                marker.scope,\n                marker.params,\n                unittest=unittest,\n                ids=marker.ids,\n            )\n\n            faclist = self._arg2fixturedefs.setdefault(name, [])\n            if fixture_def.has_location:\n                faclist.append(fixture_def)\n            else:\n                # fixturedefs with no location are at the front\n                # so this inserts the current fixturedef after the\n                # existing fixturedefs from external plugins but\n                # before the fixturedefs provided in conftests.\n                i = len([f for f in faclist if not f.has_location])\n                faclist.insert(i, fixture_def)\n            if marker.autouse:\n                autousenames.append(name)\n\n        if autousenames:\n            self._nodeid_and_autousenames.append((nodeid or \"\", autousenames))",
            "start_line": 1246,
            "start_column": 47633,
            "end_line": 4,
            "end_column": 50003,
            "start_byte": 47633,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager.getfixturedefs": {
            "name": "_pytest.fixtures.FixtureManager.getfixturedefs",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def getfixturedefs(self, argname, nodeid):\n        \"\"\"\n        Gets a list of fixtures which are applicable to the given node id.\n\n        :param str argname: name of the fixture to search for\n        :param str nodeid: full node id of the requesting test.\n        :return: list[FixtureDef]\n        \"\"\"\n        try:\n            fixturedefs = self._arg2fixturedefs[argname]\n        except KeyError:\n            return None\n        return tuple(self._matchfactories(fixturedefs, nodeid))",
            "start_line": 1306,
            "start_column": 50009,
            "end_line": 4,
            "end_column": 50494,
            "start_byte": 50009,
            "end_byte": 4
          },
          "_pytest.fixtures.FixtureManager._matchfactories": {
            "name": "_pytest.fixtures.FixtureManager._matchfactories",
            "file_path": "src/_pytest/fixtures.py",
            "file_content": "def _matchfactories(self, fixturedefs, nodeid):\n        for fixturedef in fixturedefs:\n            if nodes.ischildnode(fixturedef.baseid, nodeid):\n                yield fixturedef",
            "start_line": 1320,
            "start_column": 50500,
            "end_line": 4,
            "end_column": 50680,
            "start_byte": 50500,
            "end_byte": 4
          }
        }
      }
    }
  ]
}