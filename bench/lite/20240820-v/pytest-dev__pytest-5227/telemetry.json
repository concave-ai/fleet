{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-5227",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-19T13:33:50.781795",
        "usage": "1167.2861576080322 ms"
      },
      "request": {
        "repo_tokens": [
          "summary_passes",
          "Cache",
          "summary_failures",
          "visit_Name",
          "fixturenames",
          "push_format_context",
          "extract_suffixes",
          "processoption",
          "fnmatch_lines",
          "LogCaptureHandler",
          "append_collect_error",
          "_read_pyc",
          "getpluginversioninfo",
          "typename",
          "cacheprovider",
          "find",
          "summary_errors",
          "_plugin_nameversions",
          "ids",
          "append_collect_skipped",
          "exit",
          "traceback",
          "_consider_importhook",
          "_validate_args",
          "delattr",
          "PYTEST_WARNS_UNKNOWN_KWARGS",
          "CallInfo",
          "write_fspath_result",
          "CLOSE_STDIN",
          "cwd_relative_nodeid",
          "mkdir",
          "getpathnode",
          "obj",
          "pytest_warning_captured",
          "FunctionMixin",
          "_import_plugin_specs",
          "_given_basetemp",
          "YIELD_TESTS",
          "addSkip",
          "last_failed_paths",
          "add_global_property",
          "store_mark",
          "resultlog",
          "OutcomeException",
          "parseconfig",
          "_format_args",
          "_ensure_basetemp",
          "runpytest",
          "builtin_plugins",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "getlocals",
          "_getnextfixturedef",
          "_get_allow_unicode_flag",
          "check_interactive_exception",
          "id",
          "getitems",
          "pastebin",
          "capsys",
          "NFPlugin",
          "approx",
          "RN",
          "deselect_by_keyword",
          "_early_rewrite_bailout",
          "_get_increasing_order",
          "_collect",
          "safeformat",
          "_determine_show_progress_info",
          "__unicode__",
          "pytest_sessionstart",
          "writeorg",
          "_translate_non_printable",
          "cleanup_numbered_dir",
          "is_rewrite_disabled",
          "_get_plugin_specs_as_list",
          "_rewrite_test",
          "_assertion_supported",
          "consider_module",
          "Failed",
          "_ensure_supporting_files",
          "pathlib",
          "terminal",
          "PytestPluginManager",
          "buffer",
          "pytest_runtest_call",
          "TEST_OUTCOME",
          "_compilecounter",
          "suspend_global_capture",
          "SysCaptureBinary",
          "get_lines_after",
          "pytest_internalerror",
          "pytestPDB",
          "runtest",
          "getrawcode",
          "__str__",
          "Exit",
          "getlocation",
          "UsageError",
          "SetupState",
          "_ensure_only_one_capture_fixture",
          "RE_IMPORT_ERROR_NAME",
          "match",
          "write_ensure_prefix",
          "_check_scope",
          "pytester",
          "_inject_setup_method_fixture",
          "EXIT_NOTESTSCOLLECTED",
          "_is_capturing",
          "Session",
          "activate_fixture",
          "setenv",
          "IGNORE_PAM",
          "getexplanation",
          "_call_and_format_exception",
          "pytest_report_collectionfinish",
          "classnamefilter",
          "args",
          "assign",
          "get_plugin_manager",
          "MultipleDoctestFailures",
          "showlongtestinfo",
          "ReprLocals",
          "is_package",
          "_matchnodes",
          "get_location",
          "_bestrelpath_cache",
          "NOTSET",
          "excinfo",
          "UnitTestCase",
          "fnmatch_lines_random",
          "LsofFdLeakChecker",
          "CallSpec2",
          "_iter_rewritable_modules",
          "raises",
          "_write_progress_information_filling_space",
          "addFailure",
          "cut",
          "readlines",
          "records",
          "pytest_assertrepr_compare",
          "getcrashentry",
          "_runtest_for_main",
          "pytest_enter_pdb",
          "collect_one_node",
          "Module",
          "consider_conftest",
          "compile",
          "_config_for_test",
          "notset",
          "runpython_c",
          "pytest_pycollect_makeitem",
          "from_item",
          "frame",
          "getargs",
          "pytest_collectstart",
          "_checkversion",
          "set_when",
          "FDCapture",
          "_force_symlink",
          "countoutcomes",
          "scope",
          "__test__",
          "compile_",
          "_LiveLoggingStreamHandler",
          "_init_runner_class",
          "ApproxBase",
          "_reprcompare",
          "_validate_usepdb_cls",
          "pytest_collection_modifyitems",
          "_fix_spoof_python2",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "getfixturevalue",
          "_make_xunit_fixture",
          "isdatacls",
          "PY36",
          "pytest_collect_directory",
          "ExceptionRepr",
          "_getconftestmodules",
          "nofuncargs",
          "re_match_lines_random",
          "_matches_prefix_or_glob_option",
          "get_common_ancestor",
          "pop_format_context",
          "scope2index",
          "pytest_report_teststatus",
          "ReprFailDoctest",
          "PytestCollectionWarning",
          "NodeMarkers",
          "_collectfile",
          "_dump_lines",
          "fix_cache_order",
          "CollectErrorRepr",
          "_for_parametrize",
          "_try_load_conftest",
          "SysModulesSnapshot",
          "rmtree",
          "_format_final_exc_line",
          "SubRequest",
          "HelpAction",
          "type",
          "pytest_fixture_post_finalizer",
          "python",
          "stop_global_capturing",
          "build_summary_stats_line",
          "visit_Starred",
          "reports",
          "extract_from",
          "mktemp",
          "getreports",
          "initialnames",
          "matchnodes",
          "fileno",
          "families",
          "_format_assertmsg",
          "DEFAULT_RELATIVE_TOLERANCE",
          "isdict",
          "LogCaptureFixture",
          "fail",
          "_warn_already_imported",
          "context",
          "explanation_param",
          "mkpydir",
          "AssertionRewritingHook",
          "getoption",
          "from_call",
          "MoreQuietAction",
          "find_prefixed",
          "out",
          "_PytestWrapper",
          "listextrakeywords",
          "RemovedInPytest4Warning",
          "getstatement",
          "template",
          "N",
          "pytest_logwarning",
          "get_records",
          "maybe_delete_a_numbered_dir",
          "_getscopeitem",
          "popen",
          "pytest_collect_file",
          "conftest_options",
          "EXIT_OK",
          "getfixtureclosure",
          "readline",
          "Interrupted",
          "TracebackEntry",
          "pytest_runtest_protocol",
          "record_tuples",
          "istrue",
          "_teardown_towards",
          "summary_warnings",
          "_seen",
          "write_captured_output",
          "location",
          "_cachedir",
          "_resolve_arg_value_types",
          "done",
          "MarkMapping",
          "post_mortem",
          "pytest_deselected",
          "__version__",
          "_approx_scalar",
          "NodeKeywords",
          "__setitem__",
          "skip",
          "_add_simple",
          "cached_eval",
          "_is_marked_for_rewrite",
          "for_later",
          "_update_current_test_var",
          "record_xml_attribute",
          "SysCapture",
          "resolve_from_str",
          "PytestAssertRewriteWarning",
          "print_teardown_sections",
          "append_error",
          "_truncate_explanation",
          "writelines",
          "funcargnames",
          "_folded_skips",
          "statement",
          "start_capturing",
          "list",
          "pytest_plugin_registered",
          "line",
          "helpconfig",
          "MarkEvaluator",
          "re_match_lines",
          "_ALLOW_MARKERS",
          "close",
          "PytestConfigWarning",
          "format",
          "_do_configure",
          "get_open_files",
          "call_runtest_hook",
          "node_reporter",
          "pytest_generate_tests",
          "_py_ext_re",
          "compat",
          "_getentrysource",
          "doctest",
          "rex_outcome",
          "_tmppath_factory",
          "Function",
          "get_parametrized_fixture_keys",
          "tmpdir_factory",
          "PyobjMixin",
          "_getcrashline",
          "ReprExceptionInfo",
          "determine_setup",
          "caplog",
          "visit_Assert",
          "pytest_make_collect_report",
          "isparseable",
          "pytest_keyboard_interrupt",
          "getfuncargvalue",
          "patchsysdict",
          "syspathinsert",
          "scopes",
          "get_user",
          "parse_setoption",
          "BaseReport",
          "warning_record_to_str",
          "_getvaluepath",
          "_main",
          "simple",
          "File",
          "CwdSnapshot",
          "visit_BinOp",
          "Junit",
          "HookRecorder",
          "LineMatcher",
          "pytest_collection",
          "_setoption",
          "pytest_runtestloop",
          "_show_fixtures_per_test",
          "repr_instance",
          "show_test_item",
          "get_source",
          "getsource",
          "parse_known_and_unknown_args",
          "function",
          "_get_runner",
          "cleanup_candidates",
          "makefile",
          "setitem",
          "ApproxScalar",
          "start",
          "MODULE_NOT_FOUND_ERROR",
          "capture",
          "add_funcarg_pseudo_fixture_def",
          "_get_verbose_word",
          "set_session",
          "get_lock_path",
          "eval",
          "_version",
          "_start",
          "_typ_map",
          "_ensure_unconfigure",
          "__version_tuple__",
          "_import_pdbcls",
          "chdir",
          "_node_location_to_relpath",
          "runner",
          "readouterr",
          "_postmortem_traceback",
          "node",
          "_initini",
          "teardown_exact",
          "get_default_arg_names",
          "junitxml",
          "illegal_xml_re",
          "cls",
          "repr_args",
          "spawn",
          "ReprEntry",
          "_exec_lsof",
          "Instance",
          "ReprEntryNative",
          "keywords",
          "_report_unserialization_failure",
          "_outrep_summary",
          "_recursive_debug",
          "module",
          "ReprTraceback",
          "source",
          "resolve_fixture_function",
          "PyobjContext",
          "winpymap",
          "pytest_report_from_serializable",
          "pop_outerr_to_orig",
          "_log",
          "_showfixtures_main",
          "Class",
          "wrap_function_to_error_out_if_called_directly",
          "visit_Call_legacy",
          "DEFAULT_MAX_LINES",
          "LEVELNAME_FMT_REGEX",
          "consider_preparse",
          "to_xml",
          "_pytest",
          "PytestExperimentalApiWarning",
          "__call__",
          "__nonzero__",
          "handler",
          "_truncate_recursive_traceback",
          "_repr_style",
          "update",
          "_width_of_current_line",
          "ensure_deletable",
          "applymarker",
          "_PLUGGY_DIR",
          "_pyfuncitem",
          "USAGE_MSG",
          "python_api",
          "repr_unicode",
          "_compare_eq_verbose",
          "prepare",
          "TempdirFactory",
          "EXIT_INTERNALERROR",
          "formatrepr",
          "assert_contains",
          "XFailed",
          "summary_stats",
          "_callfinalizers",
          "errors",
          "head_line",
          "idmaker",
          "_inject_setup_class_fixture",
          "set_repr_style",
          "_parsearg",
          "_getindent",
          "iter_markers_with_node",
          "display",
          "_callhelper",
          "Node",
          "_printcollecteditems",
          "pytest_runtest_logstart",
          "add_property",
          "MarkDecorator",
          "NoneType",
          "showlocals",
          "_sys_snapshot",
          "register_assert_rewrite",
          "warning_types",
          "directory_arg",
          "Package",
          "consider_env",
          "WARNS_EXEC",
          "get_fslocation_from_item",
          "_strtobool",
          "rewrite",
          "showheader",
          "_get_override_ini_value",
          "__repr__",
          "getini",
          "_inject_setup_function_fixture",
          "helper",
          "istestfunction",
          "deactivate_fixture",
          "parse",
          "_running_on_ci",
          "_basetemp",
          "FastFilesCompleter",
          "showversion",
          "gethookproxy",
          "indent",
          "__getitem__",
          "visit_Call_35",
          "get_empty_parameterset_mark",
          "log_outcome",
          "EncodedFile",
          "ihook",
          "_PY3",
          "prune_dependency_tree",
          "_importtestmodule",
          "_get_checker",
          "warn_about_none_ast",
          "_match_lines_random",
          "get_optionflags",
          "LogXML",
          "Skipped",
          "_compare_eq_set",
          "_some_str",
          "_should_repr_global_name",
          "pytest_exception_interact",
          "TestReport",
          "_init_pdb",
          "_ConfigDeprecated",
          "MultiCapture",
          "yield_fixture",
          "_resolve_arg_ids",
          "kwargs",
          "nodeid",
          "TestCaseFunction",
          "get_exconly",
          "_preparse",
          "_mark_plugins_for_rewrite",
          "UnformattedWarning",
          "visit_Compare",
          "getfslineno",
          "reorder_items",
          "message",
          "__init__",
          "_issue_warning_captured",
          "visit_UnaryOp",
          "_is_numpy_array",
          "normalize_mark_list",
          "CFG_PYTEST_SECTION",
          "when",
          "_yield_comparisons",
          "_install_capture_fixture_on_item",
          "isatty",
          "catch_warnings_for_item",
          "params",
          "_check_type",
          "ApproxMapping",
          "Source",
          "pytest_addoption",
          "parse_args",
          "listchain",
          "get",
          "NoCapture",
          "PYTEST_PARAM_UNKNOWN_KWARGS",
          "__all__",
          "listnames",
          "_finalize",
          "safe_text_dupfile",
          "cookie_re",
          "PYC_TAIL",
          "append",
          "hasopt",
          "getstatementrange_ast",
          "assert_contains_lines",
          "_set_opt_strings",
          "pytest_pycollect_makemodule",
          "_genfunctions",
          "Config",
          "_readline_workaround",
          "pyobj_property",
          "from_current",
          "bin_xml_escape",
          "tmp_path_factory",
          "_getpytestargs",
          "get_closest_marker",
          "isclass",
          "REPORT_COLLECTING_RESOLUTION",
          "__delitem__",
          "get_real_func",
          "SysPathsSnapshot",
          "_write_pyc",
          "_is_mocked",
          "_get_xunit_setup_teardown",
          "funcargs",
          "RaisesContext",
          "matchreport",
          "set_location",
          "essential_plugins",
          "parsefactories",
          "_should_rewrite",
          "prog",
          "update_testcase_duration",
          "DEFAULT_LOG_DATE_FORMAT",
          "linecomp",
          "pytest_collectreport",
          "mark_rewrite",
          "unittest",
          "FILE_OR_DIR",
          "_getparser",
          "_call_with_optional_argument",
          "generic_visit",
          "_getfailureheadline",
          "skipped",
          "CaptureResult",
          "capfdbinary",
          "abspath",
          "register_cleanup_lock_removal",
          "isfunction",
          "EMPTY_BUFFER",
          "pytest_itemstart",
          "FIXTURE_FUNCTION_CALL",
          "DOCTEST_REPORT_CHOICES",
          "addSuccess",
          "istext",
          "safe_getattr",
          "get_scope_node",
          "addError",
          "AssertionState",
          "raiseerror",
          "assertoutcome",
          "pytest_pyfunc_call",
          "ishidden",
          "_show_fixture_action",
          "NoMatch",
          "getmodulecol",
          "_getglobals",
          "_perform_collect",
          "getreportopt",
          "DummyRewriteHook",
          "_check_all_skipped",
          "cacheshow",
          "format_exception_only",
          "load_module",
          "pytest_configure",
          "copy_example",
          "find_module",
          "_check_initialpaths_for_relpath",
          "_recurse",
          "WarningsRecorder",
          "xfail",
          "_getini",
          "_runtest_for",
          "logging",
          "_pop_and_teardown",
          "warn",
          "_PY2",
          "run",
          "hookspec",
          "Item",
          "report_collect",
          "spawn_pytest",
          "messages",
          "setall",
          "name2fixturedefs",
          "fslocation",
          "_state",
          "astcache",
          "addoption",
          "reportinfo",
          "finish_recording",
          "repr",
          "ReprTracebackNative",
          "inline_runsource",
          "fromdictargs",
          "check_strict_xfail",
          "cmdline",
          "unary_map",
          "annotated_getattr",
          "get_unpacked_marks",
          "runpytest_inprocess",
          "capstdout",
          "_resume",
          "getfixturedefs",
          "__array_ufunc__",
          "setupplan",
          "strip",
          "start_global_capturing",
          "PYTEST_ENSURETEMP",
          "pytest_leave_pdb",
          "_markers",
          "_warn_if_env_name_is_not_str",
          "getparent",
          "_imp_find_module",
          "_idval",
          "PYTESTER_COPY_EXAMPLE",
          "FIXTURE_NAMED_REQUEST",
          "Traceback",
          "issequence",
          "safe_isclass",
          "deselect_by_mark",
          "get_scope_package",
          "GETFUNCARGVALUE",
          "scope2props",
          "_fix_unittest_skip_decorator",
          "ensure_reset_dir",
          "MarkGenerator",
          "ApproxSequencelike",
          "ExceptionChainRepr",
          "exconly",
          "SHOW_PYTEST_WARNINGS_ARG",
          "pytest_terminal_summary",
          "wrap_session",
          "_find_last_non_hidden_frame",
          "LOGLEVEL_COLOROPTS",
          "delenv",
          "finish",
          "_in_venv",
          "collect_by_name",
          "repr_traceback",
          "getplugin",
          "showfixtures",
          "config",
          "getinicfg",
          "binop_map",
          "add_cleanup",
          "assert_outcomes",
          "_colorama_workaround",
          "cached_result",
          "builtin",
          "warns",
          "addExpectedFailure",
          "_truncate_by_char_count",
          "record_property",
          "TimeoutExpired",
          "__enter__",
          "_idvalset",
          "newinstance",
          "_register_with_pkg_resources",
          "getparam",
          "PrintHelp",
          "_makepath",
          "rewrite_asserts",
          "ensuretemp",
          "fillfixtures",
          "DoctestTextfile",
          "showfspath",
          "recursionindex",
          "consider_pluginarg",
          "make_numbered_dir",
          "deprecated_call",
          "filter",
          "_saferepr",
          "_inject_setup_teardown_fixtures",
          "version_tuple",
          "defaultfuncargprefixmarker",
          "toterminal",
          "global_and_fixture_disabled",
          "repr_excinfo",
          "execute",
          "getfirstlinesource",
          "DEFAULT_MAX_CHARS",
          "inline_genitems",
          "DontReadFromInput",
          "write",
          "addsection",
          "pytest_unconfigure",
          "FixtureRequest",
          "findsource",
          "runpytest_subprocess",
          "delitem",
          "param",
          "_getlines",
          "getnode",
          "_PY_DIR",
          "with_args",
          "truncate_locals",
          "make_hook_recorder",
          "_factorytraceback",
          "PdbInvoke",
          "_rget_with_confmod",
          "exprinfo",
          "_test_pytest_function",
          "RunResult",
          "FixtureLookupError",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "visit_Attribute",
          "markname",
          "_getautousenames",
          "getdecoded",
          "_legal_xml_re",
          "skipping",
          "is_globally_capturing",
          "_non_printable_ascii_translate_table",
          "_attempt_to_close_capture_file",
          "isnosetest",
          "find_suffixes",
          "copy",
          "pytest_addhooks",
          "make_properties_node",
          "CaptureFixture",
          "_py36_windowsconsoleio_workaround",
          "_code",
          "create_cleanup_lock",
          "write_line",
          "pytest_cmdline_main",
          "teardown_all",
          "LOCK_TIMEOUT",
          "raise_on_kwargs",
          "_result",
          "_compare_eq_cls",
          "repr_traceback_entry",
          "_write_report_lines_from_hooks",
          "isinitpath",
          "_addfinalizer",
          "fspath",
          "set_level",
          "PytestArg",
          "collect",
          "_validate_if_using_arg_names",
          "is_generator",
          "PyCollector",
          "ReprFileLocation",
          "filename_arg",
          "SEP",
          "getfuncargnames",
          "call_optional",
          "get_statement_startend2",
          "COLLECT_FAKEMODULE_ATTRIBUTES",
          "get_option_ini",
          "is_capturing",
          "from_item_and_call",
          "_striptext",
          "addUnexpectedSuccess",
          "resolve",
          "pytest_report_to_serializable",
          "ResultLog",
          "_pdb_cls",
          "_cmp_raises_type_error",
          "pytest_runtest_setup",
          "isset",
          "getrepr",
          "_is_unittest_unexpected_success_a_failure",
          "PytestUnhandledCoroutineWarning",
          "version",
          "_getobj",
          "FixtureManager",
          "PytestCacheWarning",
          "_compare_eq_sequence",
          "scopename2class",
          "RAISES_EXEC",
          "_NodeReporter",
          "teardown_nose",
          "finalize",
          "runpython",
          "setuponly",
          "deprecated",
          "resume_global_capture",
          "scopeproperty",
          "REGEX_TYPE",
          "ensure_newline",
          "__take_sys_modules_snapshot",
          "import_plugin",
          "getcalls",
          "is_true",
          "makeini",
          "setup",
          "_parse_lsof_output",
          "getfixturemarker",
          "_argcomplete",
          "pytest_runtest_logfinish",
          "tmp_path",
          "addinivalue_line",
          "addfinalizer",
          "_find_parametrized_scope",
          "MARK_GEN",
          "write_log_entry",
          "_disable_output_capturing_for_darwin",
          "encoding",
          "setmulti2",
          "__hash__",
          "create_terminal_writer",
          "_iter_all_modules",
          "getvalueorskip",
          "RESULT_LOG",
          "TYPE_CHECKING",
          "filter_traceback",
          "getfailedcollections",
          "Frame",
          "for_config",
          "resume_fixture",
          "DEFAULT_LOG_FORMAT",
          "parametrize",
          "ReprFuncArgs",
          "_compare_eq_dict",
          "teardown",
          "__ne__",
          "EXIT_TESTSFAILED",
          "listoutcomes",
          "_get_report_choice",
          "ParsedCall",
          "_locationline",
          "passed",
          "MonkeyPatch",
          "register",
          "FuncFixtureInfo",
          "AssertionRewriter",
          "tbfilter",
          "install_importhook",
          "parseconfigure",
          "_addexcinfo",
          "__array_priority__",
          "saferepr",
          "getmodpath",
          "stopTest",
          "read",
          "__next__",
          "showhelp",
          "getcfg",
          "runitem",
          "pytest_ignore_collect",
          "FuncargnamesCompatAttr",
          "gethookrecorder",
          "verbosity",
          "longreprtext",
          "append_pass",
          "is_potential_nosetest",
          "perform_collect",
          "FixtureFunctionMarker",
          "_notin_text",
          "capture_fixtures",
          "_prepareconfig",
          "try_cleanup",
          "mangle_test_address",
          "PYTEST_LOGWARNING",
          "_format_boolop",
          "PytestDeprecationWarning",
          "pytest_cmdline_parse",
          "_assert_start_repr",
          "monkeypatch",
          "_format_action_invocation",
          "set_trace",
          "argnames",
          "_log_text",
          "CollectReport",
          "WarningReport",
          "getimfunc",
          "add_stats",
          "FunctionDefinition",
          "_warn_about_missing_assertion",
          "genitems",
          "stop_capturing",
          "reorder_items_atscope",
          "section",
          "autouse",
          "_excinfo",
          "parseoutcomes",
          "matchmark",
          "_handle_skip",
          "relline",
          "pytest_sessionfinish",
          "Mark",
          "ischildnode",
          "_diff_text",
          "parse_num",
          "exec_",
          "_should_truncate_item",
          "main",
          "matchkeyword",
          "fail_marker",
          "read_global_capture",
          "FDCaptureBinary",
          "get_terminal_writer",
          "get_sections",
          "hasplugin",
          "_processopt",
          "pytest_doctest_prepare_content",
          "names_closure",
          "ApproxNumpy",
          "truncate_if_required",
          "__bool__",
          "_recursive_list_map",
          "style",
          "write_sep",
          "repr_locals",
          "notify_exception",
          "DOCTEST_REPORT_CHOICE_NONE",
          "recwarn",
          "path",
          "_get_continue_on_failure",
          "__eq__",
          "scopemismatch",
          "resume_capturing",
          "nextitem",
          "_traceback",
          "parts",
          "add_report_section",
          "getcall",
          "set_log_path",
          "Entry",
          "README_CONTENT",
          "fail_fixturefunc",
          "pop",
          "item_capture",
          "_teardown_yield_fixture",
          "_makeitem",
          "isiterable",
          "Testdir",
          "names",
          "_get_active_fixturedef",
          "__len__",
          "call_fixture_func",
          "addini",
          "pytest_report_header",
          "_checkargnotcontained",
          "DoctestModule",
          "name",
          "getgroup",
          "_get_allow_bytes_flag",
          "make_numbered_dir_with_cleanup",
          "alias",
          "mark",
          "startTest",
          "CaptureManager",
          "suspend_fixture",
          "dummy_context_manager",
          "suspend_capturing",
          "get_data",
          "add_marker",
          "_format_lines",
          "_addoption",
          "popcall",
          "_warn_incompatibility_with_xunit2",
          "wasvalid",
          "PYC_EXT",
          "tmpdir",
          "nose",
          "_patched_find_module",
          "tb",
          "FixtureDef",
          "write_docstring",
          "istestclass",
          "session",
          "PdbTrace",
          "_makefile",
          "_io",
          "_compute_fixture_value",
          "_pluginmanager",
          "_importconftest",
          "debugging",
          "DropShorterLongHelpFormatter",
          "append_failure",
          "exc_clear",
          "importorskip",
          "testdir",
          "getslaveinfoline",
          "RAISES_MESSAGE_PARAMETER",
          "deindent",
          "_setup_cli_logging",
          "pytest_collection_finish",
          "funcnamefilter",
          "pytest_load_initial_conftests",
          "undo",
          "SafeRepr",
          "pytest_cmdline_preparse",
          "_get_progress_information_message",
          "getstatementrange",
          "repr_failure",
          "default_plugins",
          "_setup_collect_fakemodule",
          "_istrue",
          "from_config",
          "_schedule_finalizers",
          "setattr",
          "hasinit",
          "_getconftest_pathlist",
          "hookimpl",
          "nodes",
          "_initrequest",
          "_legal_chars",
          "FixtureLookupErrorRepr",
          "ASCII_IS_DEFAULT_ENCODING",
          "check_xfail_no_run",
          "parse_hookimpl_opts",
          "flow_marker",
          "tracebackcutdir",
          "OptionGroup",
          "reset",
          "_testcase",
          "FSCollector",
          "LFPlugin",
          "_repr_failure_py",
          "hasnew",
          "own_markers",
          "format_explanation",
          "visit_BoolOp",
          "getitem",
          "cache_dir_from_config",
          "BOM_UTF8",
          "capstderr",
          "get_dirs_from_args",
          "_set_initial_conftests",
          "_split_explanation",
          "_suspend",
          "iter_markers",
          "_get_fixturestack",
          "disabled",
          "addhooks",
          "chain",
          "capsysbinary",
          "syspath_prepend",
          "getfailures",
          "inline_run",
          "_report_keyboardinterrupt",
          "TerminalRepr",
          "path_matches_patterns",
          "snap",
          "_mk_tmp",
          "FormattedExcinfo",
          "record_testreport",
          "warnings",
          "PseudoFixtureDef",
          "EXIT_INTERRUPTED",
          "matching_platform",
          "pytest_itemcollected",
          "stepwise",
          "TerminalReporter",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "ArgumentError",
          "_legal_ranges",
          "call_and_report",
          "_addoption_instance",
          "freeze_support",
          "KeywordMapping",
          "_config",
          "_inject_setup_module_fixture",
          "fnmatch_ex",
          "variable",
          "PY35",
          "get_real_method",
          "CollectError",
          "Code",
          "_to_json",
          "LoggingPlugin",
          "ColoredLevelFormatter",
          "Collector",
          "merge_family",
          "_getcapture",
          "scopenum_function",
          "__setattr__",
          "PYTEST_CONFIG_GLOBAL",
          "suspend",
          "restore",
          "_opentestcase",
          "doctest_namespace",
          "append_skipped",
          "WarningsChecker",
          "StepwisePlugin",
          "get_actual_log_level",
          "_setup_fixtures",
          "pytest_runtest_makereport",
          "get_public_names",
          "get_config",
          "LineMatcher_fixture",
          "ParameterSet",
          "DoctestItem",
          "EXIT_USAGEERROR",
          "locals",
          "_get_non_fixture_func",
          "instance",
          "_tryconvertpyarg",
          "_log_cli_enabled",
          "catching_logs",
          "CACHEDIR_TAG_CONTENT",
          "_get_flag_lookup",
          "resume",
          "tolerance",
          "_get_marks",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "__iter__",
          "__getattr__",
          "_enter_pdb",
          "__exit__",
          "co_equal",
          "Metafunc",
          "PytestUnknownMarkWarning",
          "BASE_TYPE",
          "set",
          "entrysep",
          "errisinstance",
          "_patch_unwrap_mock_aware",
          "invalidraise",
          "setns",
          "_getreprcrash",
          "_splitnode",
          "result",
          "pytest_runtest_logreport",
          "Parser",
          "istestfunc",
          "outcomes",
          "iscoroutinefunction",
          "combined_with",
          "fixtures",
          "fullsource",
          "_from_json",
          "get_skip_exceptions",
          "LineComp",
          "at_level",
          "assertrepr_compare",
          "show_fixtures_per_test",
          "failed",
          "EMPTY_PARAMETERSET_OPTION",
          "_call_reprcompare",
          "MyOptionParser",
          "TempPathFactory",
          "getbasetemp",
          "clear",
          "__module__",
          "_teardown_with_finalization",
          "value",
          "error",
          "pytest_make_parametrize_id",
          "ApproxDecimal",
          "putaround",
          "PYTEST_PLUGINS_FROM_NON_TOP_LEVEL_CONFTEST",
          "_ascii_escaped_by_config",
          "_prunetraceback",
          "ExceptionInfo",
          "emit",
          "RUNNER_CLASS",
          "pytest_fixture_setup",
          "_match_lines",
          "count_towards_summary",
          "isattrs",
          "Notset",
          "maketxtfile",
          "parse_known_args",
          "makeconftest",
          "derive_importpath",
          "str",
          "_PYTEST_DIR",
          "num_mock_patch_args",
          "stop",
          "exists",
          "runtestprotocol",
          "category",
          "pytestconfig",
          "_fillfixtures",
          "fixture",
          "check_testcase_implements_trial_reporter",
          "add_attribute",
          "getvalue",
          "_get_global_properties_node",
          "ecu",
          "FSHookProxy",
          "_is_setup_py",
          "_matchfactories",
          "freeze_includes",
          "own_mark_names",
          "create_new_paste",
          "text",
          "pytest_runtest_teardown",
          "parse_hookspec_opts",
          "PytestWarning",
          "_trace",
          "__missing__",
          "short_test_summary",
          "_ensure_immutable_ids",
          "ConftestImportFailure",
          "get_direct_param_fixture_func",
          "_saved",
          "Argument",
          "capfd",
          "makedir",
          "_non_numeric_type_error",
          "cache",
          "_ensure_removed_sysmodule",
          "getfixtureinfo",
          "assertion",
          "attrs",
          "_is_doctest",
          "_compare_eq_iterable",
          "python_keywords_allowed_list",
          "makepyfile"
        ]
      },
      "response": {
        "keywords": [
          "DEFAULT_LOG_FORMAT",
          "logging",
          "LogCaptureHandler",
          "LogCaptureFixture",
          "set_log_path",
          "get_actual_log_level",
          "write_log_entry"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-19T13:33:51.949102",
        "usage": "221.34780883789062 ms"
      },
      "request": {
        "tokens": [
          "DEFAULT_LOG_FORMAT",
          "logging",
          "LogCaptureHandler",
          "LogCaptureFixture",
          "set_log_path",
          "get_actual_log_level",
          "write_log_entry"
        ]
      },
      "response": {
        "results": {
          "logging": [
            "src/_pytest/junitxml.py",
            "src/_pytest/logging.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/compat.py"
          ],
          "write_log_entry": [
            "src/_pytest/resultlog.py"
          ],
          "DEFAULT_LOG_FORMAT": [
            "src/_pytest/logging.py"
          ],
          "LogCaptureHandler": [
            "src/_pytest/logging.py"
          ],
          "LogCaptureFixture": [
            "src/_pytest/logging.py"
          ],
          "get_actual_log_level": [
            "src/_pytest/logging.py"
          ],
          "set_log_path": [
            "src/_pytest/logging.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-19T13:33:52.170463",
        "usage": "4669.455051422119 ms"
      },
      "request": {
        "keyword_search_results": {
          "logging": [
            "src/_pytest/junitxml.py",
            "src/_pytest/logging.py",
            "src/_pytest/hookspec.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/compat.py"
          ],
          "write_log_entry": [
            "src/_pytest/resultlog.py"
          ],
          "DEFAULT_LOG_FORMAT": [
            "src/_pytest/logging.py"
          ],
          "LogCaptureHandler": [
            "src/_pytest/logging.py"
          ],
          "LogCaptureFixture": [
            "src/_pytest/logging.py"
          ],
          "get_actual_log_level": [
            "src/_pytest/logging.py"
          ],
          "set_log_path": [
            "src/_pytest/logging.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is about improving the default logging format by including the module name and potentially other path-related details. The DEFAULT_LOG_FORMAT is specifically mentioned in the issue, indicating that changes likely need to happen where this format is defined or utilized.\n\nLooking at the keyword search results:\n\n1. **DEFAULT_LOG_FORMAT** - This keyword is found in 'src/_pytest/logging.py'. This is highly relevant as it might contain the definition or usage of the DEFAULT_LOG_FORMAT that needs to be modified.\n   \n2. **LogCaptureHandler**, **LogCaptureFixture**, **get_actual_log_level**, **set_log_path** - All these keywords point to 'src/_pytest/logging.py'. Given that they are related to logging, this file is the epicenter for logging configurations and handling, making it a prime candidate for addressing the format change.\n\n3. **logging** - Appears in several files, but most of these do not seem immediately related to changing the default format as much as 'src/_pytest/logging.py'. However, it indicates the broader context of logging within the project. Files like 'src/_pytest/junitxml.py' might be related to output formats and reporting which could use the log format.\n\nBased on the above considerations, 'src/_pytest/logging.py' is the most relevant file for this issue because it directly aligns with the DEFAULT_LOG_FORMAT and other logging handlers that could potentially use or affect how logs are formatted and captured. Other files are less relevant for the specific task of modifying the format itself.",
        "file_paths": [
          "src/_pytest/logging.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:33:56.839939",
        "usage": "7278.289794921875 ms"
      },
      "request": {
        "file_path": "src/_pytest/logging.py"
      },
      "response": {
        "scratch_pad": "1. Analyze User Instructions:\n - The user wants to improve the default logging format in their application. They propose adding the `name` (module name) to the format, and optionally suggest including a relative path to enhance log readability.\n - No specific reproduction steps are given since this is an enhancement request.\n - The core of the issue is to make logs more informative by including the module name in addition to the base filename.\n - The expected outcome is a more descriptive log output for better debugging and tracking of log messages back to their source.\n\n2. Make file evaluation:\n - The file `src/_pytest/logging.py` contains multiple logging configurations and classes.\n - The `DEFAULT_LOG_FORMAT` is defined at the beginning of the file: `DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"`.\n - The user's suggestion is to modify this to include module `name`, i.e., `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"`.\n - The file contains functions and classes that utilize this `DEFAULT_LOG_FORMAT`, such as `pytest_addoption()` where various logging options are added, `ColoredLevelFormatter` which is a custom logging formatter, and `LoggingPlugin` which sets up logging handlers and formatters.\n - Based on the file content, the `DEFAULT_LOG_FORMAT` is directly involved, making this file relevant to the issue reported.",
        "relevant": true,
        "root_cause": true,
        "relevant_files": [],
        "relevant_symbols": [
          "DEFAULT_LOG_FORMAT",
          "ColoredLevelFormatter",
          "pytest_addoption",
          "LoggingPlugin"
        ],
        "root_cause_symbols": [
          "DEFAULT_LOG_FORMAT"
        ]
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-19T13:34:04.118264",
        "usage": "82.31401443481445 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/logging.py",
            "relevant_symbol_keys": [
              "DEFAULT_LOG_FORMAT",
              "ColoredLevelFormatter",
              "pytest_addoption",
              "LoggingPlugin"
            ],
            "root_cause_symbol_keys": [
              "DEFAULT_LOG_FORMAT"
            ]
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: se",
            "start_line": 16,
            "start_column": 323,
            "end_line": 0,
            "end_column": 911,
            "start_byte": 323,
            "end_byte": 0
          },
          {
            "name": "_pytest.cacheprovider.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_",
            "start_line": 302,
            "start_column": 11191,
            "end_line": 0,
            "end_column": 12956,
            "start_byte": 11191,
            "end_byte": 0
          },
          {
            "name": "_pytest.capture.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ssage)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAM",
            "start_line": 25,
            "start_column": 455,
            "end_line": 0,
            "end_column": 934,
            "start_byte": 455,
            "end_byte": 0
          },
          {
            "name": "_pytest.debugging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ing.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname",
            "start_line": 26,
            "start_column": 683,
            "end_line": 0,
            "end_column": 1381,
            "start_byte": 683,
            "end_byte": 0
          },
          {
            "name": "_pytest.doctest.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "alwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(",
            "start_line": 37,
            "start_column": 1019,
            "end_line": 0,
            "end_column": 2437,
            "start_byte": 1019,
            "end_byte": 0
          },
          {
            "name": "_pytest.helpconfig.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "velname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(p",
            "start_line": 42,
            "start_column": 1294,
            "end_line": 0,
            "end_column": 2608,
            "start_byte": 1294,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "     if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *na",
            "start_line": 37,
            "start_column": 1119,
            "end_line": 0,
            "end_column": 2377,
            "start_byte": 1119,
            "end_byte": 0
          },
          {
            "name": "_pytest.junitxml.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically i",
            "start_line": 347,
            "start_column": 11276,
            "end_line": 0,
            "end_column": 12485,
            "start_byte": 11276,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 21,
            "start_column": 503,
            "end_line": 0,
            "end_column": 2344,
            "start_byte": 503,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.LOGLEVEL_COLOROPTS",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }",
            "start_line": 26,
            "start_column": 648,
            "end_line": 4,
            "end_column": 921,
            "start_byte": 648,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.LEVELNAME_FMT_REGEX",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")",
            "start_line": 35,
            "start_column": 926,
            "end_line": 4,
            "end_column": 988,
            "start_byte": 926,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )",
            "start_line": 37,
            "start_column": 994,
            "end_line": 4,
            "end_column": 2070,
            "start_byte": 994,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.format",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 64,
            "start_column": 2076,
            "end_line": 4,
            "end_column": 2344,
            "start_byte": 2076,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )",
            "start_line": 82,
            "start_column": 2586,
            "end_line": 0,
            "end_column": 5014,
            "start_byte": 2586,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 378,
            "start_column": 12060,
            "end_line": 0,
            "end_column": 20813,
            "start_byte": 12060,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()",
            "start_line": 382,
            "start_column": 12181,
            "end_line": 4,
            "end_column": 14040,
            "start_byte": 12181,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._setup_cli_logging",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )",
            "start_line": 429,
            "start_column": 14046,
            "end_line": 4,
            "end_column": 15496,
            "start_byte": 14046,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.set_log_path",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)",
            "start_line": 462,
            "start_column": 15502,
            "end_line": 4,
            "end_column": 16175,
            "start_byte": 15502,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._log_cli_enabled",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")",
            "start_line": 483,
            "start_column": 16181,
            "end_line": 4,
            "end_column": 16493,
            "start_byte": 16181,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_collection",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 491,
            "start_column": 16499,
            "end_line": 4,
            "end_column": 16920,
            "start_byte": 16499,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._runtest_for",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 503,
            "start_column": 16926,
            "end_line": 4,
            "end_column": 17232,
            "start_byte": 16926,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._runtest_for_main",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)",
            "start_line": 512,
            "start_column": 17238,
            "end_line": 4,
            "end_column": 18305,
            "start_byte": 17238,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield",
            "start_line": 541,
            "start_column": 18311,
            "end_line": 4,
            "end_column": 18452,
            "start_byte": 18311,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_call",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield",
            "start_line": 546,
            "start_column": 18458,
            "end_line": 4,
            "end_column": 18597,
            "start_byte": 18458,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield",
            "start_line": 551,
            "start_column": 18603,
            "end_line": 4,
            "end_column": 18750,
            "start_byte": 18603,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield",
            "start_line": 556,
            "start_column": 18756,
            "end_line": 4,
            "end_column": 18968,
            "start_byte": 18756,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield",
            "start_line": 563,
            "start_column": 18974,
            "end_line": 4,
            "end_column": 19114,
            "start_byte": 18974,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield",
            "start_line": 568,
            "start_column": 19120,
            "end_line": 4,
            "end_column": 19263,
            "start_byte": 19120,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield",
            "start_line": 573,
            "start_column": 19269,
            "end_line": 4,
            "end_column": 19972,
            "start_byte": 19269,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 591,
            "start_column": 19978,
            "end_line": 4,
            "end_column": 20402,
            "start_byte": 19978,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtestloop",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 602,
            "start_column": 20408,
            "end_line": 4,
            "end_column": 20813,
            "start_byte": 20408,
            "end_byte": 4
          },
          {
            "name": "_pytest.main.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "llow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catch",
            "start_line": 35,
            "start_column": 775,
            "end_line": 0,
            "end_column": 5042,
            "start_byte": 775,
            "end_byte": 0
          },
          {
            "name": "_pytest.mark.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(opti",
            "start_line": 39,
            "start_column": 1365,
            "end_line": 0,
            "end_column": 2919,
            "start_byte": 1365,
            "end_byte": 0
          },
          {
            "name": "_pytest.pastebin.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Color",
            "start_line": 13,
            "start_column": 240,
            "end_line": 0,
            "end_column": 568,
            "start_byte": 240,
            "end_byte": 0
          },
          {
            "name": "_pytest.pytester.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"level",
            "start_line": 39,
            "start_column": 994,
            "end_line": 0,
            "end_column": 1605,
            "start_byte": 994,
            "end_byte": 0
          },
          {
            "name": "_pytest.python.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "gs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the log",
            "start_line": 63,
            "start_column": 1905,
            "end_line": 0,
            "end_column": 3675,
            "start_byte": 1905,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": ".Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n",
            "start_line": 25,
            "start_column": 538,
            "end_line": 0,
            "end_column": 850,
            "start_byte": 538,
            "end_byte": 0
          },
          {
            "name": "_pytest.setuponly.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "int_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(loggin",
            "start_line": 9,
            "start_column": 138,
            "end_line": 0,
            "end_column": 537,
            "start_byte": 138,
            "end_byte": 0
          },
          {
            "name": "_pytest.setupplan.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT",
            "start_line": 7,
            "start_column": 126,
            "end_line": 0,
            "end_column": 403,
            "start_byte": 126,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "om _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.",
            "start_line": 12,
            "start_column": 353,
            "end_line": 0,
            "end_column": 833,
            "start_byte": 353,
            "end_byte": 0
          },
          {
            "name": "_pytest.stepwise.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ontrol log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DAT",
            "start_line": 3,
            "start_column": 16,
            "end_line": 0,
            "end_column": 479,
            "start_byte": 16,
            "end_byte": 0
          },
          {
            "name": "_pytest.terminal.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "S.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_",
            "start_line": 57,
            "start_column": 1520,
            "end_line": 0,
            "end_column": 4162,
            "start_byte": 1520,
            "end_byte": 0
          },
          {
            "name": "_pytest.warnings.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():",
            "start_line": 38,
            "start_column": 1068,
            "end_line": 0,
            "end_column": 1530,
            "start_byte": 1068,
            "end_byte": 0
          },
          {
            "name": "_pytest.resultlog.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "mport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(lo",
            "start_line": 12,
            "start_column": 217,
            "end_line": 0,
            "end_column": 533,
            "start_byte": 217,
            "end_byte": 0
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
            "file_path": "src/_pytest/logging.py",
            "file_content": "DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
            "start_line": 17,
            "start_column": 385,
            "end_line": 0,
            "end_column": 463,
            "start_byte": 385,
            "end_byte": 0
          }
        ]
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-19T13:34:04.200585",
        "usage": "10794.294118881226 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest.assertion.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: se",
            "start_line": 16,
            "start_column": 323,
            "end_line": 0,
            "end_column": 911,
            "start_byte": 323,
            "end_byte": 0
          },
          {
            "name": "_pytest.cacheprovider.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_",
            "start_line": 302,
            "start_column": 11191,
            "end_line": 0,
            "end_column": 12956,
            "start_byte": 11191,
            "end_byte": 0
          },
          {
            "name": "_pytest.capture.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ssage)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAM",
            "start_line": 25,
            "start_column": 455,
            "end_line": 0,
            "end_column": 934,
            "start_byte": 455,
            "end_byte": 0
          },
          {
            "name": "_pytest.debugging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ing.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname",
            "start_line": 26,
            "start_column": 683,
            "end_line": 0,
            "end_column": 1381,
            "start_byte": 683,
            "end_byte": 0
          },
          {
            "name": "_pytest.doctest.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "alwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(",
            "start_line": 37,
            "start_column": 1019,
            "end_line": 0,
            "end_column": 2437,
            "start_byte": 1019,
            "end_byte": 0
          },
          {
            "name": "_pytest.helpconfig.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "velname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(p",
            "start_line": 42,
            "start_column": 1294,
            "end_line": 0,
            "end_column": 2608,
            "start_byte": 1294,
            "end_byte": 0
          },
          {
            "name": "_pytest.hookspec.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "     if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *na",
            "start_line": 37,
            "start_column": 1119,
            "end_line": 0,
            "end_column": 2377,
            "start_byte": 1119,
            "end_byte": 0
          },
          {
            "name": "_pytest.junitxml.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically i",
            "start_line": 347,
            "start_column": 11276,
            "end_line": 0,
            "end_column": 12485,
            "start_byte": 11276,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 21,
            "start_column": 503,
            "end_line": 0,
            "end_column": 2344,
            "start_byte": 503,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.LOGLEVEL_COLOROPTS",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }",
            "start_line": 26,
            "start_column": 648,
            "end_line": 4,
            "end_column": 921,
            "start_byte": 648,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.LEVELNAME_FMT_REGEX",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")",
            "start_line": 35,
            "start_column": 926,
            "end_line": 4,
            "end_column": 988,
            "start_byte": 926,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )",
            "start_line": 37,
            "start_column": 994,
            "end_line": 4,
            "end_column": 2070,
            "start_byte": 994,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.ColoredLevelFormatter.format",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 64,
            "start_column": 2076,
            "end_line": 4,
            "end_column": 2344,
            "start_byte": 2076,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )",
            "start_line": 82,
            "start_column": 2586,
            "end_line": 0,
            "end_column": 5014,
            "start_byte": 2586,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 378,
            "start_column": 12060,
            "end_line": 0,
            "end_column": 20813,
            "start_byte": 12060,
            "end_byte": 0
          },
          {
            "name": "_pytest.logging.LoggingPlugin.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()",
            "start_line": 382,
            "start_column": 12181,
            "end_line": 4,
            "end_column": 14040,
            "start_byte": 12181,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._setup_cli_logging",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )",
            "start_line": 429,
            "start_column": 14046,
            "end_line": 4,
            "end_column": 15496,
            "start_byte": 14046,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.set_log_path",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)",
            "start_line": 462,
            "start_column": 15502,
            "end_line": 4,
            "end_column": 16175,
            "start_byte": 15502,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._log_cli_enabled",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")",
            "start_line": 483,
            "start_column": 16181,
            "end_line": 4,
            "end_column": 16493,
            "start_byte": 16181,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_collection",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 491,
            "start_column": 16499,
            "end_line": 4,
            "end_column": 16920,
            "start_byte": 16499,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._runtest_for",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 503,
            "start_column": 16926,
            "end_line": 4,
            "end_column": 17232,
            "start_byte": 16926,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin._runtest_for_main",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)",
            "start_line": 512,
            "start_column": 17238,
            "end_line": 4,
            "end_column": 18305,
            "start_byte": 17238,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield",
            "start_line": 541,
            "start_column": 18311,
            "end_line": 4,
            "end_column": 18452,
            "start_byte": 18311,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_call",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield",
            "start_line": 546,
            "start_column": 18458,
            "end_line": 4,
            "end_column": 18597,
            "start_byte": 18458,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield",
            "start_line": 551,
            "start_column": 18603,
            "end_line": 4,
            "end_column": 18750,
            "start_byte": 18603,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield",
            "start_line": 556,
            "start_column": 18756,
            "end_line": 4,
            "end_column": 18968,
            "start_byte": 18756,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield",
            "start_line": 563,
            "start_column": 18974,
            "end_line": 4,
            "end_column": 19114,
            "start_byte": 18974,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield",
            "start_line": 568,
            "start_column": 19120,
            "end_line": 4,
            "end_column": 19263,
            "start_byte": 19120,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield",
            "start_line": 573,
            "start_column": 19269,
            "end_line": 4,
            "end_column": 19972,
            "start_byte": 19269,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 591,
            "start_column": 19978,
            "end_line": 4,
            "end_column": 20402,
            "start_byte": 19978,
            "end_byte": 4
          },
          {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtestloop",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 602,
            "start_column": 20408,
            "end_line": 4,
            "end_column": 20813,
            "start_byte": 20408,
            "end_byte": 4
          },
          {
            "name": "_pytest.main.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "llow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catch",
            "start_line": 35,
            "start_column": 775,
            "end_line": 0,
            "end_column": 5042,
            "start_byte": 775,
            "end_byte": 0
          },
          {
            "name": "_pytest.mark.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(opti",
            "start_line": 39,
            "start_column": 1365,
            "end_line": 0,
            "end_column": 2919,
            "start_byte": 1365,
            "end_byte": 0
          },
          {
            "name": "_pytest.pastebin.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Color",
            "start_line": 13,
            "start_column": 240,
            "end_line": 0,
            "end_column": 568,
            "start_byte": 240,
            "end_byte": 0
          },
          {
            "name": "_pytest.pytester.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"level",
            "start_line": 39,
            "start_column": 994,
            "end_line": 0,
            "end_column": 1605,
            "start_byte": 994,
            "end_byte": 0
          },
          {
            "name": "_pytest.python.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "gs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the log",
            "start_line": 63,
            "start_column": 1905,
            "end_line": 0,
            "end_column": 3675,
            "start_byte": 1905,
            "end_byte": 0
          },
          {
            "name": "_pytest.runner.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": ".Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n",
            "start_line": 25,
            "start_column": 538,
            "end_line": 0,
            "end_column": 850,
            "start_byte": 538,
            "end_byte": 0
          },
          {
            "name": "_pytest.setuponly.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "int_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(loggin",
            "start_line": 9,
            "start_column": 138,
            "end_line": 0,
            "end_column": 537,
            "start_byte": 138,
            "end_byte": 0
          },
          {
            "name": "_pytest.setupplan.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT",
            "start_line": 7,
            "start_column": 126,
            "end_line": 0,
            "end_column": 403,
            "start_byte": 126,
            "end_byte": 0
          },
          {
            "name": "_pytest.skipping.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "om _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.",
            "start_line": 12,
            "start_column": 353,
            "end_line": 0,
            "end_column": 833,
            "start_byte": 353,
            "end_byte": 0
          },
          {
            "name": "_pytest.stepwise.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ontrol log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DAT",
            "start_line": 3,
            "start_column": 16,
            "end_line": 0,
            "end_column": 479,
            "start_byte": 16,
            "end_byte": 0
          },
          {
            "name": "_pytest.terminal.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "S.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_",
            "start_line": 57,
            "start_column": 1520,
            "end_line": 0,
            "end_column": 4162,
            "start_byte": 1520,
            "end_byte": 0
          },
          {
            "name": "_pytest.warnings.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():",
            "start_line": 38,
            "start_column": 1068,
            "end_line": 0,
            "end_column": 1530,
            "start_byte": 1068,
            "end_byte": 0
          },
          {
            "name": "_pytest.resultlog.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "mport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(lo",
            "start_line": 12,
            "start_column": 217,
            "end_line": 0,
            "end_column": 533,
            "start_byte": 217,
            "end_byte": 0
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
            "file_path": "src/_pytest/logging.py",
            "file_content": "DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
            "start_line": 17,
            "start_column": 385,
            "end_line": 0,
            "end_column": 463,
            "start_byte": 385,
            "end_byte": 0
          }
        ]
      },
      "response": {
        "scratch_pad": "1. Issue Analysis:\n   - The issue is about improving the default logging format in the pytest logging configuration.\n   - The current format is `DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"`.\n   - The user suggests adding `%(name)s` to capture the module name and possibly the relative path.\n   - The revised format proposed is `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"`.\n\n2. Symbol Analysis:\n   - The primary symbol affected by this change is `DEFAULT_LOG_FORMAT` in the file `src/_pytest/logging.py`.\n   - Other symbols and content provided are related to logging configuration and setup but do not directly define the `DEFAULT_LOG_FORMAT`.\n   - Most of the entries pertain to the configuration utilities, adding options or formatting functions.\n\n3. Evaluation and Actions:\n   - Only one specific symbol needs to be changed, and that is the `DEFAULT_LOG_FORMAT` definition.\n   - Other parts of the file `src/_pytest/logging.py` might refer to this format but do not require changes unless they explicitly construct or expect logs in the current format, of which there is no evidence in provided symbols.\n\nConclusion: Only `DEFAULT_LOG_FORMAT` needs to be updated based on current information.",
        "symbols": [
          {
            "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
            "file_path": "src/_pytest/logging.py",
            "reason": "This symbol holds the logging format string that needs to be modified to include module name `%(name)s`."
          }
        ],
        "more_info": [],
        "is_done": true,
        "symbols_scratch_pad": [
          "The symbol `_pytest.logging.DEFAULT_LOG_FORMAT` in `src/_pytest/logging.py` directly defines the default format string for logging, which needs modification according to the user's issue description.",
          "The symbol `_pytest.assertion.pytest_addoption` doesn't relate directly to the logging format but rather to logging options and configuration. No changes are needed here.",
          "The symbol `_pytest.cacheprovider.pytest_addoption` involves configuration settings and log level determination, irrelevant to the format string modification.",
          "The symbol `_pytest.capture.pytest_addoption` doesn't encompass changes needed for the format string itself but rather log color configurations.",
          "The symbol `_pytest.debugging.pytest_addoption` is also within the realm of configuration and doesn't impact the log format update.",
          "The symbol `_pytest.doctest.pytest_addoption` relates to adding options and configurations rather than changing the format string itself.",
          "The `_pytest.logging.ColoredLevelFormatter` class handles the color formatting of logs and should be unaffected by the format string update.",
          "Other symbols provided are involved in plugin setup, option adding, and configuration; none have a directive impact on the format update required."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-19T13:34:14.994894",
        "usage": "3.593921661376953 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest.assertion.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "port create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: se",
              "start_line": 16,
              "start_column": 323,
              "end_line": 0,
              "end_column": 911,
              "start_byte": 323,
              "end_byte": 0
            },
            {
              "name": "_pytest.cacheprovider.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "   log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_",
              "start_line": 302,
              "start_column": 11191,
              "end_line": 0,
              "end_column": 12956,
              "start_byte": 11191,
              "end_byte": 0
            },
            {
              "name": "_pytest.capture.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "ssage)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAM",
              "start_line": 25,
              "start_column": 455,
              "end_line": 0,
              "end_column": 934,
              "start_byte": 455,
              "end_byte": 0
            },
            {
              "name": "_pytest.debugging.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "ing.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname",
              "start_line": 26,
              "start_column": 683,
              "end_line": 0,
              "end_column": 1381,
              "start_byte": 683,
              "end_byte": 0
            },
            {
              "name": "_pytest.doctest.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "alwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(",
              "start_line": 37,
              "start_column": 1019,
              "end_line": 0,
              "end_column": 2437,
              "start_byte": 1019,
              "end_byte": 0
            },
            {
              "name": "_pytest.helpconfig.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "velname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(p",
              "start_line": 42,
              "start_column": 1294,
              "end_line": 0,
              "end_column": 2608,
              "start_byte": 1294,
              "end_byte": 0
            },
            {
              "name": "_pytest.hookspec.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "     if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *na",
              "start_line": 37,
              "start_column": 1119,
              "end_line": 0,
              "end_column": 2377,
              "start_byte": 1119,
              "end_byte": 0
            },
            {
              "name": "_pytest.junitxml.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "   log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically i",
              "start_line": 347,
              "start_column": 11276,
              "end_line": 0,
              "end_column": 12485,
              "start_byte": 11276,
              "end_byte": 0
            },
            {
              "name": "_pytest.logging.ColoredLevelFormatter",
              "file_path": "src/_pytest/logging.py",
              "file_content": "class ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
              "start_line": 21,
              "start_column": 503,
              "end_line": 0,
              "end_column": 2344,
              "start_byte": 503,
              "end_byte": 0
            },
            {
              "name": "_pytest.logging.ColoredLevelFormatter.LOGLEVEL_COLOROPTS",
              "file_path": "src/_pytest/logging.py",
              "file_content": "LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }",
              "start_line": 26,
              "start_column": 648,
              "end_line": 4,
              "end_column": 921,
              "start_byte": 648,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.ColoredLevelFormatter.LEVELNAME_FMT_REGEX",
              "file_path": "src/_pytest/logging.py",
              "file_content": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")",
              "start_line": 35,
              "start_column": 926,
              "end_line": 4,
              "end_column": 988,
              "start_byte": 926,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.ColoredLevelFormatter.__init__",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )",
              "start_line": 37,
              "start_column": 994,
              "end_line": 4,
              "end_column": 2070,
              "start_byte": 994,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.ColoredLevelFormatter.format",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
              "start_line": 64,
              "start_column": 2076,
              "end_line": 4,
              "end_column": 2344,
              "start_byte": 2076,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )",
              "start_line": 82,
              "start_column": 2586,
              "end_line": 0,
              "end_column": 5014,
              "start_byte": 2586,
              "end_byte": 0
            },
            {
              "name": "_pytest.logging.LoggingPlugin",
              "file_path": "src/_pytest/logging.py",
              "file_content": "class LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
              "start_line": 378,
              "start_column": 12060,
              "end_line": 0,
              "end_column": 20813,
              "start_byte": 12060,
              "end_byte": 0
            },
            {
              "name": "_pytest.logging.LoggingPlugin.__init__",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()",
              "start_line": 382,
              "start_column": 12181,
              "end_line": 4,
              "end_column": 14040,
              "start_byte": 12181,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin._setup_cli_logging",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )",
              "start_line": 429,
              "start_column": 14046,
              "end_line": 4,
              "end_column": 15496,
              "start_byte": 14046,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.set_log_path",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)",
              "start_line": 462,
              "start_column": 15502,
              "end_line": 4,
              "end_column": 16175,
              "start_byte": 15502,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin._log_cli_enabled",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")",
              "start_line": 483,
              "start_column": 16181,
              "end_line": 4,
              "end_column": 16493,
              "start_byte": 16181,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_collection",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
              "start_line": 491,
              "start_column": 16499,
              "end_line": 4,
              "end_column": 16920,
              "start_byte": 16499,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin._runtest_for",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
              "start_line": 503,
              "start_column": 16926,
              "end_line": 4,
              "end_column": 17232,
              "start_byte": 16926,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin._runtest_for_main",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)",
              "start_line": 512,
              "start_column": 17238,
              "end_line": 4,
              "end_column": 18305,
              "start_byte": 17238,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield",
              "start_line": 541,
              "start_column": 18311,
              "end_line": 4,
              "end_column": 18452,
              "start_byte": 18311,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_call",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield",
              "start_line": 546,
              "start_column": 18458,
              "end_line": 4,
              "end_column": 18597,
              "start_byte": 18458,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield",
              "start_line": 551,
              "start_column": 18603,
              "end_line": 4,
              "end_column": 18750,
              "start_byte": 18603,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logstart",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield",
              "start_line": 556,
              "start_column": 18756,
              "end_line": 4,
              "end_column": 18968,
              "start_byte": 18756,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logfinish",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield",
              "start_line": 563,
              "start_column": 18974,
              "end_line": 4,
              "end_column": 19114,
              "start_byte": 18974,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield",
              "start_line": 568,
              "start_column": 19120,
              "end_line": 4,
              "end_column": 19263,
              "start_byte": 19120,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_sessionfinish",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield",
              "start_line": 573,
              "start_column": 19269,
              "end_line": 4,
              "end_column": 19972,
              "start_byte": 19269,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_sessionstart",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
              "start_line": 591,
              "start_column": 19978,
              "end_line": 4,
              "end_column": 20402,
              "start_byte": 19978,
              "end_byte": 4
            },
            {
              "name": "_pytest.logging.LoggingPlugin.pytest_runtestloop",
              "file_path": "src/_pytest/logging.py",
              "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
              "start_line": 602,
              "start_column": 20408,
              "end_line": 4,
              "end_column": 20813,
              "start_byte": 20408,
              "end_byte": 4
            },
            {
              "name": "_pytest.main.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "llow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catch",
              "start_line": 35,
              "start_column": 775,
              "end_line": 0,
              "end_column": 5042,
              "start_byte": 775,
              "end_byte": 0
            },
            {
              "name": "_pytest.mark.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(opti",
              "start_line": 39,
              "start_column": 1365,
              "end_line": 0,
              "end_column": 2919,
              "start_byte": 1365,
              "end_byte": 0
            },
            {
              "name": "_pytest.pastebin.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "port pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Color",
              "start_line": 13,
              "start_column": 240,
              "end_line": 0,
              "end_column": 568,
              "start_byte": 240,
              "end_byte": 0
            },
            {
              "name": "_pytest.pytester.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"level",
              "start_line": 39,
              "start_column": 994,
              "end_line": 0,
              "end_column": 1605,
              "start_byte": 994,
              "end_byte": 0
            },
            {
              "name": "_pytest.python.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "gs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the log",
              "start_line": 63,
              "start_column": 1905,
              "end_line": 0,
              "end_column": 3675,
              "start_byte": 1905,
              "end_byte": 0
            },
            {
              "name": "_pytest.runner.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": ".Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n",
              "start_line": 25,
              "start_column": 538,
              "end_line": 0,
              "end_column": 850,
              "start_byte": 538,
              "end_byte": 0
            },
            {
              "name": "_pytest.setuponly.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "int_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(loggin",
              "start_line": 9,
              "start_column": 138,
              "end_line": 0,
              "end_column": 537,
              "start_byte": 138,
              "end_byte": 0
            },
            {
              "name": "_pytest.setupplan.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT",
              "start_line": 7,
              "start_column": 126,
              "end_line": 0,
              "end_column": 403,
              "start_byte": 126,
              "end_byte": 0
            },
            {
              "name": "_pytest.skipping.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "om _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.",
              "start_line": 12,
              "start_column": 353,
              "end_line": 0,
              "end_column": 833,
              "start_byte": 353,
              "end_byte": 0
            },
            {
              "name": "_pytest.stepwise.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "ontrol log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DAT",
              "start_line": 3,
              "start_column": 16,
              "end_line": 0,
              "end_column": 479,
              "start_byte": 16,
              "end_byte": 0
            },
            {
              "name": "_pytest.terminal.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "S.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_",
              "start_line": 57,
              "start_column": 1520,
              "end_line": 0,
              "end_column": 4162,
              "start_byte": 1520,
              "end_byte": 0
            },
            {
              "name": "_pytest.warnings.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "LevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():",
              "start_line": 38,
              "start_column": 1068,
              "end_line": 0,
              "end_column": 1530,
              "start_byte": 1068,
              "end_byte": 0
            },
            {
              "name": "_pytest.resultlog.pytest_addoption",
              "file_path": "src/_pytest/logging.py",
              "file_content": "mport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(lo",
              "start_line": 12,
              "start_column": 217,
              "end_line": 0,
              "end_column": 533,
              "start_byte": 217,
              "end_byte": 0
            }
          ],
          "root_caused_symbols": [
            {
              "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
              "file_path": "src/_pytest/logging.py",
              "file_content": "DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
              "start_line": 17,
              "start_column": 385,
              "end_line": 0,
              "end_column": 463,
              "start_byte": 385,
              "end_byte": 0
            }
          ]
        },
        "symbols_evaluate": {
          "scratch_pad": "1. Issue Analysis:\n   - The issue is about improving the default logging format in the pytest logging configuration.\n   - The current format is `DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"`.\n   - The user suggests adding `%(name)s` to capture the module name and possibly the relative path.\n   - The revised format proposed is `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"`.\n\n2. Symbol Analysis:\n   - The primary symbol affected by this change is `DEFAULT_LOG_FORMAT` in the file `src/_pytest/logging.py`.\n   - Other symbols and content provided are related to logging configuration and setup but do not directly define the `DEFAULT_LOG_FORMAT`.\n   - Most of the entries pertain to the configuration utilities, adding options or formatting functions.\n\n3. Evaluation and Actions:\n   - Only one specific symbol needs to be changed, and that is the `DEFAULT_LOG_FORMAT` definition.\n   - Other parts of the file `src/_pytest/logging.py` might refer to this format but do not require changes unless they explicitly construct or expect logs in the current format, of which there is no evidence in provided symbols.\n\nConclusion: Only `DEFAULT_LOG_FORMAT` needs to be updated based on current information.",
          "symbols": [
            {
              "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
              "file_path": "src/_pytest/logging.py",
              "reason": "This symbol holds the logging format string that needs to be modified to include module name `%(name)s`."
            }
          ],
          "more_info": [],
          "is_done": true,
          "symbols_scratch_pad": [
            "The symbol `_pytest.logging.DEFAULT_LOG_FORMAT` in `src/_pytest/logging.py` directly defines the default format string for logging, which needs modification according to the user's issue description.",
            "The symbol `_pytest.assertion.pytest_addoption` doesn't relate directly to the logging format but rather to logging options and configuration. No changes are needed here.",
            "The symbol `_pytest.cacheprovider.pytest_addoption` involves configuration settings and log level determination, irrelevant to the format string modification.",
            "The symbol `_pytest.capture.pytest_addoption` doesn't encompass changes needed for the format string itself but rather log color configurations.",
            "The symbol `_pytest.debugging.pytest_addoption` is also within the realm of configuration and doesn't impact the log format update.",
            "The symbol `_pytest.doctest.pytest_addoption` relates to adding options and configurations rather than changing the format string itself.",
            "The `_pytest.logging.ColoredLevelFormatter` class handles the color formatting of logs and should be unaffected by the format string update.",
            "Other symbols provided are involved in plugin setup, option adding, and configuration; none have a directive impact on the format update required."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/logging.py"
        ],
        "symbols": [
          "_pytest.logging.DEFAULT_LOG_FORMAT"
        ],
        "code_spans": {
          "_pytest.assertion.pytest_addoption": {
            "name": "_pytest.assertion.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: se",
            "start_line": 16,
            "start_column": 323,
            "end_line": 0,
            "end_column": 911,
            "start_byte": 323,
            "end_byte": 0
          },
          "_pytest.cacheprovider.pytest_addoption": {
            "name": "_pytest.cacheprovider.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getoption(setting_name)\n        if log_level is None:\n            log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_",
            "start_line": 302,
            "start_column": 11191,
            "end_line": 0,
            "end_column": 12956,
            "start_byte": 11191,
            "end_byte": 0
          },
          "_pytest.capture.pytest_addoption": {
            "name": "_pytest.capture.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ssage)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAM",
            "start_line": 25,
            "start_column": 455,
            "end_line": 0,
            "end_column": 934,
            "start_byte": 455,
            "end_byte": 0
          },
          "_pytest.debugging.pytest_addoption": {
            "name": "_pytest.debugging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ing.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname",
            "start_line": 26,
            "start_column": 683,
            "end_line": 0,
            "end_column": 1381,
            "start_byte": 683,
            "end_byte": 0
          },
          "_pytest.doctest.pytest_addoption": {
            "name": "_pytest.doctest.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "alwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(",
            "start_line": 37,
            "start_column": 1019,
            "end_line": 0,
            "end_column": 2437,
            "start_byte": 1019,
            "end_byte": 0
          },
          "_pytest.helpconfig.pytest_addoption": {
            "name": "_pytest.helpconfig.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "velname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(p",
            "start_line": 42,
            "start_column": 1294,
            "end_line": 0,
            "end_column": 2608,
            "start_byte": 1294,
            "end_byte": 0
          },
          "_pytest.hookspec.pytest_addoption": {
            "name": "_pytest.hookspec.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "     if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *na",
            "start_line": 37,
            "start_column": 1119,
            "end_line": 0,
            "end_column": 2377,
            "start_byte": 1119,
            "end_byte": 0
          },
          "_pytest.junitxml.pytest_addoption": {
            "name": "_pytest.junitxml.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "   log_level = config.getini(setting_name)\n        if log_level:\n            break\n    else:\n        return\n\n    if isinstance(log_level, six.string_types):\n        log_level = log_level.upper()\n    try:\n        return int(getattr(logging, log_level, log_level))\n    except ValueError:\n        # Python logging does not recognise this as a logging level\n        raise pytest.UsageError(\n            \"'{}' is not recognized as a logging level name for \"\n            \"'{}'. Please consider passing the \"\n            \"logging level num instead.\".format(log_level, setting_name)\n        )\n\n\n# run after terminalreporter/capturemanager are configured\n@pytest.hookimpl(trylast=True)\ndef pytest_configure(config):\n    config.pluginmanager.register(LoggingPlugin(config), \"logging-plugin\")\n\n\nclass LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically i",
            "start_line": 347,
            "start_column": 11276,
            "end_line": 0,
            "end_column": 12485,
            "start_byte": 11276,
            "end_byte": 0
          },
          "_pytest.logging.ColoredLevelFormatter": {
            "name": "_pytest.logging.ColoredLevelFormatter",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 21,
            "start_column": 503,
            "end_line": 0,
            "end_column": 2344,
            "start_byte": 503,
            "end_byte": 0
          },
          "_pytest.logging.ColoredLevelFormatter.LOGLEVEL_COLOROPTS": {
            "name": "_pytest.logging.ColoredLevelFormatter.LOGLEVEL_COLOROPTS",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }",
            "start_line": 26,
            "start_column": 648,
            "end_line": 4,
            "end_column": 921,
            "start_byte": 648,
            "end_byte": 4
          },
          "_pytest.logging.ColoredLevelFormatter.LEVELNAME_FMT_REGEX": {
            "name": "_pytest.logging.ColoredLevelFormatter.LEVELNAME_FMT_REGEX",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")",
            "start_line": 35,
            "start_column": 926,
            "end_line": 4,
            "end_column": 988,
            "start_byte": 926,
            "end_byte": 4
          },
          "_pytest.logging.ColoredLevelFormatter.__init__": {
            "name": "_pytest.logging.ColoredLevelFormatter.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )",
            "start_line": 37,
            "start_column": 994,
            "end_line": 4,
            "end_column": 2070,
            "start_byte": 994,
            "end_byte": 4
          },
          "_pytest.logging.ColoredLevelFormatter.format": {
            "name": "_pytest.logging.ColoredLevelFormatter.format",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)",
            "start_line": 64,
            "start_column": 2076,
            "end_line": 4,
            "end_column": 2344,
            "start_byte": 2076,
            "end_byte": 4
          },
          "_pytest.logging.pytest_addoption": {
            "name": "_pytest.logging.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )",
            "start_line": 82,
            "start_column": 2586,
            "end_line": 0,
            "end_column": 5014,
            "start_byte": 2586,
            "end_byte": 0
          },
          "_pytest.logging.LoggingPlugin": {
            "name": "_pytest.logging.LoggingPlugin",
            "file_path": "src/_pytest/logging.py",
            "file_content": "class LoggingPlugin(object):\n    \"\"\"Attaches to the logging module and captures log messages for each test.\n    \"\"\"\n\n    def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()\n\n    def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )\n\n    def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)\n\n    def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 378,
            "start_column": 12060,
            "end_line": 0,
            "end_column": 20813,
            "start_byte": 12060,
            "end_byte": 0
          },
          "_pytest.logging.LoggingPlugin.__init__": {
            "name": "_pytest.logging.LoggingPlugin.__init__",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, config):\n        \"\"\"Creates a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        \"\"\"\n        self._config = config\n\n        # enable verbose output automatically if live logging is enabled\n        if self._log_cli_enabled() and config.getoption(\"verbose\") < 1:\n            config.option.verbose = 1\n\n        self.print_logs = get_option_ini(config, \"log_print\")\n        self.formatter = logging.Formatter(\n            get_option_ini(config, \"log_format\"),\n            get_option_ini(config, \"log_date_format\"),\n        )\n        self.log_level = get_actual_log_level(config, \"log_level\")\n\n        self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n        self.log_file_format = get_option_ini(config, \"log_file_format\", \"log_format\")\n        self.log_file_date_format = get_option_ini(\n            config, \"log_file_date_format\", \"log_date_format\"\n        )\n        self.log_file_formatter = logging.Formatter(\n            self.log_file_format, datefmt=self.log_file_date_format\n        )\n\n        log_file = get_option_ini(config, \"log_file\")\n        if log_file:\n            self.log_file_handler = logging.FileHandler(\n                log_file, mode=\"w\", encoding=\"UTF-8\"\n            )\n            self.log_file_handler.setFormatter(self.log_file_formatter)\n        else:\n            self.log_file_handler = None\n\n        self.log_cli_handler = None\n\n        self.live_logs_context = lambda: dummy_context_manager()\n        # Note that the lambda for the live_logs_context is needed because\n        # live_logs_context can otherwise not be entered multiple times due\n        # to limitations of contextlib.contextmanager.\n\n        if self._log_cli_enabled():\n            self._setup_cli_logging()",
            "start_line": 382,
            "start_column": 12181,
            "end_line": 4,
            "end_column": 14040,
            "start_byte": 12181,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin._setup_cli_logging": {
            "name": "_pytest.logging.LoggingPlugin._setup_cli_logging",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _setup_cli_logging(self):\n        config = self._config\n        terminal_reporter = config.pluginmanager.get_plugin(\"terminalreporter\")\n        if terminal_reporter is None:\n            # terminal reporter is disabled e.g. by pytest-xdist.\n            return\n\n        capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n        # if capturemanager plugin is disabled, live logging still works.\n        log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n        log_cli_date_format = get_option_ini(\n            config, \"log_cli_date_format\", \"log_date_format\"\n        )\n        if (\n            config.option.color != \"no\"\n            and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n        ):\n            log_cli_formatter = ColoredLevelFormatter(\n                create_terminal_writer(config),\n                log_cli_format,\n                datefmt=log_cli_date_format,\n            )\n        else:\n            log_cli_formatter = logging.Formatter(\n                log_cli_format, datefmt=log_cli_date_format\n            )\n        log_cli_level = get_actual_log_level(config, \"log_cli_level\", \"log_level\")\n        self.log_cli_handler = log_cli_handler\n        self.live_logs_context = lambda: catching_logs(\n            log_cli_handler, formatter=log_cli_formatter, level=log_cli_level\n        )",
            "start_line": 429,
            "start_column": 14046,
            "end_line": 4,
            "end_column": 15496,
            "start_byte": 14046,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.set_log_path": {
            "name": "_pytest.logging.LoggingPlugin.set_log_path",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def set_log_path(self, fname):\n        \"\"\"Public method, which can set filename parameter for\n        Logging.FileHandler(). Also creates parent directory if\n        it does not exist.\n\n        .. warning::\n            Please considered as an experimental API.\n        \"\"\"\n        fname = Path(fname)\n\n        if not fname.is_absolute():\n            fname = Path(self._config.rootdir, fname)\n\n        if not fname.parent.exists():\n            fname.parent.mkdir(exist_ok=True, parents=True)\n\n        self.log_file_handler = logging.FileHandler(\n            str(fname), mode=\"w\", encoding=\"UTF-8\"\n        )\n        self.log_file_handler.setFormatter(self.log_file_formatter)",
            "start_line": 462,
            "start_column": 15502,
            "end_line": 4,
            "end_column": 16175,
            "start_byte": 15502,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin._log_cli_enabled": {
            "name": "_pytest.logging.LoggingPlugin._log_cli_enabled",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def _log_cli_enabled(self):\n        \"\"\"Return True if log_cli should be considered enabled, either explicitly\n        or because --log-cli-level was given in the command-line.\n        \"\"\"\n        return self._config.getoption(\n            \"--log-cli-level\"\n        ) is not None or self._config.getini(\"log_cli\")",
            "start_line": 483,
            "start_column": 16181,
            "end_line": 4,
            "end_column": 16493,
            "start_byte": 16181,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_collection": {
            "name": "_pytest.logging.LoggingPlugin.pytest_collection",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_collection(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"collection\")\n\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 491,
            "start_column": 16499,
            "end_line": 4,
            "end_column": 16920,
            "start_byte": 16499,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin._runtest_for": {
            "name": "_pytest.logging.LoggingPlugin._runtest_for",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for(self, item, when):\n        with self._runtest_for_main(item, when):\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 503,
            "start_column": 16926,
            "end_line": 4,
            "end_column": 17232,
            "start_byte": 16926,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin._runtest_for_main": {
            "name": "_pytest.logging.LoggingPlugin._runtest_for_main",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@contextmanager\n    def _runtest_for_main(self, item, when):\n        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n        with catching_logs(\n            LogCaptureHandler(), formatter=self.formatter, level=self.log_level\n        ) as log_handler:\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(when)\n\n            if item is None:\n                yield  # run the test\n                return\n\n            if not hasattr(item, \"catch_log_handlers\"):\n                item.catch_log_handlers = {}\n            item.catch_log_handlers[when] = log_handler\n            item.catch_log_handler = log_handler\n            try:\n                yield  # run test\n            finally:\n                if when == \"teardown\":\n                    del item.catch_log_handler\n                    del item.catch_log_handlers\n\n            if self.print_logs:\n                # Add a captured log section to the report.\n                log = log_handler.stream.getvalue().strip()\n                item.add_report_section(when, \"log\", log)",
            "start_line": 512,
            "start_column": 17238,
            "end_line": 4,
            "end_column": 18305,
            "start_byte": 17238,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_setup": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        with self._runtest_for(item, \"setup\"):\n            yield",
            "start_line": 541,
            "start_column": 18311,
            "end_line": 4,
            "end_column": 18452,
            "start_byte": 18311,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_call": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_call",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_call(self, item):\n        with self._runtest_for(item, \"call\"):\n            yield",
            "start_line": 546,
            "start_column": 18458,
            "end_line": 4,
            "end_column": 18597,
            "start_byte": 18458,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_teardown": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        with self._runtest_for(item, \"teardown\"):\n            yield",
            "start_line": 551,
            "start_column": 18603,
            "end_line": 4,
            "end_column": 18750,
            "start_byte": 18603,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_logstart": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logstart(self):\n        if self.log_cli_handler:\n            self.log_cli_handler.reset()\n        with self._runtest_for(None, \"start\"):\n            yield",
            "start_line": 556,
            "start_column": 18756,
            "end_line": 4,
            "end_column": 18968,
            "start_byte": 18756,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_logfinish": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logfinish(self):\n        with self._runtest_for(None, \"finish\"):\n            yield",
            "start_line": 563,
            "start_column": 18974,
            "end_line": 4,
            "end_column": 19114,
            "start_byte": 18974,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtest_logreport": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_logreport(self):\n        with self._runtest_for(None, \"logreport\"):\n            yield",
            "start_line": 568,
            "start_column": 19120,
            "end_line": 4,
            "end_column": 19263,
            "start_byte": 19120,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_sessionfinish": {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionfinish",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionfinish(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionfinish\")\n            if self.log_file_handler is not None:\n                try:\n                    with catching_logs(\n                        self.log_file_handler, level=self.log_file_level\n                    ):\n                        yield\n                finally:\n                    # Close the FileHandler explicitly.\n                    # (logging.shutdown might have lost the weakref?!)\n                    self.log_file_handler.close()\n            else:\n                yield",
            "start_line": 573,
            "start_column": 19269,
            "end_line": 4,
            "end_column": 19972,
            "start_byte": 19269,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_sessionstart": {
            "name": "_pytest.logging.LoggingPlugin.pytest_sessionstart",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True, tryfirst=True)\n    def pytest_sessionstart(self):\n        with self.live_logs_context():\n            if self.log_cli_handler:\n                self.log_cli_handler.set_when(\"sessionstart\")\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield\n            else:\n                yield",
            "start_line": 591,
            "start_column": 19978,
            "end_line": 4,
            "end_column": 20402,
            "start_byte": 19978,
            "end_byte": 4
          },
          "_pytest.logging.LoggingPlugin.pytest_runtestloop": {
            "name": "_pytest.logging.LoggingPlugin.pytest_runtestloop",
            "file_path": "src/_pytest/logging.py",
            "file_content": "@pytest.hookimpl(hookwrapper=True)\n    def pytest_runtestloop(self, session):\n        \"\"\"Runs all collected test items.\"\"\"\n        with self.live_logs_context():\n            if self.log_file_handler is not None:\n                with catching_logs(self.log_file_handler, level=self.log_file_level):\n                    yield  # run all the tests\n            else:\n                yield  # run all the tests",
            "start_line": 602,
            "start_column": 20408,
            "end_line": 4,
            "end_column": 20813,
            "start_byte": 20408,
            "end_byte": 4
          },
          "_pytest.main.pytest_addoption": {
            "name": "_pytest.main.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "llow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n        logging.DEBUG: {\"purple\"},\n        logging.NOTSET: set(),\n    }\n    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-]?\\d*s)\")\n\n    def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-cli-date-format\",\n        dest=\"log_cli_date_format\",\n        default=None,\n        help=\"log date format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file\",\n        dest=\"log_file\",\n        default=None,\n        help=\"path to a file when logging will be written to.\",\n    )\n    add_option_ini(\n        \"--log-file-level\",\n        dest=\"log_file_level\",\n        default=None,\n        help=\"log file logging level.\",\n    )\n    add_option_ini(\n        \"--log-file-format\",\n        dest=\"log_file_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-file-date-format\",\n        dest=\"log_file_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n\n\n@contextmanager\ndef catch",
            "start_line": 35,
            "start_column": 775,
            "end_line": 0,
            "end_column": 5042,
            "start_byte": 775,
            "end_byte": 0
          },
          "_pytest.mark.pytest_addoption": {
            "name": "_pytest.mark.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(opti",
            "start_line": 39,
            "start_column": 1365,
            "end_line": 0,
            "end_column": 2919,
            "start_byte": 1365,
            "end_byte": 0
          },
          "_pytest.pastebin.pytest_addoption": {
            "name": "_pytest.pastebin.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "port pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Color",
            "start_line": 13,
            "start_column": 240,
            "end_line": 0,
            "end_column": 568,
            "start_byte": 240,
            "end_byte": 0
          },
          "_pytest.pytester.pytest_addoption": {
            "name": "_pytest.pytester.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "def __init__(self, terminalwriter, *args, **kwargs):\n        super(ColoredLevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n            formatted_levelname = levelname_fmt % {\n                \"level",
            "start_line": 39,
            "start_column": 994,
            "end_line": 0,
            "end_column": 1605,
            "start_byte": 994,
            "end_byte": 0
          },
          "_pytest.python.pytest_addoption": {
            "name": "_pytest.python.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "gs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the log",
            "start_line": 63,
            "start_column": 1905,
            "end_line": 0,
            "end_column": 3675,
            "start_byte": 1905,
            "end_byte": 0
          },
          "_pytest.runner.pytest_addoption": {
            "name": "_pytest.runner.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": ".Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.INFO: {\"green\"},\n",
            "start_line": 25,
            "start_column": 538,
            "end_line": 0,
            "end_column": 850,
            "start_byte": 538,
            "end_byte": 0
          },
          "_pytest.setuponly.pytest_addoption": {
            "name": "_pytest.setuponly.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "int_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(loggin",
            "start_line": 9,
            "start_column": 138,
            "end_line": 0,
            "end_column": 537,
            "start_byte": 138,
            "end_byte": 0
          },
          "_pytest.setupplan.pytest_addoption": {
            "name": "_pytest.setupplan.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT",
            "start_line": 7,
            "start_column": 126,
            "end_line": 0,
            "end_column": 403,
            "start_byte": 126,
            "end_byte": 0
          },
          "_pytest.skipping.pytest_addoption": {
            "name": "_pytest.skipping.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "om _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(logging.Formatter):\n    \"\"\"\n    Colorize the %(levelname)..s part of the log format passed to __init__.\n    \"\"\"\n\n    LOGLEVEL_COLOROPTS = {\n        logging.CRITICAL: {\"red\"},\n        logging.ERROR: {\"red\", \"bold\"},\n        logging.WARNING: {\"yellow\"},\n        logging.WARN: {\"yellow\"},\n        logging.",
            "start_line": 12,
            "start_column": 353,
            "end_line": 0,
            "end_column": 833,
            "start_byte": 353,
            "end_byte": 0
          },
          "_pytest.stepwise.pytest_addoption": {
            "name": "_pytest.stepwise.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "ontrol log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DAT",
            "start_line": 3,
            "start_column": 16,
            "end_line": 0,
            "end_column": 479,
            "start_byte": 16,
            "end_byte": 0
          },
          "_pytest.terminal.pytest_addoption": {
            "name": "_pytest.terminal.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "S.items():\n            formatted_levelname = levelname_fmt % {\n                \"levelname\": logging.getLevelName(level)\n            }\n\n            # add ANSI escape sequences around the formatted levelname\n            color_kwargs = {name: True for name in color_opts}\n            colorized_formatted_levelname = terminalwriter.markup(\n                formatted_levelname, **color_kwargs\n            )\n            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n                colorized_formatted_levelname, self._fmt\n            )\n\n    def format(self, record):\n        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n        if six.PY2:\n            self._fmt = fmt\n        else:\n            self._style._fmt = fmt\n        return super(ColoredLevelFormatter, self).format(record)\n\n\ndef get_option_ini(config, *names):\n    for name in names:\n        ret = config.getoption(name)  # 'default' arg won't work as expected\n        if ret is None:\n            ret = config.getini(name)\n        if ret:\n            return ret\n\n\ndef pytest_addoption(parser):\n    \"\"\"Add options to control log capturing.\"\"\"\n    group = parser.getgroup(\"logging\")\n\n    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n        parser.addini(\n            dest, default=default, type=type, help=\"default value for \" + option\n        )\n        group.addoption(option, dest=dest, **kwargs)\n\n    add_option_ini(\n        \"--no-print-logs\",\n        dest=\"log_print\",\n        action=\"store_const\",\n        const=False,\n        default=True,\n        type=\"bool\",\n        help=\"disable printing caught logs on failed tests.\",\n    )\n    add_option_ini(\n        \"--log-level\",\n        dest=\"log_level\",\n        default=None,\n        help=\"logging level used by the logging module\",\n    )\n    add_option_ini(\n        \"--log-format\",\n        dest=\"log_format\",\n        default=DEFAULT_LOG_FORMAT,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_ini(\n        \"--log-date-format\",\n        dest=\"log_date_format\",\n        default=DEFAULT_LOG_DATE_FORMAT,\n        help=\"log date format as used by the logging module.\",\n    )\n    parser.addini(\n        \"log_cli\",\n        default=False,\n        type=\"bool\",\n        help='enable log display during test run (also known as \"live logging\").',\n    )\n    add_option_ini(\n        \"--log-cli-level\", dest=\"log_cli_level\", default=None, help=\"cli logging level.\"\n    )\n    add_option_ini(\n        \"--log-cli-format\",\n        dest=\"log_cli_format\",\n        default=None,\n        help=\"log format as used by the logging module.\",\n    )\n    add_option_",
            "start_line": 57,
            "start_column": 1520,
            "end_line": 0,
            "end_column": 4162,
            "start_byte": 1520,
            "end_byte": 0
          },
          "_pytest.warnings.pytest_addoption": {
            "name": "_pytest.warnings.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "LevelFormatter, self).__init__(*args, **kwargs)\n        if six.PY2:\n            self._original_fmt = self._fmt\n        else:\n            self._original_fmt = self._style._fmt\n        self._level_to_fmt_mapping = {}\n\n        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n        if not levelname_fmt_match:\n            return\n        levelname_fmt = levelname_fmt_match.group()\n\n        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():",
            "start_line": 38,
            "start_column": 1068,
            "end_line": 0,
            "end_column": 1530,
            "start_byte": 1068,
            "end_byte": 0
          },
          "_pytest.resultlog.pytest_addoption": {
            "name": "_pytest.resultlog.pytest_addoption",
            "file_path": "src/_pytest/logging.py",
            "file_content": "mport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n\n\nclass ColoredLevelFormatter(lo",
            "start_line": 12,
            "start_column": 217,
            "end_line": 0,
            "end_column": 533,
            "start_byte": 217,
            "end_byte": 0
          },
          "_pytest.logging.DEFAULT_LOG_FORMAT": {
            "name": "_pytest.logging.DEFAULT_LOG_FORMAT",
            "file_path": "src/_pytest/logging.py",
            "file_content": "DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
            "start_line": 17,
            "start_column": 385,
            "end_line": 0,
            "end_column": 463,
            "start_byte": 385,
            "end_byte": 0
          }
        }
      }
    }
  ]
}