{
  "total_cost": 0,
  "task_id": "pytest-dev__pytest-8365",
  "model": "gpt-4o-2024-08-06",
  "spans": [
    {
      "name": "KeywordExtract",
      "metadata": {
        "start": "2024-08-19T13:35:04.752781",
        "usage": "1355.9658527374268 ms"
      },
      "request": {
        "repo_tokens": [
          "summary_passes",
          "Cache",
          "summary_failures",
          "visit_Name",
          "fixturenames",
          "push_format_context",
          "extract_suffixes",
          "extraline",
          "processoption",
          "fnmatch_lines",
          "reprfileloc",
          "_fixturemanager",
          "LogCaptureHandler",
          "append_collect_error",
          "_read_pyc",
          "getpluginversioninfo",
          "typename",
          "STRICT_OPTION",
          "cacheprovider",
          "summary_errors",
          "_plugin_nameversions",
          "ids",
          "append_collect_skipped",
          "exit",
          "traceback",
          "_consider_importhook",
          "_validate_args",
          "delattr",
          "filter_traceback_for_conftest_import_failure",
          "CallInfo",
          "write_fspath_result",
          "CLOSE_STDIN",
          "cwd_relative_nodeid",
          "mkdir",
          "getpathnode",
          "obj",
          "_parse_ini_config",
          "pytest_warning_captured",
          "_import_plugin_specs",
          "plugins",
          "_given_basetemp",
          "addSkip",
          "add_global_property",
          "store_mark",
          "OutcomeException",
          "parseconfig",
          "_format_args",
          "_ensure_basetemp",
          "_surrounding_parens_on_own_lines",
          "runpytest",
          "builtin_plugins",
          "__lt__",
          "DOCTEST_REPORT_CHOICE_NDIFF",
          "_getnextfixturedef",
          "_get_allow_unicode_flag",
          "check_interactive_exception",
          "id",
          "ARGUMENT_PERCENT_DEFAULT",
          "reprtraceback",
          "getitems",
          "pastebin",
          "capsys",
          "evaluate_skip_marks",
          "NFPlugin",
          "approx",
          "store",
          "deselect_by_keyword",
          "_early_rewrite_bailout",
          "_get_increasing_order",
          "_FixtureValue",
          "safeformat",
          "_determine_show_progress_info",
          "pytest_sessionstart",
          "writeorg",
          "_translate_non_printable",
          "rootpath",
          "cleanup_numbered_dir",
          "is_rewrite_disabled",
          "_no_match_line",
          "_get_plugin_specs_as_list",
          "_rewrite_test",
          "_assertion_supported",
          "consider_module",
          "Failed",
          "_get_raw_skip_reason",
          "V",
          "_ensure_supporting_files",
          "pathlib",
          "terminal",
          "PytestPluginManager",
          "buffer",
          "pytest_runtest_call",
          "TEST_OUTCOME",
          "suspend_global_capture",
          "SysCaptureBinary",
          "prepend",
          "get_lines_after",
          "pytest_internalerror",
          "pytestPDB",
          "runtest",
          "getrawcode",
          "__str__",
          "Exit",
          "getlocation",
          "UsageError",
          "SetupState",
          "RE_IMPORT_ERROR_NAME",
          "match",
          "Xfail",
          "write_ensure_prefix",
          "from_parent",
          "_check_scope",
          "pytester",
          "_inject_setup_method_fixture",
          "PytestUnraisableExceptionWarning",
          "_is_capturing",
          "Session",
          "inipath",
          "_write_pyc_fp",
          "activate_fixture",
          "stream",
          "setenv",
          "_F",
          "IGNORE_PAM",
          "_esctable",
          "pytest_report_collectionfinish",
          "classnamefilter",
          "args",
          "validate_basetemp",
          "reason",
          "assign",
          "get_plugin_manager",
          "MultipleDoctestFailures",
          "showlongtestinfo",
          "ReprLocals",
          "get_location",
          "_bestrelpath_cache",
          "expr",
          "NOTSET",
          "resolve_package_path",
          "_ET",
          "excinfo",
          "_ensure_relative_to_basetemp",
          "UnitTestCase",
          "fnmatch_lines_random",
          "LsofFdLeakChecker",
          "CallSpec2",
          "_iter_rewritable_modules",
          "raises",
          "_write_progress_information_filling_space",
          "addFailure",
          "cut",
          "readlines",
          "records",
          "pytest_assertrepr_compare",
          "getcrashentry",
          "is_async_function",
          "pytest_enter_pdb",
          "collect_one_node",
          "Module",
          "consider_conftest",
          "compile",
          "_try_repr_or_str",
          "reprcrash",
          "_config_for_test",
          "notset",
          "runpython_c",
          "_CACHE_PREFIX_VALUES",
          "pytest_pycollect_makeitem",
          "from_item",
          "frame",
          "getargs",
          "pytest_collectstart",
          "_checkversion",
          "set_when",
          "FDCapture",
          "_force_symlink",
          "countoutcomes",
          "scope",
          "CaptureIO",
          "__test__",
          "_LiveLoggingStreamHandler",
          "xfailed_key",
          "_init_runner_class",
          "LFPluginCollWrapper",
          "ApproxBase",
          "_reprcompare",
          "pytest_warning_recorded",
          "_validate_usepdb_cls",
          "get_stderr_fileno",
          "_validate_config_options",
          "pytest_collection_modifyitems",
          "DEFAULT_ABSOLUTE_TOLERANCE",
          "_is_last_item",
          "getfixturevalue",
          "_make_xunit_fixture",
          "isdatacls",
          "_get_main_color",
          "ExceptionRepr",
          "_getconftestmodules",
          "nofuncargs",
          "re_match_lines_random",
          "_matches_prefix_or_glob_option",
          "get_common_ancestor",
          "pop_format_context",
          "_color_for_type",
          "scope2index",
          "pytest_report_teststatus",
          "ReprFailDoctest",
          "PytestCollectionWarning",
          "_write_entry_lines",
          "NodeMeta",
          "search_pypath",
          "_collectfile",
          "_dump_lines",
          "fix_cache_order",
          "CollectErrorRepr",
          "_for_parametrize",
          "_try_load_conftest",
          "SysModulesSnapshot",
          "fault_handler_stderr_key",
          "SubRequest",
          "_report_to_json",
          "pluralize",
          "HelpAction",
          "type",
          "pytest_fixture_post_finalizer",
          "python",
          "stop_global_capturing",
          "ImportPathMismatchError",
          "build_summary_stats_line",
          "visit_Starred",
          "reports",
          "_IGNORED_WINERRORS",
          "extract_from",
          "Expression",
          "getreports",
          "mktemp",
          "initialnames",
          "fileno",
          "families",
          "_format_assertmsg",
          "DEFAULT_RELATIVE_TOLERANCE",
          "isdict",
          "LogCaptureFixture",
          "fail",
          "_warn_already_imported",
          "context",
          "explanation_param",
          "mkpydir",
          "from_function",
          "AssertionRewritingHook",
          "getoption",
          "from_call",
          "MoreQuietAction",
          "find_prefixed",
          "_PytestWrapper",
          "IDENT",
          "listextrakeywords",
          "getstatement",
          "template",
          "_AnyPurePath",
          "get_records",
          "maybe_delete_a_numbered_dir",
          "_call_assertion_pass",
          "_getscopeitem",
          "popen",
          "index",
          "pytest_collect_file",
          "conftest_options",
          "getfixtureclosure",
          "evaluate_xfail_marks",
          "readline",
          "Interrupted",
          "_has_param_ids",
          "_color_for_type_default",
          "TracebackEntry",
          "lines",
          "pytest_runtest_protocol",
          "record_tuples",
          "_assert_state",
          "summary_warnings",
          "_seen",
          "write_captured_output",
          "location",
          "_R",
          "_cachedir",
          "_resolve_arg_value_types",
          "done",
          "post_mortem",
          "pytest_deselected",
          "_NodeType",
          "UNITTEST_SKIP_DURING_COLLECTION",
          "__version__",
          "_approx_scalar",
          "NodeKeywords",
          "__setitem__",
          "skip",
          "_add_simple",
          "_is_marked_for_rewrite",
          "for_later",
          "_update_current_test_var",
          "record_xml_attribute",
          "NotSetType",
          "SysCapture",
          "resolve_from_str",
          "PytestAssertRewriteWarning",
          "print_teardown_sections",
          "name2pseudofixturedef_key",
          "append_error",
          "_truncate_explanation",
          "_folded_skips",
          "statement",
          "USAGE_ERROR",
          "Skip",
          "start_capturing",
          "list",
          "_report_kwargs_from_json",
          "pytest_plugin_registered",
          "line",
          "helpconfig",
          "TResult",
          "re_match_lines",
          "_ALLOW_MARKERS",
          "_write_content",
          "fault_handler_originally_enabled_key",
          "close",
          "PytestConfigWarning",
          "format",
          "_do_configure",
          "get_open_files",
          "call_runtest_hook",
          "node_reporter",
          "pytest_generate_tests",
          "compat",
          "_getentrysource",
          "doctest",
          "rex_outcome",
          "_tmppath_factory",
          "Function",
          "get_parametrized_fixture_keys",
          "tmpdir_factory",
          "exec_module",
          "PyobjMixin",
          "ReprExceptionInfo",
          "_getcrashline",
          "determine_setup",
          "caplog",
          "UNARY_MAP",
          "visit_Assert",
          "pytest_make_collect_report",
          "pytest_keyboard_interrupt",
          "patchsysdict",
          "syspathinsert",
          "scopes",
          "get_user",
          "parse_setoption",
          "BaseReport",
          "warning_record_to_str",
          "_getvaluepath",
          "_main",
          "simple",
          "File",
          "CwdSnapshot",
          "visit_BinOp",
          "HookRecorder",
          "LineMatcher",
          "pytest_collection",
          "console_main",
          "pytest_runtestloop",
          "_show_fixtures_per_test",
          "repr_instance",
          "apply_warning_filters",
          "show_test_item",
          "get_source",
          "getsource",
          "parse_known_and_unknown_args",
          "function",
          "_get_runner",
          "cleanup_candidates",
          "makefile",
          "setitem",
          "invocation_dir",
          "ApproxScalar",
          "start",
          "_handle_teardown_sections",
          "capture",
          "add_funcarg_pseudo_fixture_def",
          "importlib",
          "_get_verbose_word",
          "_create_formatter",
          "set_session",
          "get_lock_path",
          "STEPWISE_CACHE_DIR",
          "eval",
          "_version",
          "_start",
          "_typ_map",
          "_ensure_unconfigure",
          "__version_tuple__",
          "chdir",
          "_update_message",
          "_node_location_to_relpath",
          "runner",
          "readouterr",
          "_postmortem_traceback",
          "threadexception",
          "node",
          "_initini",
          "teardown_exact",
          "get_default_arg_names",
          "format_session_duration",
          "junitxml",
          "cls",
          "xml_key",
          "repr_args",
          "spawn",
          "ReprEntry",
          "Instance",
          "__dir__",
          "ReprEntryNative",
          "keywords",
          "STRING_TYPES",
          "_report_unserialization_failure",
          "_outrep_summary",
          "dir",
          "_recursive_debug",
          "module",
          "ReprTraceback",
          "NOT",
          "source",
          "_check_if_assertion_pass_impl",
          "resolve_fixture_function",
          "_get_teardown_reports",
          "reprlocals",
          "pytest_report_from_serializable",
          "pop_outerr_to_orig",
          "_log",
          "_showfixtures_main",
          "Class",
          "async_warn_and_skip",
          "reject",
          "wrap_function_to_error_out_if_called_directly",
          "FILLFUNCARGS",
          "DEFAULT_MAX_LINES",
          "LEVELNAME_FMT_REGEX",
          "consider_preparse",
          "to_xml",
          "_pytest",
          "PytestExperimentalApiWarning",
          "__call__",
          "FSCOLLECTOR_GETHOOKPROXY_ISINITPATH",
          "handler",
          "_assertion_pass",
          "_truncate_recursive_traceback",
          "_width_of_current_line",
          "ensure_deletable",
          "applymarker",
          "_find_spec",
          "_PLUGGY_DIR",
          "_pyfuncitem",
          "USAGE_MSG",
          "python_api",
          "_compare_eq_verbose",
          "_import_pdb_cls",
          "TempdirFactory",
          "formatrepr",
          "assert_contains",
          "XFailed",
          "summary_stats",
          "head_line",
          "idmaker",
          "_inject_setup_class_fixture",
          "set_repr_style",
          "_ANSI_ESCAPE_SEQ",
          "_getindent",
          "iter_markers_with_node",
          "display",
          "isnamedtuple",
          "_replace",
          "EOF",
          "Node",
          "_printcollecteditems",
          "pytest_runtest_logstart",
          "_get_unknown_ini_keys",
          "add_property",
          "MarkDecorator",
          "maybe_wrap_pytest_function_for_tracing",
          "showlocals",
          "set_fixture",
          "_sys_snapshot",
          "register_assert_rewrite",
          "warning_types",
          "faulthandler",
          "_get_assertion_exprs",
          "directory_arg",
          "Package",
          "consider_env",
          "CHECKER_CLASS",
          "get_fslocation_from_item",
          "_strtobool",
          "rewrite",
          "showheader",
          "_get_override_ini_value",
          "__repr__",
          "getini",
          "_inject_setup_function_fixture",
          "helper",
          "unset_fixture",
          "istestfunction",
          "deactivate_fixture",
          "parse",
          "bestrelpath",
          "_running_on_ci",
          "_basetemp",
          "FastFilesCompleter",
          "showversion",
          "gethookproxy",
          "indent",
          "__getitem__",
          "get_empty_parameterset_mark",
          "EncodedFile",
          "outcome",
          "ihook",
          "prune_dependency_tree",
          "_importtestmodule",
          "no_header",
          "_get_checker",
          "_match_lines_random",
          "get_optionflags",
          "LogXML",
          "Skipped",
          "_set_main_color",
          "_compare_eq_set",
          "_is_skipped",
          "Pytester",
          "_should_repr_global_name",
          "pytest_exception_interact",
          "TestReport",
          "_init_pdb",
          "MultiCapture",
          "yield_fixture",
          "_resolve_arg_ids",
          "kwargs",
          "nodeid",
          "TestCaseFunction",
          "get_exconly",
          "get_last_failed_paths",
          "_preparse",
          "_mark_plugins_for_rewrite",
          "TokenType",
          "UnformattedWarning",
          "visit_Compare",
          "getfslineno",
          "reorder_items",
          "message",
          "__init__",
          "visit_UnaryOp",
          "_is_numpy_array",
          "MINUS_K_COLON",
          "normalize_mark_list",
          "CFG_PYTEST_SECTION",
          "when",
          "_yield_comparisons",
          "isatty",
          "catch_warnings_for_item",
          "OK",
          "params",
          "_check_type",
          "ApproxMapping",
          "Source",
          "unraisable_exception_runtest_hook",
          "pytest_addoption",
          "parse_args",
          "pytest",
          "listchain",
          "get",
          "NoCapture",
          "_prepare_content",
          "YIELD_FIXTURE",
          "timing",
          "_validate_plugins",
          "__all__",
          "listnames",
          "_finalize",
          "duration",
          "PYC_TAIL",
          "append",
          "hasopt",
          "getstatementrange_ast",
          "assert_contains_lines",
          "IGNORED_ATTRIBUTES",
          "fill_unfilled",
          "_set_opt_strings",
          "is_started",
          "pytest_pycollect_makemodule",
          "_genfunctions",
          "_format",
          "Config",
          "_readline_workaround",
          "issue_config_time_warning",
          "from_current",
          "bin_xml_escape",
          "tmp_path_factory",
          "clear_cache",
          "_getpytestargs",
          "get_closest_marker",
          "_warn_or_fail_if_strict",
          "NO_TESTS_COLLECTED",
          "longrepr",
          "REPORT_COLLECTING_RESOLUTION",
          "__delitem__",
          "get_real_func",
          "SysPathsSnapshot",
          "_is_mocked",
          "try_makedirs",
          "T",
          "funcargs",
          "get_log_level_for_setting",
          "RaisesContext",
          "_setupstate",
          "matchreport",
          "set_location",
          "essential_plugins",
          "parsefactories",
          "_should_rewrite",
          "ImportMode",
          "prog",
          "update_testcase_duration",
          "thread_exception_runtest_hook",
          "DEFAULT_LOG_DATE_FORMAT",
          "linecomp",
          "pytest_collectreport",
          "mark_rewrite",
          "unittest",
          "FILE_OR_DIR",
          "_pformat_dispatch",
          "_getparser",
          "_call_with_optional_argument",
          "generic_visit",
          "_get_auto_indent",
          "ParseError",
          "_getfailureheadline",
          "skipped",
          "reprentries",
          "flush",
          "CaptureResult",
          "capfdbinary",
          "abspath",
          "register_cleanup_lock_removal",
          "find_spec",
          "EMPTY_BUFFER",
          "rm_rf",
          "LPAREN",
          "DOCTEST_REPORT_CHOICES",
          "addSuccess",
          "old_mark_config_key",
          "istext",
          "safe_getattr",
          "get_scope_node",
          "addError",
          "AssertionState",
          "raiseerror",
          "pytester_assertions",
          "assertoutcome",
          "pytest_pyfunc_call",
          "ishidden",
          "_show_fixture_action",
          "getmodulecol",
          "_get_reports_to_display",
          "getreportopt",
          "_ignore_error",
          "DummyRewriteHook",
          "_check_all_skipped",
          "cacheshow",
          "Exception",
          "pytest_configure",
          "count",
          "copy_example",
          "_check_initialpaths_for_relpath",
          "_recurse",
          "WarningsRecorder",
          "xfail",
          "_getini",
          "_runtest_for",
          "symlink_or_skip",
          "FakeCollectModule",
          "logging",
          "_highlight",
          "warn",
          "run",
          "hookspec",
          "Item",
          "report_collect",
          "spawn_pytest",
          "messages",
          "_FixtureCachedResult",
          "resolve_collection_argument",
          "name2fixturedefs",
          "fslocation",
          "_state",
          "ExitCode",
          "astcache",
          "test_tmproot",
          "_FixtureFunc",
          "addoption",
          "reportinfo",
          "finish_recording",
          "repr",
          "ReprTracebackNative",
          "inline_runsource",
          "fromdictargs",
          "_get_direct_parametrize_args",
          "cmdline",
          "annotated_getattr",
          "get_unpacked_marks",
          "runpytest_inprocess",
          "capstdout",
          "_resume",
          "getfixturedefs",
          "__array_ufunc__",
          "setupplan",
          "strip",
          "makepyprojecttoml",
          "start_global_capturing",
          "pytest_leave_pdb",
          "getparent",
          "_idval",
          "unraisableexception",
          "catch_threading_exception",
          "_with_exception",
          "Traceback",
          "issequence",
          "LFPluginCollSkipfiles",
          "safe_isclass",
          "deselect_by_mark",
          "get_scope_package",
          "ensure_reset_dir",
          "TerminalWriter",
          "MarkGenerator",
          "pastebinfile_key",
          "ApproxSequencelike",
          "ExceptionChainRepr",
          "exconly",
          "_assert_expr_to_lineno",
          "pytest_terminal_summary",
          "wrap_session",
          "LOGLEVEL_COLOROPTS",
          "delenv",
          "finish",
          "_in_venv",
          "collect_by_name",
          "repr_traceback",
          "getplugin",
          "showfixtures",
          "config",
          "getinicfg",
          "_get_pdb_wrapper_class",
          "add_cleanup",
          "assert_outcomes",
          "_colorama_workaround",
          "cached_result",
          "builtin",
          "warns",
          "addExpectedFailure",
          "_truncate_by_char_count",
          "record_property",
          "TimeoutExpired",
          "__enter__",
          "_idvalset",
          "_format_repr_exception",
          "newinstance",
          "firstlineno",
          "getparam",
          "_PluggyPlugin",
          "PrintHelp",
          "_makepath",
          "rewrite_asserts",
          "fillfixtures",
          "commonpath",
          "INTERRUPTED",
          "visit_Call",
          "DoctestTextfile",
          "no_re_match_line",
          "showfspath",
          "WARNING_CAPTURED_HOOK",
          "recursionindex",
          "_get_number_flag",
          "_CACHE_PREFIX_DIRS",
          "consider_pluginarg",
          "inifile",
          "_parse_parametrize_parameters",
          "make_numbered_dir",
          "deprecated_call",
          "filter",
          "_saferepr",
          "_inject_setup_teardown_fixtures",
          "version_tuple",
          "toterminal",
          "global_and_fixture_disabled",
          "repr_excinfo",
          "execute",
          "DEPRECATED_EXTERNAL_PLUGINS",
          "create_module",
          "evaluate_condition",
          "getfirstlinesource",
          "DEFAULT_MAX_CHARS",
          "inline_genitems",
          "_WithException",
          "DontReadFromInput",
          "write",
          "BINOP_MAP",
          "_fill_fixtures_impl",
          "addsection",
          "pytest_unconfigure",
          "_Key",
          "FixtureRequest",
          "findsource",
          "runpytest_subprocess",
          "delitem",
          "param",
          "_getlines",
          "getnode",
          "_PY_DIR",
          "with_args",
          "truncate_locals",
          "make_hook_recorder",
          "_factorytraceback",
          "Store",
          "PdbInvoke",
          "_rget_with_confmod",
          "ensure_extended_length_path",
          "RunResult",
          "FixtureLookupError",
          "DOCTEST_REPORT_CHOICE_CDIFF",
          "TeeCaptureIO",
          "visit_Attribute",
          "_bytes_to_ascii",
          "markname",
          "_getautousenames",
          "InvocationParams",
          "skipping",
          "is_globally_capturing",
          "_non_printable_ascii_translate_table",
          "get_timeout_config_value",
          "PYTEST_TAG",
          "isnosetest",
          "no_summary",
          "find_suffixes",
          "copy",
          "pytest_addhooks",
          "_FileHandler",
          "make_properties_node",
          "CaptureFixture",
          "_py36_windowsconsoleio_workaround",
          "ARGUMENT_TYPE_STR_CHOICE",
          "_code",
          "visit",
          "create_cleanup_lock",
          "no_fnmatch_line",
          "write_line",
          "pytest_cmdline_main",
          "LOCK_TIMEOUT",
          "get_extended_length_path_str",
          "_result",
          "_compare_eq_cls",
          "KNOWN_TYPES",
          "sections",
          "assertstate_key",
          "repr_traceback_entry",
          "_write_report_lines_from_hooks",
          "isinitpath",
          "_addfinalizer",
          "fspath",
          "_fail",
          "set_level",
          "PytestArg",
          "collect",
          "_validate_if_using_arg_names",
          "is_generator",
          "_names",
          "PyCollector",
          "ReprFileLocation",
          "filename_arg",
          "evaluate",
          "SEP",
          "getfuncargnames",
          "call_optional",
          "get_statement_startend2",
          "COLLECT_FAKEMODULE_ATTRIBUTES",
          "get_option_ini",
          "is_capturing",
          "PRIVATE",
          "from_item_and_call",
          "_striptext",
          "addUnexpectedSuccess",
          "resolve",
          "pytest_report_to_serializable",
          "and_expr",
          "wrap_pytest_function_for_tracing",
          "f_globals",
          "pytest_runtest_setup",
          "isset",
          "_fillfuncargs",
          "rex_session_duration",
          "getrepr",
          "PytestUnhandledCoroutineWarning",
          "version",
          "reprfuncargs",
          "_getobj",
          "FixtureManager",
          "on_rm_rf_error",
          "PytestCacheWarning",
          "_compare_eq_sequence",
          "_NodeReporter",
          "finalize",
          "runpython",
          "setuponly",
          "deprecated",
          "_init_checker_class",
          "resume_global_capture",
          "REGEX_TYPE",
          "ensure_newline",
          "__take_sys_modules_snapshot",
          "import_plugin",
          "getcalls",
          "makeini",
          "setup",
          "load_config_dict_from_file",
          "strict",
          "code",
          "getfixturemarker",
          "_argcomplete",
          "pytest_runtest_logfinish",
          "tmp_path",
          "addinivalue_line",
          "parse_summary_nouns",
          "addfinalizer",
          "_find_parametrized_scope",
          "_ellipsize",
          "MARK_GEN",
          "_disable_output_capturing_for_darwin",
          "encoding",
          "setmulti2",
          "__hash__",
          "StoreKey",
          "create_terminal_writer",
          "_iter_all_modules",
          "getvalueorskip",
          "Token",
          "TYPE_CHECKING",
          "filter_traceback",
          "getfailedcollections",
          "Frame",
          "get_cache_dir",
          "for_config",
          "__attrs_post_init__",
          "resume_fixture",
          "_wrapped_pdb_cls",
          "DEFAULT_LOG_FORMAT",
          "parametrize",
          "ReprFuncArgs",
          "_compare_eq_dict",
          "teardown",
          "__ne__",
          "listoutcomes",
          "_get_report_choice",
          "ParsedCall",
          "_locationline",
          "passed",
          "MonkeyPatch",
          "register",
          "_EmptyClass",
          "exitstatus",
          "FuncFixtureInfo",
          "AssertionRewriter",
          "tbfilter",
          "install_importhook",
          "parseconfigure",
          "_addexcinfo",
          "__array_priority__",
          "saferepr",
          "getmodpath",
          "_args_converter",
          "stopTest",
          "read",
          "__next__",
          "showhelp",
          "_E",
          "caplog_handler_key",
          "runitem",
          "pytest_ignore_collect",
          "gethookrecorder",
          "verbosity",
          "wcswidth",
          "longreprtext",
          "mode",
          "append_pass",
          "perform_collect",
          "FixtureFunctionMarker",
          "_notin_text",
          "_split_lines",
          "__contains__",
          "_prepareconfig",
          "try_cleanup",
          "mangle_test_address",
          "_as_numpy_array",
          "_format_boolop",
          "PytestDeprecationWarning",
          "not_expr",
          "pytest_cmdline_parse",
          "_assert_start_repr",
          "monkeypatch",
          "_format_action_invocation",
          "set_trace",
          "argnames",
          "_log_text",
          "CollectReport",
          "_params_converter",
          "WarningReport",
          "getimfunc",
          "add_stats",
          "FunctionDefinition",
          "_warn_about_missing_assertion",
          "genitems",
          "getworkerinfoline",
          "stop_capturing",
          "pytest_markeval_namespace",
          "_FixtureFunction",
          "reorder_items_atscope",
          "section",
          "autouse",
          "_excinfo",
          "_param_ids_from",
          "from_exc_info",
          "parseoutcomes",
          "_get_first_non_fixture_func",
          "relline",
          "pytest_sessionfinish",
          "Mark",
          "import_path",
          "_diff_text",
          "parse_num",
          "_should_truncate_item",
          "_eval_scope_callable",
          "main",
          "setdefault",
          "fail_marker",
          "read_global_capture",
          "FDCaptureBinary",
          "get_terminal_writer",
          "check_ispytest",
          "handleError",
          "get_sections",
          "hasplugin",
          "_processopt",
          "names_closure",
          "_parse_parametrize_args",
          "ApproxNumpy",
          "truncate_if_required",
          "expression",
          "_recursive_list_map",
          "style",
          "_get_pos",
          "_build_normal_summary_stats_line",
          "MatcherAdapter",
          "_hook",
          "write_sep",
          "repr_locals",
          "Markable",
          "notify_exception",
          "DOCTEST_REPORT_CHOICE_NONE",
          "recwarn",
          "path",
          "_get_continue_on_failure",
          "__eq__",
          "catch_unraisable_exception",
          "scopemismatch",
          "_W",
          "resume_capturing",
          "nextitem",
          "parse_warning_filter",
          "_traceback",
          "parts",
          "INTERNAL_ERROR",
          "add_report_section",
          "getcall",
          "set_log_path",
          "README_CONTENT",
          "OR",
          "fail_fixturefunc",
          "pop",
          "_validate_ids",
          "lineno",
          "item_capture",
          "_teardown_yield_fixture",
          "isiterable",
          "Testdir",
          "names",
          "_get_active_fixturedef",
          "__len__",
          "call_fixture_func",
          "_get_multicapture",
          "addini",
          "pytest_report_header",
          "DoctestModule",
          "name",
          "getgroup",
          "_get_allow_bytes_flag",
          "make_numbered_dir_with_cleanup",
          "mark",
          "startTest",
          "CaptureManager",
          "suspend_fixture",
          "_HandlerType",
          "RPAREN",
          "suspend_capturing",
          "get_data",
          "add_marker",
          "_format_lines",
          "rootdir",
          "_addoption",
          "popcall",
          "_warn_incompatibility_with_xunit2",
          "PYC_EXT",
          "tmpdir",
          "nose",
          "tb",
          "FixtureDef",
          "write_docstring",
          "istestclass",
          "session",
          "PdbTrace",
          "_check_non_top_pytest_plugins",
          "_makefile",
          "_io",
          "_compute_fixture_value",
          "_pluginmanager",
          "_build_collect_only_summary_stats_line",
          "_importconftest",
          "debugging",
          "PYTEST_COLLECT_MODULE",
          "DropShorterLongHelpFormatter",
          "append_failure",
          "importorskip",
          "testdir",
          "_create",
          "deindent",
          "pytest_collection_finish",
          "funcnamefilter",
          "markup",
          "pytest_load_initial_conftests",
          "undo",
          "SafeRepr",
          "pytest_cmdline_preparse",
          "_get_progress_information_message",
          "getstatementrange",
          "request",
          "repr_failure",
          "default_plugins",
          "_remove_ansi_escape_sequences",
          "from_config",
          "_schedule_finalizers",
          "setattr",
          "hasinit",
          "_getconftest_pathlist",
          "hookimpl",
          "nodes",
          "_initrequest",
          "assert_never",
          "FixtureLookupErrorRepr",
          "parse_hookimpl_opts",
          "_S",
          "flow_marker",
          "tracebackcutdir",
          "OptionGroup",
          "reset",
          "_testcase",
          "FSCollector",
          "LFPlugin",
          "pytest_assertion_pass",
          "MarkMatcher",
          "_repr_failure_py",
          "hasnew",
          "format_explanation",
          "_determine_main_color",
          "visit_BoolOp",
          "getitem",
          "cache_dir_from_config",
          "capstderr",
          "get_dirs_from_args",
          "_set_initial_conftests",
          "_split_explanation",
          "_suspend",
          "iter_markers",
          "pos",
          "cache_key",
          "_LiveLoggingNullHandler",
          "_get_fixturestack",
          "disabled",
          "chain",
          "_write_source",
          "capsysbinary",
          "syspath_prepend",
          "getfailures",
          "inline_run",
          "f_locals",
          "_report_keyboardinterrupt",
          "_compare_eq_any",
          "TerminalRepr",
          "path_matches_patterns",
          "PytestUnhandledThreadExceptionWarning",
          "snap",
          "_mk_tmp",
          "FormattedExcinfo",
          "record_testreport",
          "PseudoFixtureDef",
          "warnings",
          "matching_platform",
          "pytest_itemcollected",
          "stepwise",
          "record_testsuite_property",
          "TerminalReporter",
          "DOCTEST_REPORT_CHOICE_UDIFF",
          "ArgumentError",
          "call_and_report",
          "_addoption_instance",
          "_REPORTCHARS_DEFAULT",
          "freeze_support",
          "_config",
          "_get_line_with_reprcrash_message",
          "_inject_setup_module_fixture",
          "fnmatch_ex",
          "D",
          "variable",
          "get_real_method",
          "CollectError",
          "Code",
          "_to_json",
          "LoggingPlugin",
          "ColoredLevelFormatter",
          "lex",
          "Collector",
          "merge_family",
          "get_terminal_width",
          "scopenum_function",
          "suspend",
          "PercentStyleMultiline",
          "restore",
          "_opentestcase",
          "KeywordMatcher",
          "doctest_namespace",
          "sep",
          "append_skipped",
          "Scanner",
          "WarningsChecker",
          "StepwisePlugin",
          "_setup_fixtures",
          "pytest_runtest_makereport",
          "get_public_names",
          "get_config",
          "LineMatcher_fixture",
          "ParameterSet",
          "_warn_about_skipped_plugins",
          "IDENT_PREFIX",
          "DoctestItem",
          "locals",
          "caplog_records_key",
          "instance",
          "_log_cli_enabled",
          "catching_logs",
          "CACHEDIR_TAG_CONTENT",
          "fullwidth",
          "_get_flag_lookup",
          "ARGUMENT_TYPE_STR",
          "resume",
          "tolerance",
          "DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE",
          "__iter__",
          "__getattr__",
          "_enter_pdb",
          "__exit__",
          "co_equal",
          "Metafunc",
          "PytestUnknownMarkWarning",
          "set",
          "entrysep",
          "errisinstance",
          "_patch_unwrap_mock_aware",
          "accept",
          "_getreprcrash",
          "result",
          "pytest_runtest_logreport",
          "Parser",
          "istestfunc",
          "K",
          "outcomes",
          "iscoroutinefunction",
          "combined_with",
          "fixtures",
          "fullsource",
          "_from_json",
          "LineComp",
          "at_level",
          "__slots__",
          "assertrepr_compare",
          "pytest_plugins",
          "show_fixtures_per_test",
          "failed",
          "EMPTY_PARAMETERSET_OPTION",
          "_call_reprcompare",
          "absolutepath",
          "MyOptionParser",
          "TempPathFactory",
          "getbasetemp",
          "clear",
          "__module__",
          "should_do_markup",
          "_add_stats",
          "value",
          "error",
          "pytest_make_parametrize_id",
          "ApproxDecimal",
          "_ascii_escaped_by_config",
          "_prunetraceback",
          "ExceptionInfo",
          "emit",
          "RUNNER_CLASS",
          "pytest_fixture_setup",
          "_match_lines",
          "count_towards_summary",
          "isattrs",
          "MINUS_K_DASH",
          "Notset",
          "token",
          "maketxtfile",
          "wcwidth",
          "parse_known_args",
          "makeconftest",
          "derive_importpath",
          "str",
          "_PYTEST_DIR",
          "num_mock_patch_args",
          "stop",
          "category",
          "runtestprotocol",
          "pytestconfig",
          "_fillfixtures",
          "fixture",
          "check_testcase_implements_trial_reporter",
          "ascii_escaped",
          "add_attribute",
          "TESTS_FAILED",
          "_T",
          "getvalue",
          "_get_global_properties_node",
          "width_of_current_line",
          "FSHookProxy",
          "_is_setup_py",
          "_matchfactories",
          "freeze_includes",
          "own_mark_names",
          "create_new_paste",
          "text",
          "pytest_runtest_teardown",
          "AND",
          "parse_hookspec_opts",
          "PytestWarning",
          "_trace",
          "__missing__",
          "short_test_summary",
          "_ensure_immutable_ids",
          "ConftestImportFailure",
          "locate_config",
          "get_direct_param_fixture_func",
          "_saved",
          "Argument",
          "capfd",
          "makedir",
          "_param_ids_generated",
          "_non_numeric_type_error",
          "cache",
          "_ensure_removed_sysmodule",
          "_format_trimmed",
          "getfixtureinfo",
          "iterparentnodeids",
          "_IGNORED_ERRORS",
          "_check_record_param_type",
          "_in_suspended",
          "assertion",
          "AlwaysDispatchingPrettyPrinter",
          "attrs",
          "_is_doctest",
          "_is_started",
          "_compare_eq_iterable",
          "makepyfile"
        ]
      },
      "response": {
        "keywords": [
          "tmpdir",
          "tmpdir_factory",
          "tmp_path_factory",
          "get_user",
          "_given_basetemp",
          "_ensure_basetemp",
          "validate_basetemp",
          "_ensure_relative_to_basetemp",
          "mktemp"
        ]
      }
    },
    {
      "name": "FilesKeywordSearch",
      "metadata": {
        "start": "2024-08-19T13:35:06.108769",
        "usage": "200.87313652038574 ms"
      },
      "request": {
        "tokens": [
          "tmpdir",
          "tmpdir_factory",
          "tmp_path_factory",
          "get_user",
          "_given_basetemp",
          "_ensure_basetemp",
          "validate_basetemp",
          "_ensure_relative_to_basetemp",
          "mktemp"
        ]
      },
      "response": {
        "results": {
          "_given_basetemp": [
            "src/_pytest/tmpdir.py"
          ],
          "tmpdir": [
            "src/_pytest/pytester.py",
            "src/pytest/__init__.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/tmpdir.py"
          ],
          "_ensure_relative_to_basetemp": [
            "src/_pytest/tmpdir.py"
          ],
          "mktemp": [
            "src/_pytest/pytester.py",
            "src/_pytest/tmpdir.py"
          ],
          "get_user": [
            "src/_pytest/tmpdir.py"
          ],
          "tmpdir_factory": [
            "src/_pytest/tmpdir.py"
          ],
          "tmp_path_factory": [
            "src/_pytest/pytester.py",
            "src/_pytest/tmpdir.py"
          ],
          "validate_basetemp": [
            "src/_pytest/main.py"
          ],
          "_ensure_basetemp": [
            "src/_pytest/pytester.py"
          ]
        }
      }
    },
    {
      "name": "FilesFilter",
      "metadata": {
        "start": "2024-08-19T13:35:06.309685",
        "usage": "5000.593900680542 ms"
      },
      "request": {
        "keyword_search_results": {
          "_given_basetemp": [
            "src/_pytest/tmpdir.py"
          ],
          "tmpdir": [
            "src/_pytest/pytester.py",
            "src/pytest/__init__.py",
            "src/_pytest/config/__init__.py",
            "src/_pytest/tmpdir.py"
          ],
          "_ensure_relative_to_basetemp": [
            "src/_pytest/tmpdir.py"
          ],
          "mktemp": [
            "src/_pytest/pytester.py",
            "src/_pytest/tmpdir.py"
          ],
          "get_user": [
            "src/_pytest/tmpdir.py"
          ],
          "tmpdir_factory": [
            "src/_pytest/tmpdir.py"
          ],
          "tmp_path_factory": [
            "src/_pytest/pytester.py",
            "src/_pytest/tmpdir.py"
          ],
          "validate_basetemp": [
            "src/_pytest/main.py"
          ],
          "_ensure_basetemp": [
            "src/_pytest/pytester.py"
          ]
        }
      },
      "response": {
        "scratch_pad": "The issue is related to the creation of temporary directories when the username contains characters not allowed in directory names. The problem report specifically mentions the use of `tmpdir`, `tmpdir_factory`, and `tmp_path_factory`, which rely on the `getpass.getuser()` function.\n\nIn the keyword search results, the relevant keywords appear to be:\n\n1. **'tmpdir'** - This is directly mentioned in the issue report and is an integral part of the problem. The files related to this keyword would be highly relevant.\n2. **'tmpdir_factory'** - Another keyword directly from the issue report. Libraries related to the creation of temp directories would have references to it.\n3. **'get_user'** - Since the issue involves the `getpass.getuser()` function, searching for `get_user` might lead us to where user retrieval and processing is done.\n4. **'mktemp'** - The problem appears when trying to create a temporary directory, so files related to this function could be relevant.\n\nGiven the above analysis, the most relevant files based on these keywords would likely be `src/_pytest/tmpdir.py` and `src/_pytest/pytester.py` as they appear multiple times in relation to these keywords, indicating their centrality to the tmpdir functionality. \n\nAdditionally, since the issue involves testing configurations and the creation of temp directories, `src/pytest/__init__.py` might also contain relevant configurations or initializations. \n\nThus, the potentially relevant files sorted by perceived relevance are:",
        "file_paths": [
          "src/_pytest/tmpdir.py",
          "src/_pytest/pytester.py",
          "src/pytest/__init__.py"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:35:11.310298",
        "usage": "8457.289934158325 ms"
      },
      "request": {
        "file_path": "src/_pytest/tmpdir.py"
      },
      "response": {
        "scratch_pad": "1. Analyze User Instructions:\n\n1.1 The user is describing an issue where the `tmpdir` creation fails due to illegal characters in directory names derived from the username returned by `getpass.getuser()`. In this case, the username can include characters such as the backslash (`\\`) that are not valid in directory names.\n\n1.2 The user provided steps that involve logging into Windows via SSH where the username is returned with a domain, such as `contoso\\john_doe`, which leads to the failure.\n\n1.3 This issue is caused because `getpass.getuser()` returns a username with a domain when using certain configurations or environments, particularly in Windows, and such usernames can contain illegal characters for directory paths.\n\n1.4 The user's expectation is that pytest should correctly handle such usernames and avoid generating invalid directory paths. The issue arises when these usernames are used directly to create directories, which is not handled properly causing `FileNotFoundError`.\n\n1.6 Possible solutions could include sanitizing the username to remove or replace illegal characters before using it to create temporary directories.\n\n2. Make file evaluation:\n\n2.1 Analyzing the file `src/_pytest/tmpdir.py` related to the issue.\n\n2.2 The function `get_user()` is relevant here as it retrieves the username and is directly connected to the reported issue. This function uses `getpass.getuser()`\n\n2.3 The `TempPathFactory.getbasetemp()` method also handles the construction of the base temporary directory using the username retrieved from `get_user()`.\n\n2.4 Both `TempPathFactory` and `TempdirFactory` are integral to the temporary directory creation process and seem relevant.\n\n2.5 There may not be direct references to other files needed, but handling user input sanitization properly within these files is crucial.\n\n2.6 This file is likely the root cause since it contains the logic for directory creation using usernames and there are no external dependencies noted for this part of the code.\n\n3. Output Your Decision:\nBased on the analysis, `get_user()` and `TempPathFactory.getbasetemp()` are core to the root cause of this problem.",
        "relevant": true,
        "root_cause": true,
        "relevant_files": [],
        "relevant_symbols": [
          "get_user",
          "TempPathFactory.getbasetemp"
        ],
        "root_cause_symbols": [
          "get_user",
          "TempPathFactory.getbasetemp"
        ]
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:35:19.767601",
        "usage": "6122.294902801514 ms"
      },
      "request": {
        "file_path": "src/_pytest/pytester.py"
      },
      "response": {
        "scratch_pad": "1. Analyze User Instructions:\nThe issue described is that the creation of temporary directories with `tmpdir`, `tmpdir_factory`, and `tmp_path_factory` fails when the username returned by `getpass.getuser()` contains illegal characters for directory names. Specifically, usernames with backslashes like `contoso\\john_doe` are problematic because backslashes are not valid characters for file or directory names. This happens particularly during SSH sessions on Windows.\n\n2. Make file evaluation:\n- The file provided is `src/_pytest/pytester.py`. It is a large file consisting mainly of definitions related to pytest testing utilities.\n- Looking for the `tmpdir_factory`, `tmpdir`, and `tmp_path_factory` or relevant functions dealing with username directory creation or manipulation.\n- The file imports `make_numbered_dir` from `_pytest.pathlib`, which might relate to directory handling but does not directly deal with usernames or their validity.\n- `TempPathFactory` from `_pytest.tmpdir` is imported but not utilized in the file.\n- Searching for user-related utilities, there is nothing exceptionally evident in this file concerning `getpass.getuser()` or username processing for directories.\n\nConclusion:\n- The relevant issue described does not seem to be caused by the code in `src/_pytest/pytester.py` as there are no direct manipulations or references to handle usernames or illegal character filtering for temporary directory naming.",
        "relevant": false,
        "root_cause": false,
        "relevant_files": [
          "src/_pytest/tmpdir.py",
          "src/_pytest/pathlib.py",
          "src/_pytest/config.py"
        ],
        "relevant_symbols": [],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileEvaluate",
      "metadata": {
        "start": "2024-08-19T13:35:25.889926",
        "usage": "8625.032186508179 ms"
      },
      "request": {
        "file_path": "src/pytest/__init__.py"
      },
      "response": {
        "scratch_pad": "1. What issue is the user describing?\n- The issue is related to the creation of temporary directories when the username contains illegal characters for directory names, specifically when using pytest's tmpdir and tmpdir_factory features. The problem arises because getpass.getuser() is used to determine the basetemp directory, and it can return usernames with characters not allowed in directory names.\n\n2. Why does this happen?\n- This happens when logged in through an SSH connection in a Windows environment. The username returned by getpass.getuser() includes domain information (e.g., \"contoso\\\\john_doe\") which contains backslashes, an illegal character in Windows directory names, causing a FileNotFoundError.\n\n3. How was this issue caused?\n- This issue is caused by the concatenation of the invalid username into the path used for creating temporary directories. This path includes illegal characters which the file system does not support, leading to a directory not being found when an attempt is made to create or access it.\n\n4. User expectations and cause of issue?\n- Users expect temporary directory creation to work without errors even if the username has special characters. The root cause is the use of getpass.getuser() results directly in path formation without filtering or sanitizing illegal characters.\n\n5. Possible solutions?\n- A possible solution includes sanitizing the username to remove or replace illegal characters before incorporating them into the directory path.\n\n6. Evaluate the `src/pytest/__init__.py` file:\n- The file imports TempdirFactory and TempPathFactory from _pytest.tmpdir, which are related to creating temporary directories.\n- There are direct associations with tmpdir-related functionalities (TempdirFactory and TempPathFactory), though their actual implementation isn't shown in this file.\n- It's more likely that the real problem lies in the implementation within _pytest.tmpdir or potentially the logic that uses TempdirFactory or TempPathFactory.\n\n- Based on content analysis, the file primarily acts as an interface with imports and re-exports functionalities such as TempdirFactory and TempPathFactory rather than implementing them. The issue likely lies in where these implementations reside or where they are invoked with the faulty usernames from getpass.getuser().",
        "relevant": true,
        "root_cause": false,
        "relevant_files": [
          "src/pytest/tmpdir.py",
          "src/pytest/tempdir.py",
          "src/pytest/util.py"
        ],
        "relevant_symbols": [
          "TempdirFactory",
          "TempPathFactory"
        ],
        "root_cause_symbols": []
      }
    },
    {
      "name": "FileSymbolSearch",
      "metadata": {
        "start": "2024-08-19T13:35:34.514981",
        "usage": "112.46919631958008 ms"
      },
      "request": {
        "files": [
          {
            "file_path": "src/_pytest/tmpdir.py",
            "relevant_symbol_keys": [
              "get_user",
              "TempPathFactory.getbasetemp"
            ],
            "root_cause_symbol_keys": [
              "get_user",
              "TempPathFactory.getbasetemp"
            ]
          },
          {
            "file_path": "src/_pytest/pytester.py",
            "relevant_symbol_keys": [],
            "root_cause_symbol_keys": []
          },
          {
            "file_path": "src/pytest/__init__.py",
            "relevant_symbol_keys": [
              "TempdirFactory",
              "TempPathFactory"
            ],
            "root_cause_symbol_keys": []
          }
        ],
        "with_content": true
      },
      "response": {
        "related_symbols": [
          {
            "name": "_pytest.tmpdir.TempPathFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ytest.fixtures import _fillfuncargs\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import yield_fixture\nfrom _pytest.freeze_support import freeze_includes\nfrom _pytest.logging import LogCaptureFixture\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.python import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestExperimentalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"Metafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
            "start_line": 22,
            "start_column": 585,
            "end_line": 0,
            "end_column": 4297,
            "start_byte": 585,
            "end_byte": 0
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._given_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.freeze_support import freeze_includes\nfrom",
            "start_line": 30,
            "start_column": 802,
            "end_line": 4,
            "end_column": 848,
            "start_byte": 802,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._trace",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.logging import",
            "start_line": 31,
            "start_column": 853,
            "end_line": 4,
            "end_column": 871,
            "start_byte": 853,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "aptureFixture\nfrom _pytest.main import S",
            "start_line": 32,
            "start_column": 876,
            "end_line": 4,
            "end_column": 916,
            "start_byte": 876,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.p",
            "start_line": 34,
            "start_column": 922,
            "end_line": 4,
            "end_column": 1619,
            "start_byte": 922,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.from_config",
            "file_path": "src/pytest/__init__.py",
            "file_content": "import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_type",
            "start_line": 53,
            "start_column": 1625,
            "end_line": 4,
            "end_column": 2055,
            "start_byte": 1625,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._ensure_relative_to_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "rt PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestEx",
            "start_line": 71,
            "start_column": 2061,
            "end_line": 4,
            "end_column": 2357,
            "start_byte": 2061,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ntalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n",
            "start_line": 77,
            "start_column": 2363,
            "end_line": 4,
            "end_column": 3283,
            "start_byte": 2363,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "etafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
            "start_line": 101,
            "start_column": 3289,
            "end_line": 4,
            "end_column": 4297,
            "start_byte": 3289,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 127,
            "start_column": 4300,
            "end_line": 0,
            "end_column": 5168,
            "start_byte": 4300,
            "end_byte": 0
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory._tmppath_factory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 133,
            "start_column": 4471,
            "end_line": 4,
            "end_column": 4519,
            "start_byte": 4471,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 135,
            "start_column": 4525,
            "end_line": 4,
            "end_column": 4710,
            "start_byte": 4525,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 141,
            "start_column": 4716,
            "end_line": 4,
            "end_column": 4971,
            "start_byte": 4716,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.getbasetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 145,
            "start_column": 4977,
            "end_line": 4,
            "end_column": 5168,
            "start_byte": 4977,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t",
            "start_line": 101,
            "start_column": 3289,
            "end_line": 4,
            "end_column": 4297,
            "start_byte": 3289,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.get_user",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None",
            "start_line": 150,
            "start_column": 5171,
            "end_line": 0,
            "end_column": 5440,
            "start_byte": 5171,
            "end_byte": 0
          }
        ]
      }
    },
    {
      "name": "SymbolsEvaluate",
      "metadata": {
        "start": "2024-08-19T13:35:34.627457",
        "usage": "12702.388763427734 ms"
      },
      "request": {
        "related_symbols": [
          {
            "name": "_pytest.tmpdir.TempPathFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ytest.fixtures import _fillfuncargs\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import yield_fixture\nfrom _pytest.freeze_support import freeze_includes\nfrom _pytest.logging import LogCaptureFixture\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.python import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestExperimentalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"Metafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
            "start_line": 22,
            "start_column": 585,
            "end_line": 0,
            "end_column": 4297,
            "start_byte": 585,
            "end_byte": 0
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._given_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.freeze_support import freeze_includes\nfrom",
            "start_line": 30,
            "start_column": 802,
            "end_line": 4,
            "end_column": 848,
            "start_byte": 802,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._trace",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.logging import",
            "start_line": 31,
            "start_column": 853,
            "end_line": 4,
            "end_column": 871,
            "start_byte": 853,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "aptureFixture\nfrom _pytest.main import S",
            "start_line": 32,
            "start_column": 876,
            "end_line": 4,
            "end_column": 916,
            "start_byte": 876,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.p",
            "start_line": 34,
            "start_column": 922,
            "end_line": 4,
            "end_column": 1619,
            "start_byte": 922,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.from_config",
            "file_path": "src/pytest/__init__.py",
            "file_content": "import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_type",
            "start_line": 53,
            "start_column": 1625,
            "end_line": 4,
            "end_column": 2055,
            "start_byte": 1625,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory._ensure_relative_to_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "rt PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestEx",
            "start_line": 71,
            "start_column": 2061,
            "end_line": 4,
            "end_column": 2357,
            "start_byte": 2061,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ntalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n",
            "start_line": 77,
            "start_column": 2363,
            "end_line": 4,
            "end_column": 3283,
            "start_byte": 2363,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "etafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
            "start_line": 101,
            "start_column": 3289,
            "end_line": 4,
            "end_column": 4297,
            "start_byte": 3289,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 127,
            "start_column": 4300,
            "end_line": 0,
            "end_column": 5168,
            "start_byte": 4300,
            "end_byte": 0
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory._tmppath_factory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 133,
            "start_column": 4471,
            "end_line": 4,
            "end_column": 4519,
            "start_byte": 4471,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 135,
            "start_column": 4525,
            "end_line": 4,
            "end_column": 4710,
            "start_byte": 4525,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 141,
            "start_column": 4716,
            "end_line": 4,
            "end_column": 4971,
            "start_byte": 4716,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.TempdirFactory.getbasetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 145,
            "start_column": 4977,
            "end_line": 4,
            "end_column": 5168,
            "start_byte": 4977,
            "end_byte": 4
          }
        ],
        "root_caused_symbols": [
          {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t",
            "start_line": 101,
            "start_column": 3289,
            "end_line": 4,
            "end_column": 4297,
            "start_byte": 3289,
            "end_byte": 4
          },
          {
            "name": "_pytest.tmpdir.get_user",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None",
            "start_line": 150,
            "start_column": 5171,
            "end_line": 0,
            "end_column": 5440,
            "start_byte": 5171,
            "end_byte": 0
          }
        ]
      },
      "response": {
        "scratch_pad": "### Analysis of the User-Reported Issue\n1. **Issue Description**: The problem arises when creating temporary directories with pytest on systems where `getpass.getuser()` may return username strings containing characters not allowed in directory names. A specific example is Windows returning domain\\username format, which isn't valid as a directory path directly.\n\n2. **Cause**: The use of `getpass.getuser()` returns the domain\\username which contains a backslash `\\`, an illegal character for directory names in many file systems. This causes a failure when Python/Pytest tries to create a temporary directory using this string as part of the path.\n\n3. **Expected Result**: The username part of the path should be sanitized or altered to ensure it does not contain illegal characters so that directory creation succeeds.\n\n4. **Suggested Solution**: Introduce a sanitization step in the code that transforms or removes illegal characters from the username before it is used in path creation.\n\n### Evaluate the Provided Symbols\n1. **`get_user` Function**: This function retrieves the username and can fail when the user string has illegal characters. A modification is required here to sanitize the username to replace/remove characters like `\\`.\n\n2. **`getbasetemp` Method**: This method in `TempPathFactory` uses the username to create a directory path. It should use a sanitized username.\n\n3. **`TempPathFactory` Class**: The methods and variables that draw upon `get_user()` for directory naming need to ensure the `user` value is sanitized.\n\n4. **`TempdirFactory` Class & Related Functions**: While the primary concern is with the path creation using `get_user`, ensuring all uses in these factories handle such usernames would be wise.\n\n### Changes to Be Made\n- **Symbol**: `get_user` in `src/_pytest/tmpdir.py`\n  - **Change**: Sanitize the output of `getpass.getuser()` before returning it.\n- **Symbol**: `getbasetemp` in `src/_pytest/tmpdir.py`\n  - **Change**: Ensure the `user` variable (result of `get_user()`) is void of illegal characters when constructing directory paths. This might already be dealt with by changing `get_user`, but should be checked.\n\nWith these observations, I will specify the exact number of symbols to change.",
        "symbols": [
          {
            "name": "_pytest.tmpdir.get_user",
            "file_path": "src/_pytest/tmpdir.py",
            "reason": "The function returns username with possible illegal characters. It needs to be modified to sanitize the username by replacing or removing illegal directory characters."
          },
          {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "reason": "This method uses the output of get_user() to create a directory path, so it should be ensured that after sanitization, the username used is indeed valid for file paths."
          }
        ],
        "more_info": [],
        "is_done": true,
        "symbols_scratch_pad": [
          "Symbol `_pytest.tmpdir.get_user` in `src/_pytest/tmpdir.py`: This function directly returns the username, which may be problematic when containing invalid path characters like `\\`. We need to change its functionality to sanitize the username before returning it.",
          "Symbol `_pytest.tmpdir.TempPathFactory.getbasetemp` in `src/_pytest/tmpdir.py`: This method constructs paths using the potentially problematic output from `get_user()`. Hence, it must be ensured that any user value utilized here is based on a sanitized output."
        ]
      }
    },
    {
      "name": "SymbolSummary",
      "metadata": {
        "start": "2024-08-19T13:35:47.329890",
        "usage": "2.5539398193359375 ms"
      },
      "request": {
        "symbols": {
          "related_symbols": [
            {
              "name": "_pytest.tmpdir.TempPathFactory",
              "file_path": "src/pytest/__init__.py",
              "file_content": "ytest.fixtures import _fillfuncargs\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import yield_fixture\nfrom _pytest.freeze_support import freeze_includes\nfrom _pytest.logging import LogCaptureFixture\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.python import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestExperimentalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"Metafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
              "start_line": 22,
              "start_column": 585,
              "end_line": 0,
              "end_column": 4297,
              "start_byte": 585,
              "end_byte": 0
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory._given_basetemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "est.freeze_support import freeze_includes\nfrom",
              "start_line": 30,
              "start_column": 802,
              "end_line": 4,
              "end_column": 848,
              "start_byte": 802,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory._trace",
              "file_path": "src/pytest/__init__.py",
              "file_content": "est.logging import",
              "start_line": 31,
              "start_column": 853,
              "end_line": 4,
              "end_column": 871,
              "start_byte": 853,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory._basetemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "aptureFixture\nfrom _pytest.main import S",
              "start_line": 32,
              "start_column": 876,
              "end_line": 4,
              "end_column": 916,
              "start_byte": 876,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory.__init__",
              "file_path": "src/pytest/__init__.py",
              "file_content": "\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.p",
              "start_line": 34,
              "start_column": 922,
              "end_line": 4,
              "end_column": 1619,
              "start_byte": 922,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory.from_config",
              "file_path": "src/pytest/__init__.py",
              "file_content": "import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_type",
              "start_line": 53,
              "start_column": 1625,
              "end_line": 4,
              "end_column": 2055,
              "start_byte": 1625,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory._ensure_relative_to_basetemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "rt PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestEx",
              "start_line": 71,
              "start_column": 2061,
              "end_line": 4,
              "end_column": 2357,
              "start_byte": 2061,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory.mktemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "ntalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n",
              "start_line": 77,
              "start_column": 2363,
              "end_line": 4,
              "end_column": 3283,
              "start_byte": 2363,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "etafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
              "start_line": 101,
              "start_column": 3289,
              "end_line": 4,
              "end_column": 4297,
              "start_byte": 3289,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempdirFactory",
              "file_path": "src/pytest/__init__.py",
              "file_content": "",
              "start_line": 127,
              "start_column": 4300,
              "end_line": 0,
              "end_column": 5168,
              "start_byte": 4300,
              "end_byte": 0
            },
            {
              "name": "_pytest.tmpdir.TempdirFactory._tmppath_factory",
              "file_path": "src/pytest/__init__.py",
              "file_content": "",
              "start_line": 133,
              "start_column": 4471,
              "end_line": 4,
              "end_column": 4519,
              "start_byte": 4471,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempdirFactory.__init__",
              "file_path": "src/pytest/__init__.py",
              "file_content": "",
              "start_line": 135,
              "start_column": 4525,
              "end_line": 4,
              "end_column": 4710,
              "start_byte": 4525,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempdirFactory.mktemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "",
              "start_line": 141,
              "start_column": 4716,
              "end_line": 4,
              "end_column": 4971,
              "start_byte": 4716,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.TempdirFactory.getbasetemp",
              "file_path": "src/pytest/__init__.py",
              "file_content": "",
              "start_line": 145,
              "start_column": 4977,
              "end_line": 4,
              "end_column": 5168,
              "start_byte": 4977,
              "end_byte": 4
            }
          ],
          "root_caused_symbols": [
            {
              "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
              "file_path": "src/_pytest/tmpdir.py",
              "file_content": "def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t",
              "start_line": 101,
              "start_column": 3289,
              "end_line": 4,
              "end_column": 4297,
              "start_byte": 3289,
              "end_byte": 4
            },
            {
              "name": "_pytest.tmpdir.get_user",
              "file_path": "src/_pytest/tmpdir.py",
              "file_content": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None",
              "start_line": 150,
              "start_column": 5171,
              "end_line": 0,
              "end_column": 5440,
              "start_byte": 5171,
              "end_byte": 0
            }
          ]
        },
        "symbols_evaluate": {
          "scratch_pad": "### Analysis of the User-Reported Issue\n1. **Issue Description**: The problem arises when creating temporary directories with pytest on systems where `getpass.getuser()` may return username strings containing characters not allowed in directory names. A specific example is Windows returning domain\\username format, which isn't valid as a directory path directly.\n\n2. **Cause**: The use of `getpass.getuser()` returns the domain\\username which contains a backslash `\\`, an illegal character for directory names in many file systems. This causes a failure when Python/Pytest tries to create a temporary directory using this string as part of the path.\n\n3. **Expected Result**: The username part of the path should be sanitized or altered to ensure it does not contain illegal characters so that directory creation succeeds.\n\n4. **Suggested Solution**: Introduce a sanitization step in the code that transforms or removes illegal characters from the username before it is used in path creation.\n\n### Evaluate the Provided Symbols\n1. **`get_user` Function**: This function retrieves the username and can fail when the user string has illegal characters. A modification is required here to sanitize the username to replace/remove characters like `\\`.\n\n2. **`getbasetemp` Method**: This method in `TempPathFactory` uses the username to create a directory path. It should use a sanitized username.\n\n3. **`TempPathFactory` Class**: The methods and variables that draw upon `get_user()` for directory naming need to ensure the `user` value is sanitized.\n\n4. **`TempdirFactory` Class & Related Functions**: While the primary concern is with the path creation using `get_user`, ensuring all uses in these factories handle such usernames would be wise.\n\n### Changes to Be Made\n- **Symbol**: `get_user` in `src/_pytest/tmpdir.py`\n  - **Change**: Sanitize the output of `getpass.getuser()` before returning it.\n- **Symbol**: `getbasetemp` in `src/_pytest/tmpdir.py`\n  - **Change**: Ensure the `user` variable (result of `get_user()`) is void of illegal characters when constructing directory paths. This might already be dealt with by changing `get_user`, but should be checked.\n\nWith these observations, I will specify the exact number of symbols to change.",
          "symbols": [
            {
              "name": "_pytest.tmpdir.get_user",
              "file_path": "src/_pytest/tmpdir.py",
              "reason": "The function returns username with possible illegal characters. It needs to be modified to sanitize the username by replacing or removing illegal directory characters."
            },
            {
              "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
              "file_path": "src/_pytest/tmpdir.py",
              "reason": "This method uses the output of get_user() to create a directory path, so it should be ensured that after sanitization, the username used is indeed valid for file paths."
            }
          ],
          "more_info": [],
          "is_done": true,
          "symbols_scratch_pad": [
            "Symbol `_pytest.tmpdir.get_user` in `src/_pytest/tmpdir.py`: This function directly returns the username, which may be problematic when containing invalid path characters like `\\`. We need to change its functionality to sanitize the username before returning it.",
            "Symbol `_pytest.tmpdir.TempPathFactory.getbasetemp` in `src/_pytest/tmpdir.py`: This method constructs paths using the potentially problematic output from `get_user()`. Hence, it must be ensured that any user value utilized here is based on a sanitized output."
          ]
        }
      },
      "response": {
        "file_paths": [
          "src/_pytest/tmpdir.py"
        ],
        "symbols": [
          "_pytest.tmpdir.get_user",
          "_pytest.tmpdir.TempPathFactory.getbasetemp"
        ],
        "code_spans": {
          "_pytest.tmpdir.TempPathFactory": {
            "name": "_pytest.tmpdir.TempPathFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ytest.fixtures import _fillfuncargs\nfrom _pytest.fixtures import fixture\nfrom _pytest.fixtures import FixtureLookupError\nfrom _pytest.fixtures import FixtureRequest\nfrom _pytest.fixtures import yield_fixture\nfrom _pytest.freeze_support import freeze_includes\nfrom _pytest.logging import LogCaptureFixture\nfrom _pytest.main import Session\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.python import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_types import PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestExperimentalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n    \"Metafunc\",\n    \"Module\",\n    \"MonkeyPatch\",\n    \"Package\",\n    \"param\",\n    \"PytestAssertRewriteWarning\",\n    \"PytestCacheWarning\",\n    \"PytestCollectionWarning\",\n    \"PytestConfigWarning\",\n    \"PytestDeprecationWarning\",\n    \"PytestExperimentalApiWarning\",\n    \"Pytester\",\n    \"PytestUnhandledCoroutineWarning\",\n    \"PytestUnhandledThreadExceptionWarning\",\n    \"PytestUnknownMarkWarning\",\n    \"PytestUnraisableExceptionWarning\",\n    \"PytestWarning\",\n    \"raises\",\n    \"register_assert_rewrite\",\n    \"Session\",\n    \"set_trace\",\n    \"skip\",\n    \"TempPathFactory\",\n    \"Testdir\",\n    \"TempdirFactory\",\n    \"UsageError\",\n    \"WarningsRecorder\",\n    \"warns\",\n    \"xfail\",\n    \"yield_fixture\",\n]\n",
            "start_line": 22,
            "start_column": 585,
            "end_line": 0,
            "end_column": 4297,
            "start_byte": 585,
            "end_byte": 0
          },
          "_pytest.tmpdir.TempPathFactory._given_basetemp": {
            "name": "_pytest.tmpdir.TempPathFactory._given_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.freeze_support import freeze_includes\nfrom",
            "start_line": 30,
            "start_column": 802,
            "end_line": 4,
            "end_column": 848,
            "start_byte": 802,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory._trace": {
            "name": "_pytest.tmpdir.TempPathFactory._trace",
            "file_path": "src/pytest/__init__.py",
            "file_content": "est.logging import",
            "start_line": 31,
            "start_column": 853,
            "end_line": 4,
            "end_column": 871,
            "start_byte": 853,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory._basetemp": {
            "name": "_pytest.tmpdir.TempPathFactory._basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "aptureFixture\nfrom _pytest.main import S",
            "start_line": 32,
            "start_column": 876,
            "end_line": 4,
            "end_column": 916,
            "start_byte": 876,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory.__init__": {
            "name": "_pytest.tmpdir.TempPathFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "\nfrom _pytest.mark import Mark\nfrom _pytest.mark import MARK_GEN as mark\nfrom _pytest.mark import MarkDecorator\nfrom _pytest.mark import MarkGenerator\nfrom _pytest.mark import param\nfrom _pytest.monkeypatch import MonkeyPatch\nfrom _pytest.nodes import Collector\nfrom _pytest.nodes import File\nfrom _pytest.nodes import Item\nfrom _pytest.outcomes import exit\nfrom _pytest.outcomes import fail\nfrom _pytest.outcomes import importorskip\nfrom _pytest.outcomes import skip\nfrom _pytest.outcomes import xfail\nfrom _pytest.pytester import Pytester\nfrom _pytest.pytester import Testdir\nfrom _pytest.python import Class\nfrom _pytest.python import Function\nfrom _pytest.python import Instance\nfrom _pytest.p",
            "start_line": 34,
            "start_column": 922,
            "end_line": 4,
            "end_column": 1619,
            "start_byte": 922,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory.from_config": {
            "name": "_pytest.tmpdir.TempPathFactory.from_config",
            "file_path": "src/pytest/__init__.py",
            "file_content": "import Metafunc\nfrom _pytest.python import Module\nfrom _pytest.python import Package\nfrom _pytest.python_api import approx\nfrom _pytest.python_api import raises\nfrom _pytest.recwarn import deprecated_call\nfrom _pytest.recwarn import WarningsRecorder\nfrom _pytest.recwarn import warns\nfrom _pytest.runner import CallInfo\nfrom _pytest.tmpdir import TempdirFactory\nfrom _pytest.tmpdir import TempPathFactory\nfrom _pytest.warning_type",
            "start_line": 53,
            "start_column": 1625,
            "end_line": 4,
            "end_column": 2055,
            "start_byte": 1625,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory._ensure_relative_to_basetemp": {
            "name": "_pytest.tmpdir.TempPathFactory._ensure_relative_to_basetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "rt PytestAssertRewriteWarning\nfrom _pytest.warning_types import PytestCacheWarning\nfrom _pytest.warning_types import PytestCollectionWarning\nfrom _pytest.warning_types import PytestConfigWarning\nfrom _pytest.warning_types import PytestDeprecationWarning\nfrom _pytest.warning_types import PytestEx",
            "start_line": 71,
            "start_column": 2061,
            "end_line": 4,
            "end_column": 2357,
            "start_byte": 2061,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory.mktemp": {
            "name": "_pytest.tmpdir.TempPathFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "ntalApiWarning\nfrom _pytest.warning_types import PytestUnhandledCoroutineWarning\nfrom _pytest.warning_types import PytestUnhandledThreadExceptionWarning\nfrom _pytest.warning_types import PytestUnknownMarkWarning\nfrom _pytest.warning_types import PytestUnraisableExceptionWarning\nfrom _pytest.warning_types import PytestWarning\n\nset_trace = __pytestPDB.set_trace\n\n__all__ = [\n    \"__version__\",\n    \"_fillfuncargs\",\n    \"approx\",\n    \"Cache\",\n    \"CallInfo\",\n    \"CaptureFixture\",\n    \"Class\",\n    \"cmdline\",\n    \"collect\",\n    \"Collector\",\n    \"console_main\",\n    \"deprecated_call\",\n    \"exit\",\n    \"ExitCode\",\n    \"fail\",\n    \"File\",\n    \"fixture\",\n    \"FixtureLookupError\",\n    \"FixtureRequest\",\n    \"freeze_includes\",\n    \"Function\",\n    \"hookimpl\",\n    \"hookspec\",\n    \"importorskip\",\n    \"Instance\",\n    \"Item\",\n    \"LogCaptureFixture\",\n    \"main\",\n    \"mark\",\n    \"Mark\",\n    \"MarkDecorator\",\n    \"MarkGenerator\",\n",
            "start_line": 77,
            "start_column": 2363,
            "end_line": 4,
            "end_column": 3283,
            "start_byte": 2363,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempPathFactory.getbasetemp": {
            "name": "_pytest.tmpdir.TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t",
            "start_line": 101,
            "start_column": 3289,
            "end_line": 4,
            "end_column": 4297,
            "start_byte": 3289,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempdirFactory": {
            "name": "_pytest.tmpdir.TempdirFactory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 127,
            "start_column": 4300,
            "end_line": 0,
            "end_column": 5168,
            "start_byte": 4300,
            "end_byte": 0
          },
          "_pytest.tmpdir.TempdirFactory._tmppath_factory": {
            "name": "_pytest.tmpdir.TempdirFactory._tmppath_factory",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 133,
            "start_column": 4471,
            "end_line": 4,
            "end_column": 4519,
            "start_byte": 4471,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempdirFactory.__init__": {
            "name": "_pytest.tmpdir.TempdirFactory.__init__",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 135,
            "start_column": 4525,
            "end_line": 4,
            "end_column": 4710,
            "start_byte": 4525,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempdirFactory.mktemp": {
            "name": "_pytest.tmpdir.TempdirFactory.mktemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 141,
            "start_column": 4716,
            "end_line": 4,
            "end_column": 4971,
            "start_byte": 4716,
            "end_byte": 4
          },
          "_pytest.tmpdir.TempdirFactory.getbasetemp": {
            "name": "_pytest.tmpdir.TempdirFactory.getbasetemp",
            "file_path": "src/pytest/__init__.py",
            "file_content": "",
            "start_line": 145,
            "start_column": 4977,
            "end_line": 4,
            "end_column": 5168,
            "start_byte": 4977,
            "end_byte": 4
          },
          "_pytest.tmpdir.get_user": {
            "name": "_pytest.tmpdir.get_user",
            "file_path": "src/_pytest/tmpdir.py",
            "file_content": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None",
            "start_line": 150,
            "start_column": 5171,
            "end_line": 0,
            "end_column": 5440,
            "start_byte": 5171,
            "end_byte": 0
          }
        }
      }
    }
  ]
}