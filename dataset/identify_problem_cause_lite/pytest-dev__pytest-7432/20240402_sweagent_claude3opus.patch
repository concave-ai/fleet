
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 7bd975e5a..fb25e948e 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -229,13 +229,13 @@ xfailed_key = StoreKey[Optional[Xfail]]()
 unexpectedsuccess_key = StoreKey[str]()
 
 
+@hookimpl(tryfirst=True)
 @hookimpl(tryfirst=True)
 def pytest_runtest_setup(item: Item) -> None:
-    item._store[skipped_by_mark_key] = False
-
     skipped = evaluate_skip_marks(item)
     if skipped:
-        item._store[skipped_by_mark_key] = True
+        if not item.config.option.runxfail:
+            item._store[skipped_by_mark_key] = True
         skip(skipped.reason)
 
     if not item.config.option.runxfail:
@@ -243,7 +243,6 @@ def pytest_runtest_setup(item: Item) -> None:
         if xfailed and not xfailed.run:
             xfail("[NOTRUN] " + xfailed.reason)
 
-
 @hookimpl(hookwrapper=True)
 def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
     xfailed = item._store.get(xfailed_key, None)
@@ -292,8 +291,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
     elif (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
+        rep.skipped
         and type(rep.longrepr) is tuple
     ):
         # skipped by mark.skipif; change the location of the failure
@@ -303,8 +301,6 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         filename, line = item.reportinfo()[:2]
         assert line is not None
         rep.longrepr = str(filename), line + 1, reason
-
-
 def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:
     if hasattr(report, "wasxfail"):
         if report.skipped:
diff --git a/test_skip_location.py b/test_skip_location.py
new file mode 100644
index 000000000..6f5127470
--- /dev/null
+++ b/test_skip_location.py
@@ -0,0 +1,4 @@
+import pytest
+@pytest.mark.skip
+def test_skip_location() -> None:
+    assert 0
