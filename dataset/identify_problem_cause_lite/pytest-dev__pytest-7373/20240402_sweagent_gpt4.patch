
diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py
index 759191668..ac29fb7d9 100644
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -15,20 +15,6 @@ from _pytest.nodes import Item
 from _pytest.store import StoreKey
 
 
-evalcache_key = StoreKey[Dict[str, Any]]()
-
-
-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:
-    default = {}  # type: Dict[str, object]
-    evalcache = config._store.setdefault(evalcache_key, default)
-    try:
-        return evalcache[expr]
-    except KeyError:
-        import _pytest._code
-
-        exprcode = _pytest._code.compile(expr, mode="eval")
-        evalcache[expr] = x = eval(exprcode, d)
-        return x
 
 
 class MarkEvaluator:
@@ -55,31 +41,6 @@ class MarkEvaluator:
         return not isinstance(exc, raises)
 
     def istrue(self) -> bool:
-        try:
-            return self._istrue()
-        except TEST_OUTCOME:
-            self.exc = sys.exc_info()
-            if isinstance(self.exc[1], SyntaxError):
-                # TODO: Investigate why SyntaxError.offset is Optional, and if it can be None here.
-                assert self.exc[1].offset is not None
-                msg = [" " * (self.exc[1].offset + 4) + "^"]
-                msg.append("SyntaxError: invalid syntax")
-            else:
-                msg = traceback.format_exception_only(*self.exc[:2])
-            fail(
-                "Error evaluating %r expression\n"
-                "    %s\n"
-                "%s" % (self._mark_name, self.expr, "\n".join(msg)),
-                pytrace=False,
-            )
-
-    def _getglobals(self) -> Dict[str, object]:
-        d = {"os": os, "sys": sys, "platform": platform, "config": self.item.config}
-        if hasattr(self.item, "obj"):
-            d.update(self.item.obj.__globals__)  # type: ignore[attr-defined] # noqa: F821
-        return d
-
-    def _istrue(self) -> bool:
         if hasattr(self, "result"):
             result = getattr(self, "result")  # type: bool
             return result
@@ -97,10 +58,12 @@ class MarkEvaluator:
                 for expr in args:
                     self.expr = expr
                     if isinstance(expr, str):
-                        d = self._getglobals()
-                        result = cached_eval(self.item.config, expr, d)
-                    else:
-                        if "reason" not in mark.kwargs:
+                        d = self.getglobals()
+                        def _getglobals(self) -> Dict[str, object]:
+                            d = {"os": os, "sys": sys, "platform": platform, "config": self.item.config}
+                            if hasattr(self.item, "obj"):
+                                d.update(self.item.obj.__globals__)  # type: ignore[attr-defined] # noqa: F821
+                            return d
                             # XXX better be checked at collection time
                             msg = (
                                 "you need to specify reason=STRING "
diff --git a/test_module_1.py b/test_module_1.py
new file mode 100644
index 000000000..563d4e09f
--- /dev/null
+++ b/test_module_1.py
@@ -0,0 +1,7 @@
+import pytest
+
+skip = True
+
+@pytest.mark.skipif("skip")
+def test_should_skip():
+    assert False
diff --git a/test_module_2.py b/test_module_2.py
new file mode 100644
index 000000000..137ab0df8
--- /dev/null
+++ b/test_module_2.py
@@ -0,0 +1,7 @@
+import pytest
+
+skip = False
+
+@pytest.mark.skipif("skip")
+def test_should_not_skip():
+    assert False
